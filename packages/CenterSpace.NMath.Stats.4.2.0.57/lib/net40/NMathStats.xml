<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NMathStats</name>
    </assembly>
    <members>
        <member name="T:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2">
            <summary>
            Class <code>DoubleFactorAnalysis</code> performs a factor analysis
            on a symmetric matrix of data, assumed to be either a correlation 
            or covariance matrix, using specified factor extraction and rotation
            algorithms. The analysis consists of 2 steps:
            First, factors are extracted from the symmetric matrix data,
            second, the factors are rotated in order to maximize the relationship
            between the variables and some of the factors.
            </summary>
            <typeparam name="Extraction">Type implementing the <code>IFactorExtraction</code>
            interface which extracts the factors.</typeparam>
            <typeparam name="Rotation">Type implementing the <code>IFactorRotation</code>
            interface for factor rotation.</typeparam>
            <remarks>Use the class <code>NoRotation</code>
            if factor rotation is not desired.
            To perform factor analysis using the correlation matrix of case data use
            class <code>FactorAnalysisCorrelation</code>. To perform factor analysis
            using the covariance matrix of case data use class 
            <code>FactorAnalysisCovariance</code></remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.factorExtraction_">
            <summary>
            Factor extraction algorithm.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.factorRotation_">
            <summary>
            Factor rotation algorithm.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.matrixData_">
            <summary>
            Matrix data being analyzed (correlation or covariance).
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.factorMatrix_">
            <summary>
            The extracted factors.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.rotatedFactorMatrix_">
            <summary>
            The rotated factors.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.bias_">
            <summary>
            The bias type for all variance estimates.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.noRotation_">
            <summary>
            Boolean variable indicating whether or not factor rotation was requested.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.numberOfFactors_">
            <summary>
            Number of factors to be extracted.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.#ctor(CenterSpace.NMath.Matrix.DoubleSymmetricMatrix,CenterSpace.NMath.Stats.BiasType,`0,`1)">
            <summary>
            Constructs a <code>DoubleFactorAnalysis</code> object from the
            given matrix data. Factors are extracted from the matrix of varaible
            relations (correlation or covariance) and then rotated 
            to maximize the relationship between the variables and some of the factors.
            </summary>
            <param name="matrixData">Data to analyze. Should be either the correlation 
            or covariance matrix.</param>
            <param name="bias">Specifies whether a biased or unbiased estimate of
            variances is to be used.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
            <param name="factorRotation">Object to be used for factor rotation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.#ctor(CenterSpace.NMath.Matrix.DoubleSymmetricMatrix,CenterSpace.NMath.Stats.BiasType,`0)">
            <summary>
            Constructs a <code>DoubleFactorAnalysis</code> object from the
            given matrix data. Factors are extracted from the matrix of varaible
            relations (correlation or covariance) and then rotated 
            to maximize the relationship between the variables and some of the factors.
            Factor rotation will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments.
            </summary>
            <param name="matrixData">Data to analyze. Should be either the correlation 
            or covariance matrix.</param>
            <param name="bias">Specifies whether a biased or unbiased estimate of
            variances is to be used.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.#ctor(CenterSpace.NMath.Matrix.DoubleSymmetricMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Constructs a <code>DoubleFactorAnalysis</code> object from the
            given matrix data. Factors are extracted from the matrix of varaible
            relations (correlation or covariance) and then rotated 
            to maximize the relationship between the variables and some of the factors.
            Factor extraction will be performed by an instance of the <code>Extraction</code>
            class type parameter constructed with no arguments, and factor rotation
            will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments.
            </summary>
            <param name="matrixData">Data to analyze. Should be either the correlation 
            or covariance matrix.</param>
            <param name="bias">Specifies whether a biased or unbiased estimate of
            variances is to be used.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.#ctor(CenterSpace.NMath.Matrix.DoubleSymmetricMatrix,`0)">
            <summary>
            Constructs a <code>DoubleFactorAnalysis</code> object from the
            given matrix data. Factors are extracted from the matrix of varaible
            relations (correlation or covariance) and then rotated 
            to maximize the relationship between the variables and some of the factors.
            Factor rotation will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments. Variance estimates will
            be unbiased.
            </summary>
            <param name="matrixData">Data to analyze. Should be either the correlation 
            or covariance matrix.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.#ctor(CenterSpace.NMath.Matrix.DoubleSymmetricMatrix)">
            <summary>
            Constructs a <code>DoubleFactorAnalysis</code> object from the
            given matrix data. Factors are extracted from the matrix of varaible
            relations (correlation or covariance) and then rotated 
            to maximize the relationship between the variables and some of the factors.
            Factor extraction will be performed by an instance of the <code>Extraction</code>
            class type parameter constructed with no arguments, and factor rotation
            will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments. Variance estimates will be
            unbiased.
            </summary>
            <param name="matrixData">Data to analyze. Should be either the correlation 
            or covariance matrix.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.#ctor(CenterSpace.NMath.Stats.BiasType,`0,`1)">
            <summary>
            Constructs a <code>DoubleFactorAnalysis</code> object with the given
            factor analysis options. No data is specified. The constructor is used
            by deriving classes to set up a factor analysis on a particular correlation
            or covaraince matrix. Construction is followed by a call to the <code>Analyze</code>
            method on the resulting object.
            </summary>
            <param name="bias">Specifies if varaince estimates should be biased or unbiased.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
            <param name="factorRotation">Object to be used for factor rotation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.#ctor(CenterSpace.NMath.Stats.DoubleFactorAnalysis{`0,`1})">
            <summary>
            Copy constructor. Initializes self with the state of other.
            </summary>
            <param name="other">Object to copy.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.Factors">
            <summary>
            Gets the extracted factors. Each column of the matrix is a factor.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.RotatedFactors">
            <summary>
            Gets the rotated factors (will be the same as <code>Factors</code>
            property if <code>NoRotation</code> is the rotation class parameter
            type).  Each column of the matrix is a factor.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.MatrixData">
            <summary>
            Gets the matrix data from which factors were extracted. This
            is either the correlation matrix of the covariance matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.FactorExtraction">
            <summary>
            Gets the object that performs the factor extraction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.FactorRotation">
            <summary>
            Gets the object that performs the factor rotation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.VarianceProportions">
            <summary>
            Gets a vector of proportion of variance explained by each factor. The
            ith entry corresoponds to the ith factor.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.NumberOfFactors">
            <summary>
            The number of factors extracted.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.CumulativeVarianceProportions">
            <summary>
            Gets the cumulative variance proportions.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.ExtractedCommunalities">
            <summary>
            This is the proportion of each variable's variance that can be explained by
            the extracted factors jointly. The ith entry corresponds to the ith variable.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.InitialCommunalities">
            <summary>
            This is the proportion of each variable's variance that can be explained by
            the factors jointly. The ith entry corresponds to the ith variable.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.SumOfSquaredLoadings">
            <summary>
            Gets the sum of squared loadings for each extracted factor.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.RotatedSumOfSquaredLoadings">
            <summary>
            Gets the sum of squared loadings for each rotated extracted factor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.Analyze(CenterSpace.NMath.Matrix.DoubleSymmetricMatrix)">
            <summary>
            Performs a factor analysis on the given symmetric covariance or correlation
            matrix for the data being analyzed.
            </summary>
            <param name="matrixData">The covariance of correlation matrix for the
            data being analyzed.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.Rotate">
            <summary>
            Performs factor rotation using the <code>factorRotation_</code> field.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.SortRotatedFactorsAndLoadings(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Sorts the rotated factor and rotated sum of squared loadings matrices in order
            of descending variance of the rotated factors. Done mostly to match the output
            of SPSS. The result is stored in the <code>rotatedFactorMatrix_</code> field.
            </summary>
            <param name="unsortedRotatedFactors">Original unsorted rotated factor matrix.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.ComputeCovarianceMatrix(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covaraince matrix for the given data and bias type. The
            result is returned as a symmetric matrix object.
            </summary>
            <param name="X">The data.</param>
            <param name="bias">The bias type.</param>
            <returns>Covariance as a symmetric matrix.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.AdjustFactorSigns(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Adjusts the signs of the factors according to the convention that
            the sum of all factor components should be non-negative.
            Implemented to match SPSS output.
            </summary>
            <param name="factors">Input: The factor matrix.
            Output: The factor matrix with signs adjusted.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.StandardizeData(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the standardized data - means 0 and variances 1.
            </summary>
            <param name="data">Non-standardized daa.</param>
            <param name="bias">The bias type.</param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.ComputeCovarianceMatrix(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance matrix for the given data whose means are already known.
            </summary>
            <param name="X">The data.</param>
            <param name="means">The column means of the data.</param>
            <param name="bias">The bias type.</param>
            <returns>Covariance as a symmetric matrix.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.ComputeCovarainceMatrixZeroMeans(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance matrix for data when the variable means are 
            known to be zero. 
            </summary>
            <param name="X">Data with zero means.</param>
            <param name="bias">The bias type.</param>
            <returns>Covariance as a symmetric matrix.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.StandardizeData(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType,CenterSpace.NMath.Core.DoubleVector@,CenterSpace.NMath.Core.DoubleVector@)">
            <summary>
            Computes the standardized data - means 0 and variances 1.
            </summary>
            <param name="data">Non-standardized data.</param>
            <param name="bias">The bias type.</param>
            <param name="means">Column means of the data.</param>
            <param name="standardDeviations">Column standard deviations of the data.</param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.Covariance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance between two vectors of data.
            </summary>
            <param name="data1">One data vector.</param>
            <param name="data2">Another data vector.</param>
            <param name="mean1">Mean of the first data vector.</param>
            <param name="mean2">Mean of the second data vector.</param>
            <param name="bias">The bias type.</param>
            <returns>The covariance between the two data vectors.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleFactorAnalysis`2.CovarianceZeroMeans(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance between two vectors of data whose means are
            known to be zero.
            </summary>
            <param name="data1">One data vector.</param>
            <param name="data2">Another data vector.</param>
            <param name="bias">The bias type.</param>
            <returns>The covariance between the two data vectors.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2">
            <summary>
            Class FactorAnalysisCorrelation performs a factor analysis
            on a set of case data using the correlation matrix and specified 
            factor extraction and rotation algorithms.
            </summary>
            <remarks>The analysis consists of 3 steps:
            First, a correlation matrix is generated for all the variables. 
            Second, factors are extracted from the correlation matrix based on 
            the correlation coefficients of the variables.
            Third, the factors are rotated in order to maximize the relationship
            between the variables and some of the factors.
            </remarks>
            <typeparam name="Extraction">Type implementing the <code>IFactorExtraction</code>
            interface which extracts the factors.</typeparam>
            <typeparam name="Rotation">Type implementing the <code>IFactorRotation</code>
            interface for factor rotation. <remarks>Use the class <code>NoRotation</code>
            if factor rotation is not desired.</remarks></typeparam>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.caseData_">
            <summary>
            The orginal data to be analyzed. Each row is a case and each column
            a variable.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.standardizedCaseData_">
            <summary>
            The data normalized to have zero mean and unit variance.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.means_">
            <summary>
            Variable means. This the vector of column means of the case data.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.standardDeviations_">
            <summary>
            Variable standard deviations. This is the vector of column standard
            deviations of the case data.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType,`0,`1)">
            <summary>
            Constructs a <code>FactorAnalysisCorrelation</code> object from the
            given case data by forming the correlation matrix for the variables, 
            extracting the factors from the correlation matrix based on 
            the correlation coefficients of the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
            <param name="bias">Specifies whether a biased or unbiased estimate of
            the case data variable variance is to be used.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
            <param name="factorRotation">Object to be used for factor rotation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType,`0)">
            <summary>
            Constructs a <code>FactorAnalysisCorrelation</code> object from the
            given case data by forming the correlation matrix for the variables, 
            extracting the factors from the correlation matrix based on 
            the correlation coefficients of the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            Factor rotation will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
            <param name="bias">Specifies whether a biased or unbiased estimate of
            the case data variable variance is to be used.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Constructs a <code>FactorAnalysisCorrelation</code> object from the
            given case data by forming the correlation matrix for the variables, 
            extracting the factors from the correlation matrix based on 
            the correlation coefficients of the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            Factor extraction will be performed by an instance of the <code>Extraction</code>
            class type parameter constructed with no arguments, and factor rotation
            will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
            <param name="bias">Specifies whether a biased or unbiased estimate of
            the case data variable variance is to be used.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix,`0)">
            <summary>
            Constructs a <code>FactorAnalysisCorrelation</code> object from the
            given case data by forming the correlation matrix for the variables, 
            extracting the factors from the correlation matrix based on 
            the correlation coefficients of the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            Factor rotation will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments.
            By default, unbiased estimates of the case data variable variance are used.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a <code>FactorAnalysisCorrelation</code> object from the
            given case data by forming the correlation matrix for the variables, 
            extracting the factors from the correlation matrix based on 
            the correlation coefficients of the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            Factor extraction will be performed by an instance of the <code>Extraction</code>
            class type parameter constructed with no arguments, and factor rotation
            will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments. By default, unbiased 
            estimates of the case data variable variance are used.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.#ctor(CenterSpace.NMath.Stats.DoubleFactorAnalysis{`0,`1})">
            <summary>
            Constructs <code>FactorAnalysisCorrelation</code> with state contained
            in the base class set to that of the praramter <code>other</code>.
            Used for the <code>Clone()</code> method.
            </summary>
            <param name="other">State to copy.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.Means">
            <summary>
            Gets the vector of variable means. This is the column means of the 
            case data being analyzed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.StandardDeviations">
            <summary>
            Gets the vector of variable standard deviations. This is 
            the column standard deviations of the case data being analyzed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.StandardizedCaseData">
            <summary>
            Gets the case data standardized to have zero mean and unit variance.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.CaseData">
            <summary>
            Gets the case data being analyzed.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.FactorScoreCoefficients(CenterSpace.NMath.Stats.IFactorScores)">
            <summary>
            Gets the coefficients by which the variables are multiplied to obtain
            factor scores.
            </summary>
            <param name="compMethod">Algorithm to use for computing factor score
            coefficients.</param>
            <returns>The matrix of factor score coefficients.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.FactorScoreCoefficients">
            <summary>
            Gets the coefficients by which the variables are multiplied to obtain
            factor scores. The coefficients are computed using an instance of the
            class <code>RegressionFactorScores</code>.
            </summary>
            <returns>The matrix of factor score coefficients.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.FactorScores(CenterSpace.NMath.Stats.IFactorScores)">
            <summary>
            Gets the matrix of factor scores using the provided algorithm to
            compute them. The score for a given factor is a
            linear combination of all of the measures, weighted by the 
            corresponding factor loading.
            </summary>
            <param name="compMethod">Object for computing factor scores.</param>
            <returns>The matrix of factor scores.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.FactorScores">
            <summary>
            Gets the matrix of factor scores. The score for a given factor is a
            linear combination of all of the measures, weighted by the 
            corresponding factor loading.
            The scores are computed using an instance of the class
            <code>RegressionFactorScores</code>
            </summary>
            <returns>The matrix of factor scores.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCorrelation`2.Clone">
            <summary>
            Overrides the object Clone method.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2">
            <summary>
            Class FactorAnalysisCovariance performs a factor analysis
            on a set of case data using the covariance matrix and specified 
            factor extraction and rotation algorithms.
            </summary>
            <remarks>
            The analysis consists of 3 steps:
            First, a covariance matrix is generated for all the variables. 
            Second, factors are extracted from the covariance matrix based on 
            the covariance between variables.
            Third, the factors are rotated in order to maximize the relationship
            between the variables and some of the factors.
            </remarks>
            <typeparam name="Extraction">Type implementing the <code>IFactorExtraction</code>
            interface which extracts the factors.</typeparam>
            <typeparam name="Rotation">Type implementing the <code>IFactorRotation</code>
            interface for factor rotation. <remarks>Use the class <code>NoRotation</code>
            if factor rotation is not desired.</remarks></typeparam>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType,`0,`1)">
            <summary>
            Constructs a <code>FactorAnalysisCovariance</code> object from the
            given case data by forming the covariance matrix for the variables, 
            extracting the factors from the covariance matrix based on 
            the covariance between the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
            <param name="bias">Specifies whether a biased or unbiased estimate of
            the case data variable variance is to be used.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
            <param name="factorRotation">Object to be used for factor rotation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType,`0)">
            <summary>
            Constructs a <code>FactorAnalysisCovariance</code> object from the
            given case data by forming the covariance matrix for the variables, 
            extracting the factors from the covariance matrix based on 
            the covariance the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            Factor rotation will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
            <param name="bias">Specifies whether a biased or unbiased estimate of
            the case data variable variance is to be used.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Constructs a <code>FactorAnalysisCovariance</code> object from the
            given case data by forming the covariance matrix for the variables, 
            extracting the factors from the covariance matrix based on 
            the covariance between the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            Factor extraction will be performed by an instance of the <code>Extraction</code>
            class type parameter constructed with no arguments, and factor rotation
            will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
            <param name="bias">Specifies whether a biased or unbiased estimate of
            the case data variable variance is to be used.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix,`0)">
            <summary>
            Constructs a <code>FactorAnalysisCovariance</code> object from the
            given case data by forming the covariance matrix for the variables, 
            extracting the factors from the covariance matrix based on 
            the covariance between the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            Factor rotation will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments.
            By default, unbiased estimates of the case data variable variance are used.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
            <param name="factorExtraction">Object to be used for factor extraction.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a <code>FactorAnalysisCovariance</code> object from the
            given case data by forming the covariance matrix for the variables, 
            extracting the factors from the covariance matrix based on 
            the covariance between the variables and rotating the factors
            to maximize the relationship between the variables and some of the factors.
            Factor rotation will be performed by an instance of the <code>Rotation</code>
            class type parameter constructed with no arguments.
            By default, unbiased estimates of the case data variable variance are used.
            </summary>
            <param name="caseData">Data to analyze. Each column represents a variable
            and each row a case or observation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.#ctor(CenterSpace.NMath.Stats.DoubleFactorAnalysis{`0,`1})">
            <summary>
            Constructs <code>FactorAnalysisCovariance</code> with state contained
            in the base class set to that of the praramter <code>other</code>.
            Used for the <code>Clone()</code> method.
            </summary>
            <param name="other">State to copy.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.CaseData">
            <summary>
            Gets the case data being analyzed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.RescaledFactors">
            <summary>
            Gets the matrix of extracted factors which have been scaled by dividing
            by the standard deviation of the case data variables.
            Explicitly - The ith rescaled factor is the ith factor scaled by
            dividing each factor component by the standard deviation of the ith
            column of the case data being analyzed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.RotatedRescaledFactors">
            <summary>
            Gets the matrix of rotated factors which have been scaled by dividing
            by the standard deviation of the case data variables.
            Explicitly - The ith rescaled rotated factor is the ith rotated factor
            scaled by dividing each factor component by the standard deviation of the ith
            column of the case data being analyzed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.RescaledRotatedSumOfSquaredLoadings">
            <summary>
            Gets the sum of squared loadings for each rescaled rotated extracted factor.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.RescaledSumOfSquaredLoadings">
            <summary>
            Gets the sum of squared loadings for each rescaled extracted factor.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.RescaledExtractedCommunalities">
            <summary>
            This is the proportion of each variable's variance that can be explained by
            the extracted rescaled factors jointly. The ith entry corresponds to the ith variable.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.FactorScoreCoefficients(CenterSpace.NMath.Stats.IFactorScores)">
            <summary>
            Gets the coefficients by which the variables are multiplied to obtain
            factor scores.
            </summary>
            <param name="compMethod">Algorithm to use for computing factors score
            coefficients.</param>
            <returns>The matrix of factor score coefficients.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.FactorScoreCoefficients">
            <summary>
            Gets the coefficients by which the variables are multiplied to obtain
            factor scores. The coefficients are computed using an instance of the
            class <code>RegressionFactorScores</code>.
            </summary>
            <returns>The matrix of factor score coefficients.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.FactorScores(CenterSpace.NMath.Stats.IFactorScores)">
            <summary>
            Gets the matrix of factor scores using the provided algorithm to
            compute them. The score for a given factor is a
            linear combination of all of the measures, weighted by the 
            corresponding factor loading.
            </summary>
            <param name="compMethod">Object for computing factor scores.</param>
            <returns>The matrix of factor scores.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.FactorScores">
            <summary>
            Gets the matrix of factor scores. The score for a given factor is a
            linear combination of all of the measures, weighted by the 
            corresponding factor loading.
            The scores are computed using an instance of the class
            <code>RegressionFactorScores</code>
            </summary>
            <returns>The matrix of factor scores.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FactorAnalysisCovariance`2.SortRotatedFactorsAndLoadings(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Rotated raw rotated factors and raw sum of squared loadings are sorted by the
            variable variances of the scaled rotated factors.
            </summary>
            <param name="unsortedRotatedFactors">The raw, unsorted rotated factors.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IFactorExtraction">
            <summary>
            Interface for factor extration algorithms used in factor analysis. 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IFactorExtraction.ExtractFactors(CenterSpace.NMath.Matrix.DoubleSymmetricMatrix)">
            <summary>
            Algorithm for extracting factors from a covariance matrix.
            </summary>
            <param name="covarianceMatrix">Covariance matrix.</param>
            <returns>Extracted factors as columns of a matrix.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IFactorExtraction.VarianceProportions">
            <summary>
            Gets a vector of proportion of variance explained by each factor. The
            ith entry corresoponds to the ith factor.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IFactorRotation">
            <summary>
            Interface for factor analysis factor rotation algorithms. Factors are 
            rotated in order to maximize the relationship between the variables and 
            some of the factors.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IFactorRotation.Rotate(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Computes the matrix of rotated factors.
            </summary>
            <param name="factors">Matrix whose columns contain the factors to
            be rotated.</param>
            <returns>A matrix whose columns contain the rotated factors.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IFactorScores">
            <summary>
            Interface for factor score computation in a factor analysis.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IFactorScores.ComputeFactorScores(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Matrix.DoubleSymmetricMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Compute the factor scores in a factor analysis from the given data,
            covariance matrix and extracted factors.
            </summary>
            <param name="data">The data being analyzed.</param>
            <param name="covarianceMatrix">Covariance matrix of the data.</param>
            <param name="factorMatrix">Factors extracted during factor analysis of the data.</param>
            <returns></returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NoRotation">
            <summary>
            Used as a class type parameter value to factor analysis classes when no 
            factor rotation is desired.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NoRotation.#ctor">
            <summary>
            Construct a no rotation object.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NoRotation.Rotate(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            The rotate function. Does nothing.
            </summary>
            <param name="factors">The factors to rotate.</param>
            <returns>The factors, unchanged.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NoRotation.Clone">
            <summary>
            Clone functions. Returns a deep copy of self.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.GreaterThanMin">
            <summary>
            Class for storing a minimum value for eigenvalue comparison. The member
            function <code>NumberOfFactors</code> can be used as "number of factors"
            functor for the <code>PCFactorExtraction</code> factor analysis class.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GreaterThanMin.#ctor(System.Double)">
            <summary>
            Constructs a <code>GreaterThanMin</code> object with the given
            minimum value.
            </summary>
            <param name="min">The minimum value for eigenvalue comparison.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GreaterThanMin.NumberOfFactors(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Counts and returns the number values in the input eigenvalues vector 
            that are greater than the minimum value this object was constructed
            with.
            </summary>
            <param name="eigenvalues">Vector of eigenvalues from the factor extraction
            step in a factor analysis.</param>
            <param name="eigenvectors">Matrix whose columns contain the eigenvectors 
            from the factor extraction step in a factor analysis. This parameter is 
            not used.</param>
            <returns>Number of eigenvalues greater than the minimum value this object
            was constructed with.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GreaterThanMin.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FixedNumberOfFactors">
            <summary>
            Class for storing a fixed value for number of factors  The member
            function <code>NumberOfFactors</code> can be used as "number of factors"
            functor for the <code>PCFactorExtraction</code> factor analysis class.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FixedNumberOfFactors.#ctor(System.Int32)">
            <summary>
            Constructs a <code>FixedNumberOfFactors</code> object with the given
            fixed number.
            </summary>
            <param name="n">The fixed number.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FixedNumberOfFactors.NumberOfFactors(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Always returns the fixed number this object was constructed with.
            </summary>
            <param name="eigenvalues">Vector of eigenvalues from the factor extraction
            step in a factor analysis. This paramter is not used.</param>
            <param name="eigenvectors">Matrix whose columns contain the eigenvectors 
            from the factor extraction step in a factor analysis. This parameter is 
            not used.</param>
            <returns>The fixed number this object was constructed with.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FixedNumberOfFactors.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.GreaterThanFactorTimesMean">
            <summary>
            The member function <code>NumberOfFactors</code> can be used as "number of factors"
            functor for the <code>PCFactorExtraction</code> factor analysis class.
            This function counts the number of eigenvalues computed during the factor extraction
            step of a factor analysis whose value is greater than a given factor times the mean
            of the eigenvalues.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GreaterThanFactorTimesMean.NumberOfFactors(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Counts the number of eigenvalues computed during the factor extraction
            step of a factor analysis whose value is greater than a given factor times the mean
            of the eigenvalues.
            </summary>
            <param name="eigenvalues">Vector of eigenvalues from the factor extraction
            step in a factor analysis.</param>
            <param name="eigenvectors">Matrix whose columns contain the eigenvectors 
            from the factor extraction step in a factor analysis. This parameter is 
            not used.</param>
            <returns>The number of eigenvalues greater than the mean of the eigenvalues 
            times the factor this object was constructed with.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GreaterThanFactorTimesMean.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NumberOfFactors">
            <summary>
            The <code>NumberOfFactors</code> class contains static methods for creating
            function objects suitable for use as "number of factors" functors used in
            the factor extraction step of a factor analysis. These functions take as
            paramters the eigenvalues and eigenvectors values computed during factor
            extraction and return the number of factors to "keep". 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NumberOfFactors.SelectAll(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Creates a trivial functor for specifying "keep all the factors". Just returns the 
            number of eigenvalues/eigenvectors.
            </summary>
            <param name="eigenvalues">Vector of eigenvalues from the factor extraction
            step in a factor analysis.</param>
            <param name="eigenvectors">Matrix whose columns contain the eigenvectors 
            from the factor extraction step in a factor analysis.</param>
            <returns>Functor which returns number of eigenvalues/eigenvectors</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NumberOfFactors.EigenvaluesGreaterThan(System.Double)">
            <summary>
            Creates a functor which computes the number of eigenvalues greater than the
            specified minimum value.
            </summary>
            <param name="minimumEigenvalue">The minimum eigenvalue.</param>
            <returns>A functor which returns the the number of eigenvalues greater than
            <code>minimumEigenvalue</code>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NumberOfFactors.FixedNumber(System.Int32)">
            <summary>
            Creates a trivial functor which returns a fixed number for the number of 
            factors to retain in a factor analysis.
            </summary>
            <param name="n">The number of factors to retain.</param>
            <returns>A constant functor which always returns <code>n</code>
            when invoked.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NumberOfFactors.EigenvaluesGreaterThanMean(System.Double)">
            <summary>
            Creates a functor which computes the number of eigenvalues
            greater than a given factor times the mean
            of the eigenvalues.
            </summary>
            <param name="factor">The factor.</param>
            <returns>A functor which computes the number of eigenvalues
            greater than a given factor times the mean
            of the eigenvalues.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PCFactorExtraction">
            <summary>
            Class implementing the principle components (PC) algorithm for factor 
            extraction when performing factor analysis.
            Used as a class type parameter for the factor analysis classes.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PCFactorExtraction.CovarianceMatrix">
            <summary>
            Gets the covariance matrix whose eigenvalues are computed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PCFactorExtraction.Eigenvalues">
            <summary>
            Gets the eigenvalues of the covariance matris.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PCFactorExtraction.Eigenvectors">
            <summary>
            Gets the eigenvalues of the covariance matrix as columns in a matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PCFactorExtraction.ComponentMatrix">
            <summary>
            Gets the component matrix. This is a matrix whose columns are the
            eigenvectors of the covariance matrix scaled by the square root of
            their corresponding eigenvalues.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PCFactorExtraction.VarianceProportions">
            <summary>
            Gets a vector of proportion of variance explained by each factor. The
            ith entry corresoponds to the ith factor.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PCFactorExtraction.NumberOfFactorsToExtract">
            <summary>
            Gets the functor which returns the number of factors to retain 
            given the eigenvalues as its first argument and the eigenvectors
            as its second argument.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PCFactorExtraction.#ctor">
            <summary>
            Constructs a <code>PCFactorExtraction</code> object which will extract
            factors whose eigenvalues are greater than one.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PCFactorExtraction.#ctor(System.Func{CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleMatrix,System.Int32})">
            <summary>
            Constructs a <code>PCFactorExtraction</code> object using the given
            functor to determine the number of factors to extract. This function
            takes two argument: the first is the vector of eigenvalues of the
            covariance matrix, the second is a matrix whose columns contain the 
            corresponding eigenvectors of the covariance matrix.
            </summary>
            <param name="numFactors">Functor for determining the number of factors
            to extract.</param>
            <remarks>The class <code>CenterSpace.NMath.Stats.NumberOfFactors</code>
            provides several functors commonly used to determine the number
            of factors to extract.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PCFactorExtraction.ExtractFactors(CenterSpace.NMath.Matrix.DoubleSymmetricMatrix)">
            <summary>
            Uses the principle components algorithm for extracting factors from a 
            covariance matrix.
            </summary>
            <param name="covarianceMatrix">Covariance matrix.</param>
            <returns>Extracted factors as columns of a matrix.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PCFactorExtraction.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.RegressionFactorScores">
            <summary>
            Class implementing the <code>IFactorScores</code> interface for
            computing factor scores using the regression algorithm. The regression
            algorithm uses a least squares regression approach to predict factor
            scores.  Specifically this method 
            computes the solution X to the matrix equation
            RX = B, where
            R = covariance matrix,
            B = factor matrix,
            X = factor scores.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionFactorScores.CorrelationTolerance">
            <summary>
            Correlation tolerance. Values in the correlation matrix with magnitude
            less than this value will be considered zero in the regression 
            calculation. The defaule value is 1e-10.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionFactorScores.#ctor">
            <summary>
            Constructs a <code>RegressionFactorScores</code> instance with a defualt value
            of 1e-10 for the correlation tolerance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionFactorScores.#ctor(System.Double)">
            <summary>
            Constructs a <code>RegressionFactorScores</code> instance with
            the given correlation tolerance. Values in the correlation matrix
            with magnitude less than this value will considered zero by the
            regression algorithm.
            </summary>
            <param name="correlationTolerance">The correlation tolerance.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionFactorScores.ComputeFactorScores(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Matrix.DoubleSymmetricMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Computes the factor scores using the given data, the covariance matrix
            for the data, and the extracted factors. Specifically this method 
            computes and returns the solution X to the matrix equation
            RX = B,
            where
            R = covariance matrix,
            B = factor matrix.
            </summary>
            <param name="data">Case data being analyzed.</param>
            <param name="covarianceMatrix">The covariance matrix for the data.</param>
            <param name="factorMatrix">Matrix whose columns contian the extracted 
            factors.</param>
            <returns>The matrix of factor scores.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.VarimaxRotation">
            <summary>
            Class for computing the varimax rotation of the factor from a factor analysis.
            Rotates the coordinates to maximize the sum of the variances of the squared 
            loadings. Kaiser normalization is optionally performed, and the default stopping 
            tolerance (1e-12) is used.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.VarimaxRotation.Tolerance">
            <summary>
            Tolerance for convergence criteria. Iteration stops when the relative 
            change in the sum of the singular values is less than this number.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.VarimaxRotation.Normalize">
            <summary>
            Should Kaiser normalization be performed. If <code>true</code> the
            rows of the input matrix are re-scaled to unit length before rotation
            and scaled back afterwards.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.VarimaxRotation.Iterations">
            <summary>
            The number of iterations performed by the algorithm.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.VarimaxRotation.MaxIterations">
            <summary>
            The number of iterations performed by this algorithm will not
            exceed this number.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.VarimaxRotation.TransformationMatrix">
            <summary>
            The transformation, or roation, matrix used to perform the rotation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.VarimaxRotation.Converged">
            <summary>
            Returns <code>true</code> if the algorithm converged.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.VarimaxRotation.#ctor">
            <summary>
            Constructs a <code>VarimaxRotation</code> object with the following 
            defaults:
            <code>Tolerance</code> = 1e-12
            <code>Normalize</code> = true
            <code>MaxIterations</code> = 15,000
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.VarimaxRotation.Rotate(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Applies varimax rotation to the given matrix, whose columns contain 
            the components or factors, and returns the result.
            </summary>
            <param name="X">Component of factor matrix.</param>
            <returns>Matrix of rotated components.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.VarimaxRotation.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest">
            <summary>
            Class OneSampleAndersonDarlingTest performs a Anderson-Darling test of the distribution of
            one sample.
            </summary>
            <remarks>
            Class OneSampleAndersonDarlingTest compares the distribution of a given sample to normal distribution function
            (CDF). The alternative hypothesis that the data do not have
            a normal distribution.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.#ctor">
            <summary>
            Default constructor. Constructs an empty OneSampleAndersonDarlingTest instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.#ctor(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a OneSampleAndersonDarlingTest from the given sample data where
            the population mean and population standard deviation are unknown.
            </summary>
            <param name="data">The sample data.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling test cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Constructs a OneSampleAndersonDarlingTest from the given sample data where
            the population mean and population standard deviation are unknown.
            </summary>
            <param name="data">The sample data.</param>
            <param name="alpha">Threshold to reject null hypothesis.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling test cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.#ctor(System.Double[])">
            <summary>
            Constructs a OneSampleAndersonDarlingTest from the given sample data where
            the population mean and population standard deviation are unknown.
            </summary>
            <param name="data">The sample data.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling test cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.#ctor(System.Double[],System.Double)">
            <summary>
            Constructs a OneSampleAndersonDarlingTest from the given sample data where
            the population mean and population standard deviation are unknown.
            </summary>
            <param name="data">The sample data.</param>
            <param name="alpha">Threshold to reject null hypothesis.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling test cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.#ctor(System.Int32[])">
            <summary>
            Constructs a OneSampleAndersonDarlingTest from the given sample data where
            the population mean and population standard deviation are unknown.
            </summary>
            <param name="data">The sample data.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling test cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.#ctor(System.Int32[],System.Double)">
            <summary>
            Constructs a OneSampleAndersonDarlingTest from the given sample data where
            the population mean and population standard deviation are unknown.
            </summary>
            <param name="data">The sample data.</param>
            <param name="alpha">Threshold to reject null hypothesis.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling test cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.#ctor(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a OneSampleAndersonDarlingTest from the given sample data where
            the population mean and population standard deviation are unknown.
            </summary>
            <param name="data">The sample data.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling test cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,System.Double)">
            <summary>
            Constructs a OneSampleAndersonDarlingTest from the given sample data where
            the population mean and population standard deviation are unknown.
            </summary>
            <param name="data">The sample data.</param>
            <param name="alpha">Threshold to reject null hypothesis.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling test cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.N">
            <summary>
            Gets the sample size.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.IsGood">
            <summary>
            If the test statistic cannot be derived then IsGood is
            set to false.  Otherwise, IsGood is true.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Error">
            <summary>
            Error message if the Anderson-Darling test fails on the provided data
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected using the current 
            alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Statistic">
            <summary>
            Test statistic associated with this hypothesis
            test (A).
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.StatisticStar">
            <summary>
            Modified Anderson Darling statistic used to derive P (A*)
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Xbar">
            <summary>
            Sample mean.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.S">
            <summary>
             Sample standard deviation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.DefaultAlpha">
            <summary>
            Default alpha level
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Update(System.Int32[])">
            <summary>
            Updates this test with new sample data.
            </summary>
            <param name="data">The sample data.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Update(System.Double[])">
            <summary>
            Updates this test with new sample data.
            </summary>
            <param name="data">The sample data.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Update(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Updates this test with new sample data.
            </summary>
            <param name="data">The sample data.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Update(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Updates this test with the established parameters.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if Anderson-Darling cannot be performed on <c>data</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.Clone">
            <summary>
            Creates a deep copy of this OneSampleAndersonDarlingTest.
            </summary>
            <returns>A deep copy of this OneSampleAndersonDarlingTest.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleAndersonDarlingTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ShapiroWilkTest">
            <summary>
            Class ShapiroWilkTest tests the null hypothesis that the sample comes from a normally distributed population.
            </summary>
            <remarks>
            ShapiroWilkTest comes from Shapiro, S. S.; Wilk, M. B. (1965). "An analysis of variance test for normality (complete samples)". Biometrika 52 (3-4): 591–611.
            Implementation based on Royson R94.
            The sample data provided must be of size between 3 and 5000.  If the size becomes too large, then the test begins to 
            perform poorly.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ShapiroWilkTest.DEFAULT_ALPHA">
            <summary>
            Statistical signficance threshold
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.Clone">
            <summary>
            Creates a deep copy of this ShapiroWilkTest.
            </summary>
            <returns>A deep copy of this Shap.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.Type">
            <summary>
            Hypothesis type
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.Data">
            <summary>
            Data used to calculate the Shapiro Wilk test statistic.  The data is modified for calculation
            by removing NaNs and sorting.  
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of less than three or more than 5000 after removing missing values.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.N">
            <summary>
            Gets the sample size.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.NormalSWStatistic">
            <summary>
            Interim statistics for hypothesis acceptence
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.SWStatistic">
            <summary>
            Interim statistics for hypothesis acceptence
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.Statistic">
            <summary>
            Shapiro Wilk Test statistic, generally referred to as W
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.Reject">
            <summary>
            Returns <c>true</c> if the null hypothesis can be rejected, using the current 
            hypothesis type and alpha level; otherwise, <c>false</c>.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.Xbar">
            <summary>
            Sample mean
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.S">
            <summary>
            Gets the sample standard deviation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with the PearsonChiSquareTest.  Used
            to determine whether or not to reject the null hypothesis.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ShapiroWilkTest.DefaultType">
            <summary>
            Gets and sets the default alpha level associated with the PearsonChiSquareTest.  Used
            to determine whether or not to reject the null hypothesis.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample data, default alpha and 
            default hypothesis type.  
            </summary>
            <param name="data">sample</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, alpha and 
            default hypothesis type.
            </summary>
            <param name="data">sample data</param>
            <param name="alpha">significance level</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, provided 
            hypothesis type and default alpha.
            </summary>
            <param name="data">sample data</param>
            <param name="type">hypothesis type</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.HypothesisType,System.Double)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, alpha and 
            hypothesis type.
            </summary>
            <param name="data">sample data</param>
            <param name="type">hypothesis type</param>
            <param name="alpha">significance level</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(System.Double[])">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample data, default alpha and 
            default hypothesis type.  
            </summary>
            <param name="data">sample data</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(System.Double[],System.Double)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, alpha and 
            default hypothesis type.
            </summary>
            <param name="data">sample data</param>
            <param name="alpha">significance level</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(System.Double[],CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, provided 
            hypothesis type and default alpha.
            </summary>
            <param name="data">sample data</param>
            <param name="type">hypothesis type</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(System.Double[],CenterSpace.NMath.Stats.HypothesisType,System.Double)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, alpha and 
            hypothesis type.
            </summary>
            <param name="data">sample data</param>
            <param name="type">hypothesis type</param>
            <param name="alpha">significance level</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(System.Int32[])">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample data, default alpha and 
            default hypothesis type.  
            </summary>
            <param name="data">sample data</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(System.Int32[],System.Double)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, alpha and 
            default hypothesis type.
            </summary>
            <param name="data">sample data</param>
            <param name="alpha">significance level</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(System.Int32[],CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, provided 
            hypothesis type and default alpha.
            </summary>
            <param name="data">sample data</param>
            <param name="type">hypothesis type</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(System.Int32[],CenterSpace.NMath.Stats.HypothesisType,System.Double)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, alpha and 
            hypothesis type.
            </summary>
            <param name="data">sample data</param>
            <param name="type">hypothesis type</param>
            <param name="alpha">significance level</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample data, default alpha and 
            default hypothesis type.  
            </summary>
            <param name="data">sample data</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,System.Double)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, alpha and 
            default hypothesis type.
            </summary>
            <param name="data">sample data</param>
            <param name="alpha">significance level</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, provided 
            hypothesis type and default alpha.
            </summary>
            <param name="data">sample data</param>
            <param name="type">hypothesis type</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.HypothesisType,System.Double)">
            <summary>
            Constructs a ShapiroWilkTest intance with the provided sample, alpha and 
            hypothesis type.
            </summary>
            <param name="data">sample data</param>
            <param name="type">hypothesis type</param>
            <param name="alpha">significance level</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.Update(System.Double[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">sample</param>
            <remarks>
            The new test statistic, sample mean, sample standard deviation, and sample size
            are computed from the given data array. Missing values are ignored.
            The population mean is not changed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of less than three or more than 
            five thousand after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.Update(System.Int32[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">sample</param>
            <remarks>
            The new test statistic, sample mean, sample standard deviation, and sample size
            are computed from the given data array. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of less than three or more than 
            five thousand after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.Update(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">sample.</param>
            <remarks>
            The new test statistic, sample mean, sample standard deviation, and sample size
            are computed from the given data vector. Missing values are removed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of less than three or more than five 
            thousand after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.Update(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">sample</param>
            <remarks>
            The new sample mean, sample standard deviation, and sample size
            are computed from the given data column. Missing values are removed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of less than three or 
            more than five thousand after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ShapiroWilkTest.CalculateSWStatistic">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PearsonsChiSquareTest">
            <summary>
            Class PearsonsChiSquareTest tests whether the frequency distribution of experimental outcomes are 
            consistant with a particular theoretical distribution.
            </summary>
            <remarks>
            Pearson's chi-square test is the most well-known of chi-square tests which are statistical
            procedures whose results are evaluated by reference to the chi-square distribution.  It tests
            a null hypothesis stating that the frequency distribution of experimental outcomes are 
            consistant with a particular theoretical distribution.  The events outcomes considered must
            be mutually exclusive and have a total probability of 1.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.PearsonsChiSquareTest.DEFAULT_ALPHA">
            <summary>
            Statistical signficance threshold
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.PearsonsChiSquareTest.DEFAULT_DF">
            <summary>
            If there is no supplied degrees of freedom, assume that the experiment has
            only two possible outcomes
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.PearsonsChiSquareTest.DEFAULT_IS_YATES_CORRECTED">
            <summary>
            Default behavior for whether to use Yates correction to compute the chi square statistic is false
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Clone">
            <summary>
            Creates a deep copy of this OneSampleTTest.
            </summary>
            <returns>A deep copy of this OneSampleTTest.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Distribution">
            <summary>
            Gets the chi-square distribution for this set of experiment runs based on the degrees of 
            freedom in the experiment.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.ChiSquareStatistic">
            <summary>
            Gets the chi-square statistic, or the sum of all chi-square values across all expr outcomes.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.N">
            <summary>
            Gets the sample size.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.IsYatesCorrected">
            <summary>
            Returns <c>true</c> is the calcuation of the chi-square statistic for 2 × 2 contingency tables uses
            Yates correction; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Reject">
            <summary>
            Returns <c>true</c> if the null hypothesis can be rejected, using the current 
            hypothesis type and alpha level; otherwise, <c>false</c>.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with the PearsonChiSquareTest.  Used
            to determine whether or not to reject the null hypothesis.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.DefaultDF">
            <summary>
            The default degrees of freedom.  If degrees of freedom are not supplied, then assume
            that each experiment has 1 degree of freedom, or only two possible outcomes.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PearsonsChiSquareTest.DefaultIsYatesCorrected">
            <summary>
            Default behavior for computing the Chi-square statistic is to not use Yates correction for 
            2 × 2 contingency tables.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor">
            <summary>
            Default constructor.  Constructs a PearsonsChiSquareTest instance with the
            default degrees of freedom and default alpha.  
            </summary>
            <remarks>
            The chi square statistic must be calculated or supplied before meaningful
            p values can be calculated.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor(System.Int32[],CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a PearsonsChiSquareTest using empirical data tracking the outcomes of a series of 
            experiment runs along with the expected frequencies of outcomes for any one particular
            experiment run.
            </summary>
            <param name="outcomes">Array of counts for each independent outcome possible for the experiment.
            For example the outcomes of rolling a fair die 100 times might yield the array {17,23,15,14,16,15}</param>
            <param name="probabilities">Array of expected counts of each independent outcome for a single 
            experiment run.  The sum of this array must equal 1.  For example an experiment 
            consisting of rolling a fair die 
            would yeild the array {1/6,1/6,1/6,1/6,1/6,1/6}</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor(System.Int32[],CenterSpace.NMath.Core.DoubleVector,System.Double)">
             <summary>
            Constructs a PearsonsChiSquareTest using empirical data tracking the outcomes of a series of 
             experiment runs along with the expected frequencies of outcomes for any one particular
             experiment run.
             </summary>
             <param name="outcomes">Array of counts for each independent outcome possible for the experiment.
             For example the outcomes of rolling a fair die 100 times might yield the array {17,23,15,14,16,15}</param>
             <param name="probabilities">Array of expected counts of each independent outcome for a single 
             experiment run.  The sum of this array must equal 1.  For example, rolling a fair die 
             would yeild the array {1/6,1/6,1/6,1/6,1/6,1/6}</param>
             <param name="alpha">Statistical significance threshold</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor(System.Double)">
            <summary>
            Constructs a PearsonsChiSquareTest from the given value of the test statistic.
            </summary>
            <remarks>
            Determine the goodness of fit of a chi-square statistic and assume that the degrees of freedom
            is one, meaning that each experiment run has but two possible outcomes.
            </remarks>
            <param name="chiSquareStatistic">The chi-square test statistic.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a PearsonsChiSquareTest from the given value of the test statistic.
            </summary>
            <remarks>
            Perform a chi-square test in which the chi-square statistic has already been calculated.  Use 
            the default alpha to determine hypothesis accept/reject.
            </remarks>
            <param name="chiSquareStatistic">The chi-square test statistic.</param>
            <param name="df">The degrees of freedom.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a PearsonsChiSquareTest from the given value of the test statistic.
            </summary>
            <remarks>
            Perform a chi-square test in which the chi-square statistic has already been calculated.  
            </remarks>
            <param name="chiSquareStatistic">The chi-square test statistic.</param>
            <param name="df">The degrees of freedom.</param>
            <param name="alpha">Statistical significance threshold.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor(System.Int32[0:,0:],System.Double,System.Boolean)">
             <summary>
             Test of independence.  Asseses whether paired observations on two variables provided in the form of 
             a contingency table are independent.
            
             </summary>
             <param name="contingencyTable"> Contingency table is the matrix used for 
             a test of independence of variable i and j.
             
             Example: Variables i is sex (M, F) and variable j handedness (left, right).  100
             people are sampled randomly to yield the table:
             
             handedness    R   L    
             row 0: M      43   9   
             row 1: F      44   4    </param>
             <param name="alpha">Criteria for statistical significance</param>
             <param name="isYatesCorrected">Use Yates correction for a 2 × 2 contingency tables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor(System.Int32[0:,0:],System.Double)">
            <summary>
            Test of independence. Asseses whether paired observations on two variables provided in the form of 
            a contingency table are independent.
            </summary>
            <param name="contingencyTable"> Contingency table is the matrix used for 
            a test of independence of variable i and j.
            <code>
            Example: Variables i is sex (M, F) and variable j handedness (left, right).  100
            people are sampled randomly to yield the table:
            
            handedness    R   L    
            row 0: M      43   9   
            row 1: F      44   4
            </code>
            </param>
            <param name="alpha">Criteria for statistical significance</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor(System.Int32[0:,0:],System.Boolean)">
            <summary>
            Test of independence.  Asseses whether paired observations on two variables provided in the form of 
            a contingency table are independent.  Use the default alpha to determine accept/reject. 
            </summary>
            <param name="contingencyTable"> Contingency table is the matrix used for 
            a test of independence of variable i and j.
            <code>
            Example: Variables i is sex (M, F) and variable j handedness (left, right).  100
            people are sampled randomly to yield the table:
            
            handedness    R   L    
            row 0: M      43   9   
            row 1: F      44   4
            </code></param>
            <param name="isYatesCorrected">Use Yates correction for 2 × 2 contingency tables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.#ctor(System.Int32[0:,0:])">
            <summary>
            Test of independence.  Asseses whether paired observations on two variables provided in the form of 
            a contingency table are independent.  Use the default alpha to determine accept/reject. 
            </summary>
            <param name="contingencyTable"> Contingency table is the matrix used for 
            a test of independence of variable i and j.
            <code>
            Example: Variables i is sex (M, F) and variable j handedness (left, right).  100
            people are sampled randomly to yield the table:
            
            handedness    R   L    
            row 0: M      43   9   
            row 1: F      44   4
            </code></param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Update(System.Int32[],CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Perform a chi-square test using empirical data tracking the outcomes of a series of 
            experiment runs along with the expected frequencies of outcomes for any one particular
            experiment run.
            </summary>
            <param name="outcomes">Array of counts for each independent outcome possible for the experiment.
            For example the outcomes of rolling a fair die 100 times might yield the array {17,23,15,14,16,15}</param>
            <param name="probabilities">Array of expected counts of each independent outcome for a single 
            experiment run.  The sum of this array must equal 1.  For example, rolling a fair die 
            would yeild the array {1/6,1/6,1/6,1/6,1/6,1/6}</param>
            <param name="alpha">Statistical significance threshold</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Update(System.Int32[],CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Perform a chi-square test using empirical data tracking the outcomes of a series of 
            experiment runs along with the expected frequencies of outcomes for any one particular
            experiment run.
            </summary>
            <param name="outcomes">Array of counts for each independent outcome possible for the experiment.
            For example the outcomes of rolling a fair die 100 times might yield the array {17,23,15,14,16,15}</param>
            <param name="probabilities">Array of expected counts of each independent outcome for a single 
            experiment run.  The sum of this array must equal 1.  For example, rolling a fair die 
            would yeild the array {1/6,1/6,1/6,1/6,1/6,1/6}</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Update(System.Double)">
            <summary>
            Update the test with an externally derived chi-square statistic.
            </summary>
            <param name="chiSquareStatistic">chi-square statistic</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Update(System.Double,System.Double)">
            <summary>
            Update the test with an externally derived chi-square statistic and the degrees of freedom
            </summary>
            <param name="chiSquareStatistic">chi-square statistic</param>
            <param name="d">degrees of freedom</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Update(System.Double,System.Double,System.Double)">
            <summary>
            Update the test with an externally derived chi-square statistic, the degrees of freedom and
            the alpha value
            </summary>
            <param name="chiSquareStatistic">chi-square statistic</param>
            <param name="d">degrees of freedom</param>
            <param name="alpha">alpha value</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Update(System.Int32[0:,0:],System.Double,System.Boolean)">
            <summary>
            Update contigency table for the test of independence between two variables.
            </summary>
            <param name="contingencyTable"></param>
            <param name="alpha">alpha value</param>
            <param name="isYatesCorrected">Use Yates correction for 2 × 2 contingency tables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Update(System.Int32[0:,0:],System.Boolean)">
            <summary>
            Update contigency table for the test of independence between two variables.
            </summary>
            <param name="contingencyTable"></param>
            <param name="isYatesCorrected">Use Yates correction for 2 × 2 contingency tables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Update(System.Int32[0:,0:],System.Double)">
            <summary>
            Update contigency table for the test of independence between two variables.
            </summary>
            <param name="contingencyTable"></param>
            <param name="alpha">alpha value</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.Update(System.Int32[0:,0:])">
            <summary>
            Update contigency table for the test of independence between two variables.
            </summary>
            <param name="contingencyTable"></param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.calculateExprRuns(System.Int32[])">
            <summary>
            Count how many times the experiment has been run by summing all experiment outcomes
            8</summary>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.calculateChiSquaredStatistic(System.Int32[],CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Calculate the chi-square statistic for the entire experiment empirically for goodness of fit by calculating 
            the chi-square statistic for each possible outcome of the experiment and then summing
            these statistics.
            </summary>
            <param name="calculateExprRuns">Should the number of expr runs be calculated?  Default is true.</param>
            <param name="exprOutcomeCounts">Array of counts for each independent outcome possible for the experiment.
            For example the outcomes of rolling a fair die 100 times might yield the array {17,23,15,14,16,15}</param>
            <param name="exprOutcomeProbabilities">Array of expected counts of each independent outcome for a single 
            experiment run.  The sum of this array must equal 1.  For example, rolling a fair die 
            would yeild the array {1/6,1/6,1/6,1/6,1/6,1/6}</param> 
            <returns>The chi-square statistic for this experiment</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.calculateChanceProbability">
            <summary>
            Calculate the probability that this test occurs
            </summary>
            <returns>pstat - the probability of obtaining a test statistic at least as extreme as the observed test statistic</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PearsonsChiSquareTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.BoxCox">
            <summary>
            Class for computing the Box-Cox power tranformations defined for a set of data
            points, {yi}, and parameter value lambda by
            <c>yi(lambda) = (yi^lambda - 1)/lambda</c>.
            In addition methods for computing the corresponding log-likelihood function and
            the value of lambda which maximizes it are provided.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.BoxCox.LAMBDA_EPSILON">
            <summary>
            Default value for lambdaEpsilon. Values for lambda less than lambdaEpsilon
            are considered to be zero.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.BoxCox.LAMBDA_INTERVAL">
            <summary>
            The default interval to search for a value of lambda maximizing the 
            log-likelihood functions. The default interval is [-5, 5].
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoxCox.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.Interval)">
            <summary>
            Constructs a <c>BoxCox</c> object for the given data. A value for
            lambda which maximizes the log-likelihood function for the given
            interval for lambda is computed.
            </summary>
            <param name="data">The data. Must contain all positive values.</param>
            <param name="lambdaInterval">The interval to search for a value of
            lambda which maximizes the log-likelihood function.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if not all data
            values are positive.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoxCox.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.Interval,System.Double,System.Double)">
            <summary>
            Constructs a <c>BoxCox</c> object for the given data. A value for
            lambda which maximizes the log-likelihood function for the given
            interval for lambda is computed. This maximum value is found by 
            manually searching the lambda values lambdaInterval.Min + k*stepSize,
            k = 0, 1, 2,... and selecting the one which yields the maximum value
            for the log-likelihood function.
            </summary>
            <param name="data">The data. Must contain all positive values.</param>
            <param name="lambdaInterval">The interval to search for the optimal
            lambda values.</param>
            <param name="stepSize">Lambda values searched are of the form
            lambdaInterval.Min + k*setpSize.</param>
            <param name="epsilon">Lambda values less than <c>epsilon</c> will
            be considered to be zero.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if not all data
            values are positive.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoxCox.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a <c>BoxCox</c> object for the given data. A value for
            lambda which maximizes the log-likelihood function for the given
            interval for lambda is computed. This maximum value is found by 
            manually searching the lambda values minLambda + k*stepSize,
            k = 0, 1, 2,... and selecting the one which yields the maximum value
            for the log-likelihood function.
            </summary>
            <param name="data">The data. Must contain all positive values.</param>
            <param name="minLambda">The left endpoint of the search interval
            for lambda.</param>
            <param name="maxLambda">The right endpoint of the search interval
            for lambda.</param>
            <param name="stepSize">Lambda values searched are of the form
            lambdaInterval.Min + k*setpSize.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if not all data
            values are positive.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoxCox.#ctor(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a <c>BoxCox</c> object for the given data, finding a value
            of lambda which maximizes the log-likelihood function over the lambda
            interval <c>LAMBDA_EPSILON</c>.
            </summary>
            <param name="data">The data. Must contain all positive values.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if not all data
            values are positive.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoxCox.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.Interval,System.Double)">
            <summary>
            Constructs a <c>BoxCox</c> object for the given data. A value for
            lambda which maximizes the log-likelihood function for the given
            interval for lambda is computed.
            </summary>
            <param name="data">The data. Must contain all positive values.</param>
            <param name="lambdaInterval">The interval to search for a value of
            lambda which maximizes the log-likelihood function.</param>
            <param name="lambdaEpsilon">Lambda values less than <c>lambdaEpsilon</c> 
            are considered equal to zero.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if not all data
            values are positive.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BoxCox.Lambda">
            <summary>
            Gets the value of lambda which maximizes the log-likelihood function
            for the data and lambda interval.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BoxCox.LambdaEpsilon">
            <summary>
            Lambda values less than <c>LambdaEpsilon</c> were considered equal
            to zero.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BoxCox.TransformedData">
            <summary>
            The data transformed by the Box Cox transformation
            <c>yi(lambda) = (yi^lambda - 1)/lambda</c> 
            where <c>lambda</c> is the value of lambda the
            minimized the log-likelihood function of the sprecified
            search interval <c>LambdaInterval</c>.
            </summary>
            <remarks>The above mentioned lambda value is contained in the
            <c>Lambda</c> property.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BoxCox.LambdaInterval">
            <summary>
            The interval that was searched for the lambda value that
            maximized the log-likelihood function.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoxCox.LogLikelihood(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Calculates the Box Cox log-likelihood function for the given data and
            and lambda value.
            </summary>
            <param name="data">The data. Must contain positve values.</param>
            <param name="lambda">Lambda value.</param>
            <returns>The log-likelihood function value for the given data and
            lambda value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if not all data
            values are positive.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoxCox.LogLikelihood(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double)">
            <summary>
            Calculates the Box Cox log-likelihood function for the given data and
            and lambda value.
            </summary>
            <param name="data">The data. Must contain positive values.</param>
            <param name="lambda">Lambda value.</param>
            <param name="lambdaEpsilon">Values less than <c>lambdaEpsilon</c> are
            considered equal to zero.</param>
            <returns>The log-likelihood function value for the given data and
            lambda value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if not all data
            values are positive.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoxCox.Transform(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double)">
            <summary>
            Performs the Box Cox transformation
            <c>transformed data[i] = (data[i]^lambda - 1)/lambda</c>.
            </summary>
            <param name="data">The data. Must contain positive values.</param>
            <param name="lambda">Lambda.</param>
            <param name="epsilon">Values of lambda less than <c>epsilon</c>
            are considered equal to zero.</param>
            <returns>Vector containg the transformed data.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if not all data
            values are positive.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoxCox.Transform(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Performs the Box Cox transformation
            <c>transformed data[i] = (data[i]^lambda - 1)/lambda</c>.
            </summary>
            <param name="data">The data. Must contain positive values.</param>
            <param name="lambda">Lambda.</param>
            <returns>Vector containg the transformed data.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if not all data
            values are positive.</exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.KMeansClustering">
            <summary>
            Class KMeansClustering performs k-means clustering on a set of data points.
            </summary>
            <remarks>
            The k-means method assigns points into <c>k</c> groups such that the sum of
            squares from points to the computed cluster centers is minimized.
            <br/>
            The algorithm
            used by class KMeansClustering is that of Hartigan and Wong (A K-means clustering
            algorithm. Applied Statistics 28, 100–108. 1979). The algorithm is iterative: For
            each point, move it to another cluster if that would lower the energy. If you move
            a point, immediately update the cluster centers of the two affected clusters.
            Repeat until no points are moved, or the specified maximum number of iterations
            is reached. 
            <br/>
            Instances of class KMeansClustering are constructed from a matrix of
            data, where each row in the matrix represents an object to be clustered.
            </remarks>
            <example><code>
            // cluster 8 random vectors of length 3
            DoubleMatrix data = new DoubleMatrix( 8, 3, new RandGenUniform() );
            KMeansClustering cl = new KMeansClustering( data );
            
            // create 3 clusters, using random starting cluster centers
            ClusterSet clusters = cl.Cluster( 3 );
            </code></example>
        </member>
        <member name="T:CenterSpace.NMath.Stats.KMeansClustering.Start">
            <summary>
            An enumeration representing methods used to choose the initial cluster centers. 
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.Start.Random">
            <summary>
            Select a random set of distinct rows in the data matrix as the initial centers.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.Start.QuickCluster">
            <summary>
            Similar to the SPSS QuickCluster function. See <c>StatsFunctions.InitialCenters()</c> for more information.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.data_">
            <summary>
            A matrix of data. Each row in the matrix represents an object to be clustered.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.initialCenters_">
            <summary>
            A matrix of initial cluster centers.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.finalCenters_">
            <summary>
            A matrix of final cluster centers.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.clusters_">
            <summary>The cluster assigments.</summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.withinss_">
            <summary>
            The within-cluster sum of squares for each cluster.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.sizes_">
            <summary>
            The number of objects in each cluster.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.iter_">
            <summary>The number of iterations performed.</summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.max_">
            <summary>The maximum number of iterations.</summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KMeansClustering.DEFAULT_MAX_ITER">
            <summary>The default maximum number of iterations.</summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Constructs a KMeansClustering instance from the given data and the 
            specified maximum number of iterations.
            </summary>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object to be clustered.
            </param>
            <param name="maxIterations">The maximum number of iterations.</param>
            <remarks>
            Iteration stops when either the clustering stabilizes, or the maximum number
            of iterations is reached.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a KMeansClustering instance from the given data.
            </summary>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object to be clustered.
            </param>
            <remarks>
            The default maximum number of iterations is used. Iteration stops when either the
            clustering stabilizes, or the maximum number of iterations is reached.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32)">
            <summary>
            Constructs a KMeansClustering instance from the given data and the 
            specified maximum number of iterations.
            </summary>
            <param name="data">
            A data frame containing the data. Each row represents an object to be clustered.
            Non-numeric columns are ignored.
            </param>
            <param name="maxIterations">The maximum number of iterations.</param>
            <remarks>
            Iteration stops when either the clustering stabilizes, or the maximum number
            of iterations is reached.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.#ctor(CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Constructs a KMeansClustering instance from the given data.
            </summary>
            <param name="data">
            A data frame containing the data. Each row represents an object to be clustered.
            Non-numeric columns are ignored.
            </param>
            <remarks>
            The default maximum number of iterations is used. Iteration stops when either the
            clustering stabilizes, or the maximum number of iterations is reached.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.#ctor">
            <summary>
            Constructs an empty KMeansClustering instance.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.DefaultMaxIterations">
            <summary>
            Gets and sets the default maximum number of iterations.
            </summary>
            <remarks>
            Initially set to <c>1000</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.Data">
            <summary>
            Gets and sets the data matrix.
            </summary>
            <remarks>
            Each row represents an object to be clustered.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.N">
            <summary>
            Gets the number of objects in <c>this.Data</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.K">
            <summary>
            Gets the number of clusters computed during the last clustering..
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.InitialCenters">
            <summary>
            Gets the matrix of initial cluster centers used during the last clustering.
            </summary>
            <remarks>
            Each row represents a cluster center.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.FinalCenters">
            <summary>
            Gets the matrix of final cluster centers computed during the last clustering.
            </summary>
            <remarks>
            Each row represents a cluster center.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.Clusters">
            <summary>
            Gets the cluster assignments computed during the last clustering.
            </summary>
            <returns>
            An integer array that identifies the cluster into which each
            object was grouped. Cluster numbers are arbitrary, and zero-based.
            </returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.WithinSumOfSquares">
            <summary>
            Gets the within-cluster sum of squares for each cluster computed during the last clustering.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.Sizes">
            <summary>
            Gets the number of points in each cluster computed during the last clustering.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.MaxIterations">
            <summary>
            Gets and sets the maximum number of iterations used in clustering.
            </summary>
            <remarks>
            Iteration stops when either clustering stabilizes, or the maximum number
            of iterations is reached.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.Iterations">
            <summary>
            Gets the number of iterations used in the clustering just computed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KMeansClustering.MaxIterationsMet">
            <summary>
            Returns <c>true</c> if the clustering just computed stopped because the
            maximum number of iterations was reached; otherwise, <c>false</c>.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>this.Iterations == this.MaxIterations</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.Clone">
            <summary>
            Creates a deep copy of this cluster analysis.
            </summary>
            <returns>A deep copy of this cluster analysis.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.Cluster(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Clusters the data into the specified number of clusters.
            </summary>
            <param name="centers">A matrix of initial cluster centers. K is
            inferred from the number of rows in the matrix.
            </param>
            <returns>
            A ClusterSet that identifies the cluster into which each
            object was grouped. Cluster numbers are based on row indices in
            <c>this.Data</c> and <c>this.Centers</c>.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the number of cluster centers is less than one or greater than the number
            of data points (<c>this.N</c>), or if the dimensionality of the centers is
            not equal to the dimensionality of the data points.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">
            Thrown if an empty cluster is encountered. Re-cluster with different starting centers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.Cluster(System.Int32)">
            <summary>
            Clusters the data into the specified number of clusters.
            </summary>
            <param name="k">The number of clusters to form.</param>
            <returns>
            A ClusterSet that identifies the cluster into which each
            object was grouped. Cluster numbers are based on row indices in
            <c>this.Data</c> and <c>this.Centers</c>.
            </returns>
            <remarks>
            A random set of distinct rows in <c>this.Data</c> are chosen as the initial centers.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>k</c> is less than one or greater than the number of objects (<c>this.N</c>).
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">
            Thrown if an empty cluster is encountered. Re-cluster with different starting centers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.Cluster(System.Int32,CenterSpace.NMath.Core.RandGenMTwist)">
            <summary>
            Clusters the data into the specified number of clusters.
            </summary>
            <param name="k">The number of clusters to form.</param>
            <param name="rnd">Random number generator.</param>
            <returns>
            A ClusterSet that identifies the cluster into which each
            object was grouped. Cluster numbers are based on row indices in
            <c>this.Data</c> and <c>this.Centers</c>.
            </returns>
            <remarks>
            A random set of distinct rows in <c>this.Data</c> are chosen as the initial centers.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>k</c> is less than one or greater than the number of objects (<c>this.N</c>).
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">
            Thrown if an empty cluster is encountered. Re-cluster with different starting centers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KMeansClustering.Cluster(System.Int32,CenterSpace.NMath.Stats.KMeansClustering.Start)">
            <summary>
            Clusters the data into the specified number of clusters, using the specified method of 
            choosing the initial cluster centers.
            </summary>
            <param name="k">The number of clusters to form.</param>
            <param name="start">The method to use for choosing the initial cluster centers.</param>
            <returns>
            A ClusterSet that identifies the cluster into which each
            object was grouped. Cluster numbers are based on row indices in
            <c>this.Data</c> and <c>this.Centers</c>.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>k</c> is less than one or greater than the number of objects (<c>this.N</c>).
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">
            Thrown if an empty cluster is encountered. Re-cluster with different starting centers.
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.JohnsonDistribution">
            <summary>
            Class JohnsonDistribution represents the Johnson system of distributions.
            </summary>
            <remarks>
            The Johnson system is:
            <code>z = gamma + delta * log(f(u)), where u = (x - xi) / lambda</code>
            where the transformation f() has four possible forms based on the distribution
            type:
            <code>
            Normal (SN): f(u) = exp(u)
            Log Normal (SL): f(u) = u
            Unbounded (SU):	f(u) = u + sqrt(1+u^2)
            Bounded (SB):	f(u) = u/(1-u)
            </code>
            Use the Fit() method to fit a JohnsonDistribution to data, and the Transform() method
            to transform data using a distribution object.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.JohnsonDistribution.#ctor">
            <summary>
            Default constructor. Constructs a JohnsonDistribution instance 
            with default shape and location parameters and transformation type.
            </summary>
            <remarks>
            The default parameter values are: gamma = 0.0, delta = 1.0, xi = 0.0, lambda = 1.0. The default
            transformation type is the identity transformation (SN).
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.JohnsonDistribution.#ctor(System.Double,System.Double,System.Double,System.Double,CenterSpace.NMath.Core.JohnsonTransformationType)">
            <summary>
            Constructs a JohnsonDistribution instance with the given parameters and
            transformation type.
            </summary>
            <param name="gamma">The gamma parameter of the Johnson distribution.</param>
            <param name="delta">The delta parameter of the Johnson distribution.</param>
            <param name="xi">The xi parameter of the Johnson distribution.</param>
            <param name="lambda">The lambda parameter of the Johnson distribution.</param>
            <param name="type">The transformation type of the Johnson distribution.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.JohnsonDistribution.Gamma">
            <summary>
            Gets and sets the gamma parameter of the Johnson distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.JohnsonDistribution.Delta">
            <summary>
            Gets and sets the delta parameter of the Johnson distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.JohnsonDistribution.Xi">
            <summary>
            Gets and sets the xi parameter of the Johnson distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.JohnsonDistribution.Lambda">
            <summary>
            Gets and sets the lambda parameter of the Johnson distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.JohnsonDistribution.Type">
            <summary>
            Gets and sets the transformation type of the Johnson distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.JohnsonDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.JohnsonDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <remarks>The variance of the distribution is the standard deviation squared.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.JohnsonDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.JohnsonDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.JohnsonDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.JohnsonDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.JohnsonDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated at a given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If <c>p</c> is greater than 1 or less than zero, returns <c>Double.NaN</c>
            (Not a Number)
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.JohnsonDistribution.Transform(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Transforms the given data using this Johnson Distribution.
            </summary>
            <remarks>
            The Johnson system is:
            <code>z = gamma + delta * log(f(u)), where u = (x - xi) / lambda</code>
            where the transformation f() has four possible forms based on the distribution
            type:
            <code>
            Normal (SN): f(u) = exp(u)
            Log Normal (SL): f(u) = u
            Unbounded (SU):	f(u) = u + sqrt(1+u^2)
            Bounded (SB):	f(u) = u/(1-u)
            </code>
            </remarks>
            <param name="data">A vector of data.</param>
            <returns>A new vector containing the transformed data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.JohnsonDistribution.Clone">
            <summary>
            Creates a deep copy of this JohnsonDistribution.
            </summary>
            <returns>A deep copy of this JohnsonDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.JohnsonDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.JohnsonDistribution.Fit(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Fits a Johnson distribution to the given data.    
            </summary>
            <param name="data">A vector of data</param>
            <returns>A JohnsonDistribution object with the estimate parameters.</returns>
            <remarks>
            Estimation of the Johnson parameters is done from quantiles that correspond to
            the cumulative probabilities [0.05, 0.206, 0.5, 0.794, 0.95]. The method used
            is that of Wheeler, R.E. (1980). Quantile estimators of Johnson curve parameters.
            Biometrika. 67-3 725-728.
            </remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest">
            <summary>
            Class TwoSampleUnpairedUnequalTTest tests the null hypothesis that the two population
            means corresponding to two random samples are equal.
            </summary>
            <remarks>
            The two samples are assumed to be independent of each other. (For dependent,
            or paired, samples, see class TwoSamplePairedTTest.) The samples may come from
            populations with unequal variances, and the Welch-Satterthwaite approximation
            to the degrees of freedom is used. Unlike TwoSampleUnpairedTTest, a pooled
            estimate of the variance is not used.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor">
            <summary>
            Default constructor. Constructs a TwoSampleUnpairedUnequalTTest instance with default
            sample parameters, alpha level, and hypothesis type.
            </summary>
            <remarks>
            Constructs a TwoSampleUnpairedUnequalTTest instance with a sample means of 0.0, sample
            standard deviations of 1.0, and sample sizes of 2.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance with the given sample parameters.
            </summary>
            <param name="xbar1">The mean of the first sample.</param>
            <param name="s1">The standard deviation of the first sample.</param>
            <param name="n1">The size of the first sample.</param>
            <param name="xbar2">The mean of the second sample.</param>
            <param name="s2">The standard deviation of the second sample.</param>
            <param name="n2">The size of the second sample.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance with the given sample and
            and hypothesis parameters.
            </summary>
            <param name="xbar1">The mean of the first sample.</param>
            <param name="s1">The standard deviation of the first sample.</param>
            <param name="n1">The size of the first sample.</param>
            <param name="xbar2">The mean of the second sample.</param>
            <param name="s2">The standard deviation of the second sample.</param>
            <param name="n2">The size of the second sample.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance using the given vectors of sample data.
            </summary>
            <param name="data1">A vector of observed values for the first sample.</param>
            <param name="data2">A vector of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given vectors. Missing values are ignored. 
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance using the given vectors of sample data, and
            the given hypothesis parameters.
            </summary>
            <param name="data1">A vector of observed values for the first sample.</param>
            <param name="data2">A vector of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given vectors. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance using the given arrays of sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(System.Double[],System.Double[],System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance using the given arrays of sample data, 
            and the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance using the given arrays of sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays.  
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(System.Int32[],System.Int32[],System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance using the given arrays of sample data, 
            and the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance using the given columns of sample data.
            </summary>
            <param name="data1">A column of observed values for the first sample.</param>
            <param name="data2">A column of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given columns. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> is not numeric or has length of zero after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedUnequalTTest instance using the given columns of sample data, and
            the given hypothesis parameters.
            </summary>
            <param name="data1">A column of observed values for the first sample.</param>
            <param name="data2">A column of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given columns. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> is not numeric or has length of zero after
            removing missing values.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Distribution">
            <summary>
            Gets the distribution of the test statistic associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom.
            </summary>
            <remarks>Approximated using the Welch-Satterthwaite equation.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Type">
            <summary>
            Gets and sets the form of the alternative hypothesis associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Xbar1">
            <summary>
            Gets the mean of the first sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.S1">
            <summary>
            Gets the standard deviation of the first sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.N1">
            <summary>
            Gets the size of the first sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Xbar2">
            <summary>
            Gets the mean of the second sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.S2">
            <summary>
            Gets the standard deviation of the second sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.N2">
            <summary>
            Gets the size of the second sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Statistic">
            <summary>
            Gets the value of the test statistic associated with this hypothesis
            test.
            </summary>
            <remarks><code>
            t = ( Xbar1 - Xbar2 ) / SEM
            </code></remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.SEM">
            <summary>
            Gets the standard error of the mean.
            </summary>
            <remarks><code>
            SEM = sqrt( S1^2/N1 + S2^2/N2 )
            </code></remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.LeftCriticalValue">
            <summary>
            Gets the left critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.RightCriticalValue">
            <summary>
            Gets the right critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.LowerConfidenceLimit">
            <summary>
            Gets the 1 - alpha lower confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.NegativeInfinity</c> for one-sided tests to the left.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.UpperConfidenceLimit">
            <summary>
            Gets the 1 - alpha upper confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.PositiveInfinity</c> for one-sided tests to the right.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.LeftProbability">
            <summary>
            Gets the area under the probability distribution to the left of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.RightProbability">
            <summary>
            Gets the area under the probability distribution to the right of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
            <remarks>
            Returns LeftProbability for one-sided tests to the left, 
            RightProbability for one-sided tests to the right, and twice
            the smaller of LeftProbability and RightProbability for two-sided
            tests.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected, using the current 
            hypothesis type and alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with TwoSampleUnpairedUnequalTTests.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.DefaultType">
            <summary>
            Gets and sets the default form of the alternative hypothesis associated with
            TwoSampleUnpairedUnequalTTests.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Update(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Updates the test statistic with new sample parameters.
            </summary>
            <param name="xbar1">The mean of the first sample.</param>
            <param name="s1">The standard deviation of the first sample.</param>
            <param name="n1">The size of the first sample.</param>
            <param name="xbar2">The mean of the second sample.</param>
            <param name="s2">The standard deviation of the second sample.</param>
            <param name="n2">The size of the second sample.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Update(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A vector of observed values for the first sample.</param>
            <param name="data2">A vector of observed values for the second sample.</param>
            <remarks>
            The new sample means, sample standard deviations, and sample sizes
            are computed from the given data vectors. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Update(System.Double[],System.Double[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The new sample means, sample standard deviations, and sample sizes
            are computed from the given data arrays. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Update(System.Int32[],System.Int32[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The new sample means, sample standard deviations, and sample sizes
            are computed from the given data arrays. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Update(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A column of observed values for the first sample.</param>
            <param name="data2">A column of observed values for the second sample.</param>
            <remarks>
            The new sample means, sample standard deviations, and sample sizes
            are computed from the given data columns. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> is not numeric or has length of zero after
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.Clone">
            <summary>
            Creates a deep copy of this TwoSampleUnpairedUnequalTTest.
            </summary>
            <returns>A deep copy of this TwoSampleUnpairedUnequalTTest.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedUnequalTTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.InputVariableCorrelator">
            <summary>
            Instances of the InputVariableCorrelator class are used to induce
            a desired rank correlation among input variables. 
            </summary>
            <remarks>
            Consider two sequences of random numbers {ai} and {bi}, i = 1, 2,...,N
            which may follow any probablility distributions.
            For example the {ai} may be a sequence of normally distributed random numbers
            while {bi} might be a sequence of random numbers following a beta distribution.
            In general these sequences will be uncorrelated, especially if they come from
            pseudo random number generators.
            Suppose that you are running a simulation on an economic model that works
            with mortgage backed security prices and U.S. Treasury bond prices as inputs.
            Since these two prices are highly correlated, two sequences of uncorrelated
            inputs would not be appropriate. 
            
            The purpose of the InputVariableCorrelator class is to produce sequences of
            correlated inputs. The correlated inputs retain the same marginal distributions
            as the original inputs and will have a Spearmans rank correlation matrix 
            approximately equal to one specified by the user.
            
            Reference for the algorithm used -
            Iman, Ronald L. and W. J. Conover,  A Distribution-Free Approach to
            Inducing Rank Correlation Amoung Input Variables, Commun. Statist.-Simula. 
            Computation 11(3), pp. 311-334 (1982)
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.InputVariableCorrelator.numInputVariables_">
            <summary>
            The number of input variables.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.InputVariableCorrelator.sampleSize_">
            <summary>
            The sample size.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.InputVariableCorrelator.Rstar_">
            <summary>
            The score matrix transformed to have the desired correlation matrix.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.InputVariableCorrelator.intRng_">
            <summary>
            Random number generator. Used for shuffling.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.InputVariableCorrelator.indexPermutations_">
            <summary>
            numVariables X sampleSize matrix of index permutations.
            For each i = 0,...numVariables-1 sortedIndices_[i] is
            an array containing a permutation of the integers
            j = 0,...,numVariables-1. This effectively specifies how
            each input variables values must be reorded to achieve the
            desired correlations.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.InputVariableCorrelator.#ctor">
            <summary>
            Constructs a <c>InputVariableCorrelator</c> instance. For internal
            use (e.g. the Clone() method).
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.InputVariableCorrelator.#ctor(System.Int32,CenterSpace.NMath.Matrix.DoubleSymmetricMatrix)">
            <summary>
            Constructs an <c>InputVariableCorrelator</c> instance for the given
            number of sample inputs and desired correlation matrix.
            </summary>
            <param name="numSamples">Number of samples to correlate.</param>
            <param name="desiredCorrelationMatrix">Desired correlation matrxi for the variables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.InputVariableCorrelator.#ctor(System.Int32,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs an <c>InputVariableCorrelator</c> instance for the given
            number of sample inputs and desired correlation matrix.
            </summary>
            <param name="numSamples">Number of samples to correlate.</param>
            <param name="desiredCorrelationMatrix">Desired correlation matrxi for the variables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.InputVariableCorrelator.#ctor(CenterSpace.NMath.Stats.InputVariableCorrelator)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other">Copy source.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.InputVariableCorrelator.Rstar">
            <summary>
            Gets the permuted score matrix which has been transformed to have the
            desired correlation matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.InputVariableCorrelator.NumInputVariables">
            <summary>
            Gets the number of input variables.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.InputVariableCorrelator.SampleSize">
            <summary>
            Gets the sample size of the input variables.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.InputVariableCorrelator.GetCorrelatedInputs(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a matrix containing the input variables values re-ordered so as
            to have the desried correlations.
            </summary>
            <param name="inputs">The the inputs to correlate. Each row is an input value.</param>
            <returns> the input variables values, one per row, re-ordered so as
            to have the desried correlations.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the number of input variables is not
            equal to the number of input variables in the specified correlations matrix. That is, the
            number of columns in <c>inputs</c> must be equal to the number of columns in the specified
            correlation matrix.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.InputVariableCorrelator.Clone">
            <summary>
            Implementation of the <c>ICloneable</c> interface. Produces a deep copy of self. 
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.InputVariableCorrelator.ComputeRstar(System.Int32,System.Int32,CenterSpace.NMath.Matrix.DoubleSymmetricMatrix)">
            <summary>
            Computes the transformation of the score matrix R which has the desired correlations.
            </summary>
            <param name="numSamples">The number of samples.</param>
            <param name="numVariables">The number of variables in each sample.</param>
            <param name="desiredCorrelationMatrix">The desired correlation matrix.</param>
            <returns>Transformation of R having approximately the desired correlation matrix.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.InputVariableCorrelator.ComputeR(System.Int32,System.Int32)">
            <summary>
            Computes the score matrix R according to the algorithm.
            </summary>
            <param name="sampleSize">The sample size.</param>
            <param name="numberOfInputVariables">The number of variables in each sample.</param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.InputVariableCorrelator.GetScores(System.Int32)">
            <summary>
            Gets the scores contained in each column of the score matrix R in the algorithm.
            </summary>
            <remarks>
            Van der Waerden scores are the quantiles of a standard normal distribution. Also
            known as quantile normal scores.
            </remarks>
            <param name="sampleSize">The sample size.</param>
            <returns>The scores. Defaults to the Van der Waerden Scores</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePLSFunctions.Normalize(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Normalized the given vector to have unit length by dividing
            the vector by its length.
            </summary>
            <param name="x">On input the non-unit vector. On output 
            normalized to have unit length.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NMFClustering`1">
            <summary>
            Class NMFClustering performs a Non-negative Matrix Factorization (NMF) of
            a given matrix. 
            </summary>
            <remarks>
            The stopping criterion for the iterative process is the
            stabilization of the clustering of the columns of the matrix V. The clustering
            works like this:
            At each stage of the factorization, we have an approximate factorization of
            V into the product of two matrices W and H,
             V ~ WH
            Thus each column of vj of V is expressed as a linear combination of the columns
            of W with coefficients given in the corresponding column hj of H:
             vj = sum(i)hij*wi
            Each column vj of V is placed into a cluster corresponding to the column wi of W
            which has the largest coefficient hij. That is, column vj of V is placed in cluster
            i if the entry hij in H is the largest entery in column hj of H.
            The result of the clustering is returned as a Adjacency Matrix whose i, jth 
            value is 1 if columns i and j of V are in the same cluster, and 0 if they are
            not.
            <p/>
            The iteration stops when the adjacency matrix is unchanged for a certain
            number of iterations, that is, it has stabilized. There are three 
            parameters that control the iteration: the maximum number of iterations to
            perform, the stopping adjacency streak, which is the number of consecutive times
            the adjancency matrix remains unchanged before it is considered stablized,
            and the period to generate and check the adjacency matrix. The last
            parameter is necessary because computing the adjacency matrix can
            be a somewhat expensive operation that one may not wish to perform
            at every iteration, but only every nth iteration.
            For example, running a NMFClustering instance with maximum iterations = 2000,
            stopping adjacency = 40, and convergence check period = 10, will create
            a adjacency matrix every 10 iterations and check it against the last 
            one. If they are the same a count is incremented. The iteration will stop
            when we get 40 consecutive unchaged adjacency matrices, or we hit 2000
            iterations - which ever comes first.
            See the paper
            Metagenes and Molecular Pattern Discovery Using Matrix Factorization
            Jean-Philippe Brunet, Pablo Tamayo, Todd R. Golub, and Jill P. Mesirov.
            </remarks>
            <typeparam name="Alg">
            The NMF update algortithm to use. Must implement the interface
            <c>INMFUpdateAlgorithm</c>.
            </typeparam>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFClustering`1.DEFAULT_MAX_FACTORIZATION_ITERATIONS">
            <summary>
            The default maximum number of iterations to perform.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFClustering`1.DEFAULT_STOPPING_ADJACENCY">
            <summary>
            The default value for the stopping adjacency. The
            stopping adjacency is the number of consecutively
            unchanged connection matrices that must be observed 
            before convergence.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFClustering`1.DEFAULT_CONV_CHECK_PEROID">
            <summary>
            The default number if iterations between checks for 
            convergence.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFClustering`1.#ctor(System.Int32,System.Int32,System.Int32,`0)">
            <summary>
            Constructs NMFClustering instance with the given parameters.
            </summary>
            <param name="maximumIterations">The maximum number of iterations. 
            Iteration will stop after this number of iterations if the algorithm
            has not converged.</param>
            <param name="stoppingAdjacency">The stopping adjacency. The
            stopping adjacency is the number of consecutively
            unchanged connection matrices that must be observed 
            before convergence.</param>
            <param name="convergenceCheckPeriod">Convergence will be checked every 
            <code>convergenceCheckPeriod</code> iterations.</param>
            <param name="updater">NMF iteration update algortithm to use.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFClustering`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a NMFClustering instace with the given parameters.
            </summary>
            <param name="maximumIterations">The maximum number of iterations. 
            Iteration will stop after this number of iterations if the algorithm
            has not converged.</param>
            <param name="stoppingAdjacency">The stopping adjacency. The
            stopping adjacency is the number of consecutively
            unchanged connection matrices that must be observed 
            before convergence.</param>
            <param name="convergenceCheckPeriod">Convergence will be checked every 
            <code>convergenceCheckPeriod</code> iterations.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFClustering`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a NMFClustering instace with the given parameters and the default convergence
            check period is used.
            </summary>
            <param name="maximumIterations">The maximum number of iterations. 
            Iteration will stop after this number of iterations if the algorithm
            has not converged.</param>
            <param name="stoppingAdjacency">The stopping adjacency. The
            stopping adjacency is the number of consecutively
            unchanged connection matrices that must be observed 
            before convergence.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFClustering`1.#ctor(`0)">
            <summary>
            Constructs a NMFClustering instance with the given iteration algorithm and default
            values for maximum iterations, stopping adjacency, and convergence check period.
            </summary>
            <param name="updater">NMF iteration update algortithm to use.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFClustering`1.#ctor">
            <summary>
            Constructs a NMFClustering instance with the given iteration algorithm and default
            values for maximum iterations, stopping adjacency, and convergence check period.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.Iterations">
            <summary>
            Gets the total number of iterations performed in the most recent calculation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.Converged">
            <summary>
            Returns true if the factorization algorithm converged. Returns false if the
            maximum number of iterations was exceeded before convergence was achieved.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.ConvergenceCheckPeriod">
            <summary>
            Gets and sets the convergence check period. Convergence will be checked every 
            <code>ConvergenceCheckPeriod</code> iterations.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.Updater">
            <summary>
            Gets ans sets the NMF iteration algorithm to use.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.StoppingAdjacency">
            <summary>
            Gets and sets the stopping adjacency. The stopping adjacency. The
            stopping adjacency is the number of consecutively
            unchanged connection matrices that must be observed 
            before convergence.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.Connectivity">
            <summary>
            Gets the adjacency matrix. The Adjacency Matrix is a symmetric
            matrix whose i, jth value is 1 if columns i and j of the factored matrix
            are in the same cluster, and 0 if they are not.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.MaxFactorizationIterations">
            <summary>
            Gets and sets the maximum number of iterations to perform. 
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.W">
            <summary>
            Gets the matrix W in the NMF factorization of V,
            V ~ WH
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.H">
            <summary>
            Gets the matrix H in the NMF factorization of V,
            V ~ WH
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.Cost">
            <summary>
            Gets the value of the cost function for the factorization. The cost
            function is the function that is minimized by the NMF updater algorithm
            used.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFClustering`1.ClusterSet">
            <summary>
            Gets a ClusterSet object that identifies the cluster into which
            each object was grouped. The indexing operator on the returned 
            ClusterSet returns the cluter number to which ith object was 
            grouped.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFClustering`1.Factor(CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Performs the NMF V ~ WH using random initial values for W and H.
            </summary>
            <param name="v">Matrix to factor.</param>
            <param name="k">The rank of the factorization which is the number of
            columns in H.</param>
            <returns>True if the algorithm converged.</returns>
            <exception cref="T:System.ArgumentException">Thrown if k >= the number of columns
            in V.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFClustering`1.Factor(CenterSpace.NMath.Core.DoubleMatrix,System.Int32,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Performs the NMF V ~ WH using the specified initial values for W and H.
            </summary>
            <param name="v">Matrix to factor.</param>
            <param name="k">The rank of the factorization which is the number of
            columns in H.</param>
            <param name="w">Initial value for W.</param>
            <param name="h">Initial value for H.</param>
            <returns>True if the algorithm converged.</returns>
            <exception cref="T:System.ArgumentException">Thrown if k >= the number of columns
            in V, or if V, W, and H do not have compatible sizes.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFClustering`1.Factor(CenterSpace.NMath.Stats.DataFrame,System.Int32,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Performs the NMF V ~ WH using the specified initial values for W and H.
            </summary>
            <param name="data">Data to factor.</param>
            <param name="k">The rank of the factorization which is the number of
            columns in H.</param>
            <param name="w">Initial value for W.</param>
            <param name="h">Initial value for H.</param>
            <returns>True if the algorithm converged.</returns>
            <exception cref="T:System.ArgumentException">Thrown if k >= the number of columns
            in <c>data</c>, or if <c>data</c>, <c>w</c>, and <c>h</c> do not have compatible sizes.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFClustering`1.Factor(CenterSpace.NMath.Stats.DataFrame,System.Int32)">
            <summary>
            Performs the NMF V ~ WH using random initial values for W and H.
            </summary>
            <param name="data">Data to factor.</param>
            <param name="k">The rank of the factorization which is the number of
            columns in H.</param>
            <returns>True if the algorithm converged.</returns>
            <exception cref="T:System.ArgumentException">Thrown if k >= the number of columns
            in <c>data</c>.</exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.INMFUpdateAlgorithm">
            <summary>
            Interface to be implemented by all Non-negative Matrix Factorization (NMF)
            update algorithms used by the NMFact class.
            </summary>
            <remarks>
            In a non-negative factorization, a non-negative matrix, <c>V</c>,
            is factored into a product, <c>WH</c>, of two non-negative matrices, <c>W</c>
            and <c>H</c>. The algorithms pertaining to this interface compute this 
            factorization in an iterative manner, updating the factors <c>W</c> and 
            <c>H</c> at each step with the goal of minimizing some cost function. For 
            example:
            <code>C(V, W, H)  - C(V, W, H) = ||V - WH||</code>
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.INMFUpdateAlgorithm.Cost(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Returns the value of the cost function for the non-negative
            factorization of <c>V = WH</c>. The cost function is minimized by
            the factorization.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">First factor</param>
            <param name="H">Second factor</param>
            <returns>The cost.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.INMFUpdateAlgorithm.InitialFactors(CenterSpace.NMath.Core.DoubleMatrix@,System.Int32,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Provides the initial factors for the iteration process that 
            computes <c>W</c> and <c>H</c> in the non-negative matrix factorization 
            <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative matrix being factored</param>
            <param name="k">The number of columns in W and the number
            of rows in H</param>
            <param name="W">The first factor. Should be V.Rows x k</param>
            <param name="H">The second factor. Should be k x V.Cols</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.INMFUpdateAlgorithm.IterationStep(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Updates the factors <c>W</c> and <c>H</c> in the non-negative matrix factorization 
            <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">In: the current first factor. 
                            Out: the updated factor</param>
            <param name="H">In: the current second factor
                            Out: the updated factor</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NMFact">
            <summary>
            Class NMFact performs non-negative matrix factorization.
            </summary>
            <remarks>
            Users can choose the number of iterations, whether the cost
            is computed at each step, and the update algorithm.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFact.V_">
            <summary>
            V.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFact.W_">
            <summary>
            W.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFact.H_">
            <summary>
            H.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFact.numIterations_">
            <summary>
            Number of iterations.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFact.computeCostAtEachStep_">
            <summary>
            If <c>true</c>, the error in the approximation will be computed after
            each iteration step. If <c>false</c>, only the final error will be computed.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFact.stepCost_">
            <summary>
            Step cost.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFact.cost_">
            <summary>
            Cost.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFact.updateAlgorithm_">
            <summary>
            The update algorithm.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.#ctor">
            <summary>
            Creates an NMFact object with default settings for cost at each step,
            update algorithm, and number of iterations.
            </summary>
            <remarks>
            Only the final error for the approximation is computed.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.#ctor(System.Int32)">
            <summary>
            Constructs an NMFact object that uses the default cost at each step
            and update algorithm with the given number of iterations.
            </summary>
            <remarks>
            Only the final error for the approximation is computed.
            </remarks>
            <param name="numIterations">Number of updates to perform in computing
            the factorization.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>numIterations</c> is &lt;= 0.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.#ctor(System.Boolean)">
            <summary>
            Constructs an NMFact using the default number of iterations
            and update algorithm with the specified cost at each step.
            </summary>
            <param name="computeCostAtEachStep">If true, the error in the 
            approximation will be computed after each iteration step. If
            false, only the final error will be computed.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.#ctor(System.Boolean,System.Int32)">
            <summary>
            Constructs an NMFact with the default update algorithm and
            the given cost at each step and number of iterations.
            </summary>
            <param name="computeCostAtEachStep">If true, the error in the 
            approximation will be computed after each iteration step. If
            false, only the final error will be computed.</param>
            <param name="numIterations">The number of iterations.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>numIterations</c> is &lt;= 0.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.#ctor(System.Int32,CenterSpace.NMath.Stats.INMFUpdateAlgorithm)">
            <summary>
            Constructs an NMFact object which uses the given update
            algorithm to update the factors and the given number of
            iterations.
            </summary>
            <remarks>
            Only the final error for the approximation is computed.
            </remarks>
            <param name="numIterations">The number of iterations.</param>
             <param name="updateAlgorithm">The update algorithm to use.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>numIterations</c> is &lt;= 0.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.#ctor(CenterSpace.NMath.Stats.INMFUpdateAlgorithm)">
            <summary>
            Constructs an NMFact object with the given update algorithm and
            the default number of iterations.
            </summary>
            <remarks>
            Only the final error for the approximation is computed.
            </remarks>
            <param name="updateAlgorithm">The update algorithm to use.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.#ctor(System.Boolean,System.Int32,CenterSpace.NMath.Stats.INMFUpdateAlgorithm)">
            <summary>
            Constructs an NMFact object with the given parameters for
            cost at each step, number of iterations and the update algorithm.
            </summary>
            <param name="computeCostAtEachStep">If true, the error in the 
            approximation will be computed after each iteration step. If
            false, only the final error will be computed.</param>
            <param name="numIterations">The number of iterations.</param>
            <param name="updateAlgorithm">Factor update algorithm to use in 
            each update iteration.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>numIterations</c> is &lt;= 0.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.DefaultCostAtEachStep">
            <summary>
            Whether, by default, the cost is evaluated at each step.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.DefaultNumIterations">
            <summary>
            Gets and sets the default number of iterations.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.DefaultUpdateAlgorithm">
            <summary>
            Gets and sets the default update algorithm.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.W">
            <summary>
            Returns the first factor in the factorization of <c>V = WH</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.H">
            <summary>
            Returns the second factor in the factorization of <c>V = WH</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.V">
            <summary>
            Returns the matrix being factored.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.Cost">
            <summary>
            Returns the error in the factorization in the last call to <c>Factor</c>.
            The error is computed using the <c>Cost</c> function in the 
            <c>INMFUpdateAlgorithm</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.StepCost">
            <summary>
            A <c>DoubleVector</c> containing the error at each iteration step if 
            <c>ComputeCostAtEachStep</c> is true. Otherwise it is a vector
            of length one containing only the final error.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.UpdateAlgorithm">
            <summary>
            Gets and sets the algorithm used by this factorization object.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.ComputeCostAtEachStep">
            <summary>
            If true, the error of the approximation will be computed at each
            iteration step. If false, only the final error will be computed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFact.NumIterations">
            <summary>
            Gets and sets the number of iterations to perform.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.Clone">
            <summary>
            Creates a deep copy of this NMFact.
            </summary>
            <returns>A deep copy of this NMFact.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.Factor(CenterSpace.NMath.Stats.DataFrame,System.Int32,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Factors the matrix contained in data into the product <c>WH</c> using an 
            iterative method. The provided <c>W</c> and <c>H</c> are used as starting 
            points for the iteration.
            </summary>
            <param name="data">The matrix to be factored.</param>
            <param name="k">The number of columns in <c>W</c> (and rows in <c>>H</c>).
            </param>
            <param name="W">Initial value for <c>W</c>. If the matrix to factored is
            <c>m x n</c> then <c>W</c> must be <c>m x k</c>.</param>
            <param name="H">Initial value for <c>H</c>. If the matrix to be factored is
            <c>m x n</c> then <c>H</c> must be <c>k x n</c>.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.Factor(CenterSpace.NMath.Core.DoubleMatrix,System.Int32,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Factors the matrix contained in data into the product <c>WH</c> using an 
            iterative method. The provided <c>W</c> and <c>H</c> are used as starting 
            points for the iteration.
            </summary>
            <param name="data">The matrix to be factored.</param>
            <param name="k">The number of columns in <c>W</c> (and rows in <c>H</c>).
            </param>
            <param name="W">Initial value for <c>W</c>. If the matrix to factored is
            <c>m x n</c> then <c>W</c> must be <c>m x k</c>.</param>
            <param name="H">Initial value for <c>H</c>. If the matrix to be factored is
            <c>m x n</c> then <c>H</c> must be <c>k x n</c>.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.Factor(CenterSpace.NMath.Stats.DataFrame,System.Int32)">
            <summary>
            Factors the matrix contained in data into the product <c>WH</c> using an 
            iterative method. The initial values for <c>WH</c> are random.
            </summary>
            <param name="data">The matrix to be factored.</param>
            <param name="k">The number of columns in <c>W</c> (and rows in <c>H</c>).
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.Factor(CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Factors the matrix contained in data into the product <c>WH</c> using an 
            iterative method. The initial values for <c>WH</c> are random.
            </summary>
            <param name="V">The matrix to be factored.</param>
            <param name="k">The number of columns in <c>W</c> (and rows in <c>H</c>).
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.PercentExplainedVarianceFullModel">
            <summary>
            Percentage of variance explained by the full model. 
            </summary>
            <returns>Percentage of varaince explained by the full model as a number 
            between 0 and 100.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFact.PercentExplainedVarianceFactors">
            <summary>
            Variance importance percent by factors.
            </summary>
            <returns>A vector whose ith component is the percent
            importance for the ith factor.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NMFAlsUpdate">
            <summary>
            Class NMFAlsUpdate encapsulates the Alternating Least Squares (ALS) update algorithm.
            </summary>
            <remarks>
            The Alternating Least Squares (ALS) update algorithm takes advantage of the 
            fact that while the optimization problem is not simultaneously convex in 
            <c>W</c> and <c>H</c>, it is convex in either <c>W</c> or <c>H</c>. Thus, 
            given one matrix, the other can be found with a simple least squares computation.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFAlsUpdate.#ctor">
            <summary>
            Constructs an NMFAlsUpdate instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFAlsUpdate.Clone">
            <summary>
            Creates a deep copy of this NMFAlsUpdate.
            </summary>
            <returns>A deep copy of this NMFAlsUpdate.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFAlsUpdate.Cost(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Returns the value of the cost function for the non-negative
            factorization of <c>V = WH</c>. The cost function is minimized by
            the factorization.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">First factor</param>
            <param name="H">Second factor</param>
            <returns>The cost</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFAlsUpdate.InitialFactors(CenterSpace.NMath.Core.DoubleMatrix@,System.Int32,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Provides the initial factors for the iteration process that 
            computes <c>W</c> and <c>H</c> in the non-negative matrix factorization 
            <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative being factored</param>
            <param name="k">The number of columns in <c>W</c> and the number of rows in 
            <c>H</c></param>
            <param name="W">The first factor. Should be <c>V.Rows x k</c></param>
            <param name="H">The second factor. Should be <c>k x V.Cols</c></param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFAlsUpdate.IterationStep(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Updates the factors <c>W</c> and <c>H</c> in the non-negative matrix 
            factorization <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">The first factor is passed in and updated.</param>
            <param name="H">The second factor is passed in and updated.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NMFConsensusMatrix`1">
            <summary>
            Class NMFConsensusMatrix uses a non-negative matrix factorization to
            cluster samples.
            </summary>
            <remarks>
            Since the non-negative matrix factorization may not converge to the
            same solution each time it is run, several runs are made and the
            average is computed.
            <p/>
            For each run of the clustering non-negative matrix factorization a 
            connectivity matrix C with cij = 1 if samples i and j belong to the
            same cluster and cij = 0 if they belong to different clusters. The
            consensus matrix is then computed as the average connectivity matrix
            over several clustering runs. The values of the consensus matrix 
            range in value from 0 to 1 and reflect the probability that samples
            i and j cluster together.
            </remarks>
            <typeparam name="Alg">Update algorithm for the non-negative matrix factorization.</typeparam>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Int32,System.Int32,CenterSpace.NMath.Stats.NMFClustering{`0})">
            <summary>
            Constructs an NMFConsensusMatrix instance from the given data.
            </summary>
            <param name="v">The matrix to factor.</param>
            <param name="k">The order of the NMF factorization.</param>
            <param name="numberOfRuns">The number of clustering runs.</param>
            <param name="nmf">The clustering NMF to use.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,CenterSpace.NMath.Stats.NMFClustering{`0})">
            <summary>
            Constructs an NMFConsensusMatrix instance from the given data.
            </summary>
            <param name="data">The data to factor.</param>
            <param name="k">The order of the NMF factorization.</param>
            <param name="numberOfRuns">The number of clustering runs.</param>
            <param name="nmf">The clustering NMF to use.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,CenterSpace.NMath.Stats.NMFClustering{`0})">
            <summary>
            Constructs an NMFConsensusMatrix instance from the given data.
            </summary>
            <param name="v">The matrix to factor.</param>
            <param name="columnLables">Column labels for the matrix.</param>
            <param name="k">The order of the NMF factorization.</param>
            <param name="numberOfRuns">The number of clustering runs.</param>
            <param name="nmf">The clustering NMF to use.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,CenterSpace.NMath.Stats.NMFClustering{`0})">
            <summary>
            Constructs an NMFConsensusMatrix instance from the given data.
            </summary>
            <param name="data">The data to factor.</param>
            <param name="columnLables">Column labels for the matrix.</param>
            <param name="k">The order of the NMF factorization.</param>
            <param name="numberOfRuns">The number of clustering runs.</param>
            <param name="nmf">The clustering NMF to use.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Int32,System.Int32)">
            <summary>
            Constructs a NFMConsensusMatrix instance from the given data.
            </summary>
            <param name="v">The matrix to factor.</param>
            <param name="k">The order of the NMF factorization.</param>
            <param name="numberOfRuns">The number of clustering runs.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32)">
            <summary>
            Constructs a NFMConsensusMatrix instance from the given data.
            </summary>
            <param name="data">The data to factor.</param>
            <param name="k">The order of the NMF factorization.</param>
            <param name="numberOfRuns">The number of clustering runs.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            Constructs a NFMConsensusMatrix instance from the given data.
            </summary>
            <param name="v">The matrix to factor.</param>
            <param name="columnLabels">Matrix column labels.</param>
            <param name="k">The order of the NMF factorization.</param>
            <param name="numberOfRuns">The number of clustering runs.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            Constructs a NFMConsensusMatrix instance from the given data.
            </summary>
            <param name="data">The data to factor.</param>
            <param name="columnLabels">Matrix column labels.</param>
            <param name="k">The order of the NMF factorization.</param>
            <param name="numberOfRuns">The number of clustering runs.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.NumberOfConvergedRuns">
            <summary>
            Gets the number of clustering runs whose NMF computations converged.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFConsensusMatrix`1.Nmf">
            <summary>
            Gets and sets the NMF clustering object to use.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NMFDivergenceUpdate">
            <summary>
            Class NMFDivergenceUpdate encapulates an NMF update algorithm which
            minimizes a divergence functional.
            </summary>
            <remarks>
            The functional is related to the Poisson likelihood of generating
            V from W and H:
            <pre>
            D = sum(i,j)Vij*log(Vij/(WH)ij) - Vij + (WH)ij
            </pre>
            See the paper
            Metagenes and Molecular Pattern Discovery Using Matrix Factorization
            Jean-Philippe Brunet, Pablo Tamayo, Todd R. Golub, and Jill P. Mesirov.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFDivergenceUpdate.#ctor">
            <summary>
            Constructs a NMFDivergenceUpdate instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFDivergenceUpdate.Cost(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Returns the value of the cost function for the non-negative
            factorization of <c>V = WH</c>. The cost function is minimized by
            the factorization.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">First factor</param>
            <param name="H">Second factor</param>
            <returns>The cost.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFDivergenceUpdate.InitialFactors(CenterSpace.NMath.Core.DoubleMatrix@,System.Int32,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Provides the initial factors for the iteration process that 
            computes <c>W</c> and <c>H</c> in the non-negative matrix factorization 
            <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative matrix being factored</param>
            <param name="k">The number of columns in W and the number
            of rows in H</param>
            <param name="W">The first factor. Should be V.Rows x k</param>
            <param name="H">The second factor. Should be k x V.Cols</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFDivergenceUpdate.IterationStep(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Updates the factors <c>W</c> and <c>H</c> in the non-negative matrix factorization 
            <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">In: the current first factor. 
                            Out: the updated factor</param>
            <param name="H">In: the current second factor
                            Out: the updated factor</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFDivergenceUpdate.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>Deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NMFGdClsUpdate">
            <summary>
            Class NMFGdClsUpdate encapsulates the Gradient Descent - Constrained 
            Least Squares (GDCLS) algorithm for Nonnegative Matrix Facotorization (NMF).
            </summary>
            <remarks>
            In some cases it may be desirable to enforce a statistical sparsity constraint 
            on the <c>H</c> matrix. As the sparsity of <c>H</c> increases, the basis 
            vectors become more localized, i.e, the parts-based representation of the data
            in <c>W</c> becomes more and more enhanced. The Gradient Descent - Constrained 
            Least Squares (GDCLS) algorithm enforces sparsity in <c>H</c> using a scheme 
            that penalizes the number of non-zero entries in <c>H</c>. It is a hybrid 
            algorithm that uses the multiplicative update rule for updating <c>W</c> while
            <c>H</c> is calculated using a constrained least squares model as the metric.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFGdClsUpdate.DEFAULT_LAMBDA">
            <summary>
            Default lambda.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.NMFGdClsUpdate.lambda_">
            <summary>
            Lambda.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFGdClsUpdate.#ctor">
            <summary>
            Creates the update with default lambda of zero.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFGdClsUpdate.#ctor(System.Double)">
            <summary>
            Creates the update with specified lambda value.
            </summary>
            <param name="lambda">Lambda parameter.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFGdClsUpdate.Lambda">
            <summary>
            Returns the lambda value.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFGdClsUpdate.Clone">
            <summary>
            Creates a deep copy of this NMFGdClsUpdate.
            </summary>
            <returns>A deep copy of this NMFGdClsUpdate.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFGdClsUpdate.Cost(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Returns the value of the cost function for the non-negative
            factorization of <c>V = WH</c>. The cost function is minimized by
            the factorization.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">First factor.</param>
            <param name="H">Second factor.</param>
            <returns>The cost.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFGdClsUpdate.InitialFactors(CenterSpace.NMath.Core.DoubleMatrix@,System.Int32,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Provides the initial factors for the iteration process that 
            computes <c>W</c> and <c>H</c> in the non-negative matrix factorization 
            <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative being factored</param>
            <param name="k">The number of columns in <c>W</c> and the number of 
            rows in <c>H</c>.</param>
            <param name="W">The first factor. Should be <c>V.Rows x k</c></param>
            <param name="H">The second factor. Should be <c>k x V.Cols</c></param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFGdClsUpdate.IterationStep(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Updates the factors <c>W</c> and <c>H</c> in the non-negative matrix 
            factorization <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">The first factor is passed in and updated.</param>
            <param name="H">The second factor is passed in and updated.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NMFMultiplicativeUpdate">
            <summary>
            Class NMFMultiplicativeUpdate encapsulates a multiplicative update algorithm
            for Nonnegative Matrix Factorization (NMF).
            </summary>
            <remarks>
            Uses a multiplicative update rule for <c>W</c> and <c>H</c> as proposed by 
            Lee and Sueng. This multiplicative method can be classified as a 
            diagonally-scaled gradient descent method. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFMultiplicativeUpdate.#ctor">
            <summary>
            Constructs an NMFMultiplicativeUpdate instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFMultiplicativeUpdate.Clone">
            <summary>
            Creates a deep copy of this NMFMultiplicativeUpdate.
            </summary>
            <returns>A deep copy of this NMFMultiplicativeUpdate.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFMultiplicativeUpdate.Cost(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Returns the value of the cost function for the non-negative
            factorization of <c>V = WH</c>. The cost function is minimized by
            the factorization.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">First factor</param>
            <param name="H">Second factor</param>
            <returns>The cost.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFMultiplicativeUpdate.InitialFactors(CenterSpace.NMath.Core.DoubleMatrix@,System.Int32,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Provides the initial factors for the iteration process that 
            computes <c>W</c> and <c>H</c> in the non-negative matrix factorization 
            <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative being factored</param>
            <param name="k">The number of columns in <c>W</c> and the number of rows 
            in <c>H</c></param>
            <param name="W">The first factor. Should be <c>V.Rows x k</c></param>
            <param name="H">The second factor. Should be <c>k x V.Cols</c></param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFMultiplicativeUpdate.IterationStep(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Updates the factors <c>W</c> and <c>H</c> in the non-negative matrix 
            factorization <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">The current first factor is passed in and updated.</param>
            <param name="H">The current second factor is passed in and update.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NMFNonsmoothUpdate">
            <summary>
            Class NMFNonsmoothUpdate encapulates an NMF update algorithm which
            minimizes a cost functional designed to explicitly represent sparseness,
            in the form on nonsmoothness, which is controlled by a single parameter.
            </summary>
            <remarks>
            The Nonsmooth Nonnegative Matrix Factorization is defined as 
            <pre>V = WSH</pre>
            where V, W, and H are the same as in the original NMF model. The positive
            symmetric matrix S is a "smoothing" matrix defined as:
            <pre>
            S = (1 - theta)I + (theta/q)11'
            </pre>
            where I is the identity matrix, 1 is a vector of ones and the parameter theta
            is between 0 and 1, inclusive.
            The interpretation of theta as a smoothing parameter is as follows:
            If x is a positive, nonzero, vector and y = Sx, then y = x when 
            theta = 0 and there is no smoothing. As theta -> 1, the vector
            y tends to the constant vector with all elements equal to the 
            average of the elements of x. This is the smoothest possible 
            vector in the sense of nonsparseness because all the entries
            are equal to the same nonzero value, instead of having values
            close to zero and others clearly not zero.
            See the paper
            Nonsmooth Nonnegative Matrix Factorization (nsNMF)
            Alberto Pascual-Montano, J.M Carazo, Kieko Kochi, Dietrich Lehmann, and 
            Roberto D. Pascual-Marui
            IEEE Transactions on Pattern Analysis and Machine Intelligence
            Vol. 28, No. 3, March 2006.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFNonsmoothUpdate.#ctor(System.Double)">
            <summary>
            Constructs a NMFNonsmoothUpdate instance with the specified smoothing parameter.
            </summary>
            <param name="theta">Smoothing paramter. Must be between zero and one.</param>
            <exception cref="T:System.ArgumentException">Thrown is theta is less than zero
            or greater than one.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFNonsmoothUpdate.#ctor">
            <summary>
            Constructs a NMFNonsmoothUpdate instance with smoothing parameter theta 
            equal to zero.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFNonsmoothUpdate.Theta">
            <summary>
            The Nonsmooth Nonnegative Matrix Factorization is defined as 
            <pre>V = WSH</pre>
            where V, W, and H are the same as in the original NMF model. The positive
            symmetric matrix S is a "smoothing" matrix defined as:
            <pre>
            S = (1 - theta)I + (theta/q)11'
            </pre>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown is theta is less than zero
            or greater than one.</exception>
            <remarks>See the remarks section for this class for a description of the
            parameter theta.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NMFNonsmoothUpdate.SmoothingMatrix">
            <summary>
            Gets the smoothing matrix.
            The smoothing matrix is a  positive
            symmetric matrix S defined as:
            <pre>
            S = (1 - theta)I + (theta/q)11'
            </pre>
            where I is the identity matrix, 1 is a vector of ones and the parameter t
            is between 0 and 1, inclusive. See class description.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFNonsmoothUpdate.Cost(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Returns the value of the cost function for the non-negative
            factorization of <c>V = WH</c>. The cost function is minimized by
            the factorization.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">First factor</param>
            <param name="H">Second factor</param>
            <returns>The cost.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFNonsmoothUpdate.InitialFactors(CenterSpace.NMath.Core.DoubleMatrix@,System.Int32,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Provides the initial factors for the iteration process that 
            computes <c>W</c> and <c>H</c> in the non-negative matrix factorization 
            <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative matrix being factored</param>
            <param name="k">The number of columns in W and the number
            of rows in H</param>
            <param name="W">The first factor. Should be V.Rows x k</param>
            <param name="H">The second factor. Should be k x V.Cols</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFNonsmoothUpdate.IterationStep(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix@,CenterSpace.NMath.Core.DoubleMatrix@)">
            <summary>
            Updates the factors <c>W</c> and <c>H</c> in the non-negative matrix factorization 
            <c>V = WH</c>.
            </summary>
            <param name="V">The non-negative matrix being factored.</param>
            <param name="W">In: the current first factor. 
                            Out: the updated factor</param>
            <param name="H">In: the current second factor
                            Out: the updated factor</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NMFNonsmoothUpdate.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>Deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ReducedVarianceInputCorrelator">
            <summary>
            Instances of the ReducedVarianceInputCorrelator class are used to induce
            a desired rank correlation among input variables. 
            </summary>
            <remarks>
            The class <c>ReducedVarianceInputCorrelator</c> derives from class
            <c>InputVariableCorrelator</c> and overrides one of the computational
            steps in order to make the correlation matrix for the resulting
            input varaibles more closely match the desired correlation. This
            increase in accuracy comes from addtional computational expense. 
            use class <c>ReducedVarianceInputCorrelator</c> if higher accuracy
            is needed and speed is not an issue. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ReducedVarianceInputCorrelator.#ctor">
            <summary>
            Constructs a <c>ReducedVarianceInputCorrelator</c> instance. For internal use.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ReducedVarianceInputCorrelator.#ctor(System.Int32,CenterSpace.NMath.Matrix.DoubleSymmetricMatrix)">
            <summary>
            Constructs an <c>ReducedVarianceInputCorrelator</c> instance for the given
            number of sample inputs and desired correlation matrix.
            </summary>
            <param name="numSamples">Number of samples to correlate.</param>
            <param name="desiredCorrelationMatrix">Desired correlation matrxi for the variables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ReducedVarianceInputCorrelator.#ctor(System.Int32,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs an <c>ReducedVarianceInputCorrelator</c> instance for the given
            number of sample inputs and desired correlation matrix.
            </summary>
            <param name="numSamples">Number of samples to correlate.</param>
            <param name="desiredCorrelationMatrix">Desired correlation matrxi for the variables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ReducedVarianceInputCorrelator.#ctor(CenterSpace.NMath.Stats.ReducedVarianceInputCorrelator)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other">Copy source.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ReducedVarianceInputCorrelator.ComputeRstar(System.Int32,System.Int32,CenterSpace.NMath.Matrix.DoubleSymmetricMatrix)">
            <summary>
            Computes the scores matrix transformed to match the desired correlation matrix. 
            uses a varaince reduction technique in which the transformation matrix is adjusted
            so that the final sample correlation matrix will be much closer to the desired
            correlation matrix, especially for correlation values of 0.
            </summary>
            <param name="numSamples">Sample size.</param>
            <param name="numVaraibles">Number of variables in each sample.</param>
            <param name="desiredCorrelationMatrix">Desired correlation matrix.</param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ReducedVarianceInputCorrelator.Clone">
            <summary>
            Implementation of the <c>ICloneable</c> interface. Produces a deep copy of self. 
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.KFoldsSubsets">
            <summary>
            Class KFoldsSubsets generates k-fold subsets for cross validation.
            </summary>
            <remarks>
            Specifically, for a given integer, <c>k</c>, the row indices of the
            input data are partitioned into k subsets. The indices 
            in each subset are chosen randomly.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KFoldsSubsets.#ctor(System.Int32)">
            <summary>
            Constructs a KFoldsSubsets instance for the given value of <c>k</c>.
            </summary>
            <param name="k">Size of each subset in the partition.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KFoldsSubsets.#ctor(System.Int32,CenterSpace.NMath.Core.QuasiRandomNumberGenerator)">
            <summary>
            Constructs a KFoldsSubsets instance for the given value of <c>k</c>,
            and the given random number generator.
            </summary>
            <param name="k">Size of each subset in the partition.</param>
            <param name="rng">A one dimensional quasi-random number generator.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KFoldsSubsets.K">
            <summary>
            Gets and sets the size of each subset in the partition.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KFoldsSubsets.NumSubsets">
            <summary>
            Gets the number of subsets generated.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KFoldsSubsets.RandomNumberGenerator">
            <summary>
            Gets the quasi-random number generator that is used to randomly select 
            the indices for each generated subset. If repeatability in subset
            generation for a given <c>k</c> is desired, set the seed used in 
            the random number generator to the same value before each run.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KFoldsSubsets.Clone">
            <summary>
            Creates a deep copy of this KFoldsSubsets.
            </summary>
            <returns>A deep copy of this KFoldsSubsets.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KFoldsSubsets.GetTestingSubsets(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Generates the k-fold subsets to be used for cross validation.
            </summary>
            <param name="independentData">Matrix of independent data.</param>
            <param name="dependentData">Matrix of dependent data.</param>
            <returns>Array of subsets that partition the set of row indices of the
            input matrices.</returns>
            <remarks>Independent and dependent matrices should have the same number
            of rows (each row represents a sample value for the variables).</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KFoldsSubsets.GetTestingSubsets(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Generates the k-fold subsets to be used for cross validation.
            </summary>
            <param name="independentData">DataFrame of independent data.</param>
            <param name="dependentData">DataFrame of dependent data.</param>
            <returns>Array of subsets that partition the set of row indices of the
            input matrices.</returns>
            <remarks>Independent and dependent DataFrames should have the same number
            of rows (each row represents a sample value for the variables).</remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife">
            <summary>
            Class PLS2CrossValidationWithJackknife performs an evaluation of a PLS (Partial Least
            Squares) model with model coefficient variance estimates and confidence intervals.
            </summary>
            <remarks>
            The original (Tukey) jackknife variance estimator is deﬁned as
            ((g - 1)/g)*sum(Bi - Bbar)
            where g is the number of subsets used in cross validation, Bi is
            the estimated coefficients when subset i is left out (called the 
            jackknife replicates), and Bbar is the mean of the Bi. 
            However, Martens and Martens (2000) deﬁned the estimator as
            ((g - 1)/g)*sum(Bi - Bhat)
            where Bhat is the coefﬁcient estimate using the entire data set. I.e., 
            they use the original ﬁtted coefﬁcients instead of the mean of the jackknife 
            replicates and is the default for class <c>PLS2CrossValidationWithJackknife</c>. 
            However it can be made to use the orginal Tukey deﬁnition by setting the
            <c>UseMean</c> property to <c>true</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.#ctor">
            <summary>
            Default constructor. Constructs a PLS2CrossValidationWithJackknife instance that uses 
            the "leave one out" cross validation and the Nipals algorithm. No scaling will be done and 
            full model coefficients will be used in the jackknife coefficient variance estimate 
            computation.
            <see cref="T:CenterSpace.NMath.Stats.LeaveOneOutSubsets"/>
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.#ctor(System.Boolean)">
            <summary>
            Constructs a PLS2CrossValidationWithJackknife instance that uses 
            the "leave one out" cross validation and the Nipals algorithm. 
            full model coefficients will be used in the jackknife coefficient variance 
            estimate computation.
            <param name="scale">If <c>true</c>, the learning X data for each subset is scaled 
            by dividing each variable by its sample standard deviation. The prediction
             data is scaled by the same amount. Note that this will impact performance.</param>
            <see cref="T:CenterSpace.NMath.Stats.LeaveOneOutSubsets"/>
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.#ctor(CenterSpace.NMath.Stats.ICrossValidationSubsets)">
            <summary>
            Constructs a PLS2CrossValidationWithJackknife instance which uses the given subset 
            generator and the Nipals algorithm.
            </summary>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
            <see cref="T:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm"/>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.#ctor(CenterSpace.NMath.Stats.IPLS2Calc,CenterSpace.NMath.Stats.ICrossValidationSubsets)">
            <summary>
            Constructs a PLS2CrossValidationWithJackknife instance which uses the given PLS calculator
            and subset generator. No scaling will be done and 
            full model coefficients will be used in the jackknife coefficient variance estimate 
            computation.
            </summary>
            <param name="calculator">Instance of a class implementing the IPLS2Calc
            interface. Used to perform the PLS calculations during cross validation.</param>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.#ctor(CenterSpace.NMath.Stats.ICrossValidationSubsets,System.Boolean,System.Boolean)">
            <summary>
            Constructs a PLS2CrossValidationWithJackknife instance which uses the given subset 
            generator and the Nipals algorithm. No scaling and full model coefficients
            will be used in the jackknife coefficient variance estimate computation.
            No scaling will be done and full model coefficients will be used in the
            jackknife coefficient variance estimate computation.
            </summary>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
            <param name="scale">If <c>true</c>, the learning X data for each subset is scaled 
            by dividing each variable by its sample standard deviation. The prediction
             data is scaled by the same amount. Note that this will impact performance.</param>
            <param name="useMean">If true the mean of the coefficients computed
            in the jackknife replicates will be used to compute variance estimates.
            If false the full model coefficients will be used.</param>
            <see cref="T:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm"/>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.#ctor(CenterSpace.NMath.Stats.ICrossValidationSubsets,System.Boolean)">
            <summary>
            Constructs a PLS2CrossValidationWithJackknife instance which uses the given subset 
            generator and the Nipals algorithm. No scaling and full model coefficients
            will be used in the jackknife coefficient variance estimate computation.
            No scaling will be done and full model coefficients will be used in the
            jackknife coefficient variance estimate computation.
            </summary>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
            <param name="scale">If <c>true</c>, the learning X data for each subset is scaled 
            by dividing each variable by its sample standard deviation. The prediction
             data is scaled by the same amount. Note that this will impact performance.</param>
            <see cref="T:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm"/>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.#ctor(CenterSpace.NMath.Stats.IPLS2Calc,CenterSpace.NMath.Stats.ICrossValidationSubsets,System.Boolean,System.Boolean)">
            <summary>
            Constructs a PLS2CrossValidationWithJackknife instance which uses the given PLS calculator
            and subset generator.
            </summary>
            <param name="calculator">Instance of a class implementing the IPLS2Calc
            interface. Used to perform the PLS calculations during cross validation.</param>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
            <param name="scale">If <c>true</c>, the learning X data for each subset is scaled 
            by dividing each variable by its sample standard deviation. The prediction
             data is scaled by the same amount. Note that this will impact performance.</param>
            <param name="useMean">If true the mean of the coefficients computed
            in the jackknife replicates will be used to compute variance estimates.
            If false the full model coefficients will be used.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.#ctor(CenterSpace.NMath.Stats.IPLS2Calc,CenterSpace.NMath.Stats.ICrossValidationSubsets,System.Boolean)">
            <summary>
            Constructs a PLS2CrossValidationWithJackknife instance which uses the given PLS calculator
            and subset generator.
            </summary>
            <param name="calculator">Instance of a class implementing the IPLS2Calc
            interface. Used to perform the PLS calculations during cross validation.</param>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
            <param name="scale">If <c>true</c>, the learning X data for each subset is scaled 
            by dividing each variable by its sample standard deviation. The prediction
             data is scaled by the same amount. Note that this will impact performance.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.UseMeans">
            <summary>
            Gets and sets the use means property.
            If true the mean of the coefficients computed
            in the jackknife replicates will be used to compute variance estimates.
            If false the full model coefficients will be used.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.Scale">
            <summary>
            Gets and sets the scale property.
            If <c>true</c>, the learning X data for each subset is scaled 
            by dividing each variable by its sample standard deviation. The prediction
            data is scaled by the same amount. Note that this will impact performance.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.CoefficientVariance">
            <summary>
            Gets the jackknife variance estimates for the model coefficients.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.Message">
            <summary>
            Gets any message that may have been generated by the computation. For 
            example, if the calculation is unsuccessful, the message indicates the
            reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.Results">
            <summary>
            Gets the results of the cross validation for each training/testing
            subsets pair.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.AverageMeanSqrError">
            <summary>
            Gets the average of the mean square errors for each training/testing
            subsets pair.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.Calculator">
            <summary>
            Gets and sets the PLS2 calculator to use for PLS2 calculations.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.SubsetGenerator">
            <summary>
            Gets and sets the subset generator to use to generate testing
            and training subsets.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.IsGood">
            <summary>
            Whether all the PLS2 calculations were successful.
            </summary>
            <remarks>
            If one or more calculations failed, false is returned. The results 
            may be examined to determine which calculations failed.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.Coefficients">
            <summary>
            Gets the coefficients for the full model.
            </summary>
            <remarks>
            The coeffient matrix, <c>B</c>, can be used for prediction as follows:
            <para>
            Let <c>yhat(z)</c> be the predicted value for the independet variable 
            value <c>z</c>, <c>xbar</c> the mean of the PredictorMatrix variables and 
            <c>ybar</c> the mean of ResponseVector variables. Then
            <code>yhat(z) = ybar + (z - xbar)B</code>
            </para>
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.CoefficientConfidenceIntervals(System.Double)">
            <summary>
            Calculates the (1 - alpha)x100% confidence intervals for the model 
            coeffficients. The i,j entry corresponds to the i,j entry of the
            matrix of coefficients accessed by the <c>Coefficients</c>
            property.
            </summary>
            <param name="alpha"></param>
            <returns>(1 - alpha)x100% confidence intervals for the model coeffficients</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.Clone">
            <summary>
            Creates a deep copy of this PLS2CrossValidationWithJackknife.
            </summary>
            <returns>A deep copy of this PLS2CrossValidationWithJackknife.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.DoCrossValidation(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Perform cross validation and jackknife variance estimation on the given data 
            using the existing calculator and subset generator.
            </summary>
            <param name="X">Predictor data. Matrix is number of samples rows by number
            of independent variables columns.</param>
            <param name="Y">Response data. Matrix is number of samples rows by number
            of dependent variables columns.</param>
            <param name="numComponents">Number of components (a.k.a. latent vectors) to
            use in the PLS calculation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.DoCrossValidation(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.IPLS2Calc,System.Int32)">
            <summary>
            Performs cross validation and jackknife variance estimation on the given data using the 
            given calculator and number of components.
            </summary>
            <param name="X">Predictor data. Matrix is number of samples rows by number
            of independent variables columns.</param>
            <param name="Y">Response data. Matrix is number of samples rows by number
            of dependent variables columns.</param>
            <param name="calculator">PLS2 calculator.</param>
            <param name="numComponents">Subset generator to generate the training and 
            testing subsets.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationWithJackknife.Increment(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Incremenents the contents of the second matrix by the first.
            </summary>
            <param name="A">A matrix.</param>
            <param name="B">Input: a matrix, output: incremented by <c>A</c></param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.SparsePLSMode">
            <summary>
            Partial Least Squares Mode.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SparsePLSMode.Regression">
            <summary>
            Model causal relationship between the two data sets. That is,
            PLS will predict Y from X.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SparsePLSMode.Canonical">
            <summary>
            Use to model a bi-directional relationship between two data sets.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.SparsePls">
            <summary>
            Class SparsePls performs a Partial Least Squares (PLS) calculation
            for the model X ~ Y with variable selection.
            The LASSO penalization is used on the pairs of loading
            vectors.
            <c>SparsePls</c> allows matrices with missing values in them by using
            the NIPALS algorithm to estimate them. Missing values are represented
            as <c>Double.NaN</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePls.#ctor(CenterSpace.NMath.Stats.SparsePLSMode,System.Int32[],System.Int32[],System.Int32,System.Double)">
            <summary>
            Constructs a <c>SparsePls</c> object from the given parameters.
            </summary>
            <param name="mode">Use regression on canonical mode.</param>
            <param name="keepX">Vector with length equal to the number of components, the
            number of variables to keep in the X loadings for each component. The 
            default is to keep all variables.</param>
            <param name="keepY">Vector with length equal to the number of components, the
            number of variables to keep in the Y loadings for each component. The 
            default is to keep all variables.</param>
            <param name="maxIterations">Maximum number of iterations. Default is 500.</param>
            <param name="tolerance">The tolerance used in the iterative algorithm. Default is 1e-6.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePls.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32,System.Int32[],System.Int32[],CenterSpace.NMath.Stats.SparsePLSMode,System.Int32,System.Double)">
            <summary>
            Constructs a <c>SparsePls</c> object from the given parameters and performs
            the sparse PLS calculation on the given data. The data is first centered and
            scaled by standard deviation.
            </summary>
            <param name="X">Matrix of predictor values.</param>
            <param name="Y">Matrix of responses.</param>
            <param name="numComponents">The number of components to include in the model.</param>
            <param name="mode">Use regression on canonical mode.</param>
            <param name="keepX">Vector with length equal to the number of components, the
            number of variables to keep in the X loadings for each component. The 
            default is to keep all variables.</param>
            <param name="keepY">Vector with length equal to the number of components, the
            number of variables to keep in the Y loadings for each component. The 
            default is to keep all variables.</param>
            <param name="maxIterations">Maximum number of iterations. Default is 500.</param>
            <param name="tolerance">The tolerance used in the iterative algorithm. Default is 1e-6.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.KeepX">
            <summary>
            Get and sets the number of X variables kept in the model for each component.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.KeepY">
            <summary>
            Get and sets the number of Y variables kept in the model for each component.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.Coefficients">
            <summary>
            Coefficient matrix that may be used for prediction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.XLoadings">
            <summary>
            Gets the matrix of X loadings.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.YLoadings">
            <summary>
            Gets the matrix of Y loadings.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.XVariates">
            <summary>
            Gets the matrix of X variates or scores.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.YVariates">
            <summary>
            Gets the matrix of Y variates or scores.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.CMatrix">
            <summary>
            Matrix of coefficients used internally for prediction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.CenteredScaledX">
            <summary>
            Matrix of scaled, centered X values.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.CenteredScaledY">
            <summary>
            Matrix of scaled centered Y values.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.Mode">
            <summary>
            Gets and sets the PLS mode.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.NumComponents">
            <summary>
            Gets the number components.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.Iterations">
            <summary>
            Number of iterations of the algorthm for each component
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.Tolerance">
            <summary>
            Gets the tolerance used for convergence determination of the
            iterative algorithm.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.MaxIterations">
            <summary>
            Gets the max iterations performed by the iterative algorithm.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.IsGood">
            <summary>
            Indicates whether the most recent calculation was successful. For
            <c>SparsePls</c> a return value of <c>false</c> most likely indicates that the
            iterative algorithm did not converge before reaching the maximum
            number of iterations. Check the <c>Message</c> property for 
            further information in this case.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.Message">
            <summary>
            Gets any message that may have been generated by the algorithm. For example,
            if the calculation is unsuccessful, the message should indicate the
            reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.PredictorScores">
            <summary>
            Gets the predictor variable scores. This is an alias for
            <c>XVariates</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePls.PredictorLoadings">
            <summary>
            Gets the predictor variable loadings. This is an alias for
            <c>XLoadings</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePls.Calculate(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Calculates the sparse PLS fit for the given data and number of components.
            X and Y values are first centered and scaled by their standard deviations.
            </summary>
            <param name="X">Matrix of predictor values.</param>
            <param name="Y">Matrix of observerd values.</param>
            <param name="numComponents">Number of components.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePls.Predict(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Used the calculated model to predict the observed value from the given
            predictor vector.
            </summary>
            <param name="z">Predictor vector.</param>
            <returns>Vector of predicted values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePls.Predict(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Uses the calculated model to predict the observed values from 
            a matrix of predictor values.
            </summary>
            <param name="X">Matrix of predictor values.</param>
            <returns>Matrix of predicted values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePls.Clone">
            <summary>
            Creates a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.SparsePlsDa">
            <summary>
            Class for performing Discriminant Analysis (DA) using sparse Partial Least 
            Squares (sPLS). This is a classical sPLS regression, but where the 
            response variable is catagorical. The response vector Y is qualitative and
            is recoded as a dummy block matrix where each of the response categories 
            are coded via an indicator variable. PLS-DA is then run as if Y was a 
            continuous matrix. 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePlsDa.#ctor">
            <summary>
            Constructs a <c>SparsePlsDa</c> instance using default settings.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePlsDa.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a <c>SparsePlsDa</c> instance. The sparse PLS fit algorithm is executed using
            the specified maximum iterations.
            </summary>
            <param name="maxIterations">Maximum number of iterations to be performed by the
            sparse PLS fit.</param>
            <param name="tolerance">Tolerance used by the iterative sparse PLS fit
            algorithm to determine convergence.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePlsDa.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Factor,System.Int32,System.Int32[],System.Int32,System.Double)">
            <summary>
            Constructs a <c>SparsePlsDa</c> for the given data and options.
            </summary>
            <param name="X">Matrix of predictor values.</param>
            <param name="yFactor">Categorical response values.</param>
            <param name="numComponents">The number of components to include in the model.</param>
            <param name="keepX">Vector with length equal to the number of components, the
            number of variables to keep in the X loadings for each component. The 
            default is to keep all variables.</param>
            <param name="maxIterations">Maximum number of iterations. Default is 500.</param>
            <param name="tolerance">The tolerance used in the iterative algorithm. Default is 1e-6.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.YFactor">
            <summary>
            Gets the catagorical response varible used in the calculation
            as a <c>Factor</c> .
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.IndicatorMatrix">
            <summary>
            Gets the indicator matrix (dummy block matrix) used in the 
            calculation.  The indicator matrix has G columns, where
            G is the number of classes containing ones and zeros. The
            gth column is one and the others zero for observations of
            class g.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.KeepX">
            <summary>
            Get and sets the number of X variables kept in the model for each component.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.XLoadings">
            <summary>
            Gets the matrix of X loadings.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.YLoadings">
            <summary>
            Gets the matrix of Y loadings.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.XVariates">
            <summary>
            Gets the matrix of X variates or scores.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.YVariates">
            <summary>
            Gets the matrix of Y variates or scores.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.CMatrix">
            <summary>
            Matrix of coefficients used internally for prediction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.CenteredScaledX">
            <summary>
            Matrix of scaled, centered X values.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePlsDa.CenteredScaledY">
            <summary>
            Matrix of scaled centered Y values.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePlsDa.Calculate(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Factor,System.Int32,System.Int32[])">
            <summary>
            Performs the sparse Partial Least squares calculation for the given
            data.
            </summary>
            <param name="X">Matrix of predictor variables.</param>
            <param name="yFactor">Factor class for the discrete observation
            variable.</param>
            <param name="numComponents">The number of components to keep in the
            model.</param>
            <param name="keepX">numeric vector of length ncomp, the number of variables to keep in X-loadings.
            A <c>null</c> value (the default) keeps all variables in the model.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.SparsePLSDACrossValidation">
            <summary>
            Class SparsePLSDACrossValidation performs an evaluation of a PLS (Partial Least
            Squares) model.
            </summary>
            <remarks>
            Evaluation consists of dividing the data into two
            subsets - a training subset and a testing subset. A PLS calculation
            is performed on the the training subset and the resulting model is
            used to predict the values of the dependent variables in the testing
            set. The mean square error between the actual and predicted dependent
            values is then calculated. Usually, the data is divided up into several
            training and testing subsets and calculations are done on each of these.
            In this case the average mean square error over each PLS calculation
            is reported (the individual mean square errors are available as well).
            <p/>
            The subsets to use in the cross validation are specifed by providing 
            an implementation of the ICrossValidationSubsets interface. Classes
            that implement this interface generate training and testing subsets 
            from PLS data.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.#ctor">
            <summary>
            Default constructor. Constructs a SparsePLSDACrossValidation instance that uses 
            the "leave one out" cross validation.
            <see cref="T:CenterSpace.NMath.Stats.LeaveOneOutSubsets"/>
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.#ctor(CenterSpace.NMath.Stats.ICrossValidationSubsets)">
            <summary>
            Constructs a SparsePLSDACrossValidation instance which uses the given subset 
            generator and the Nipals algorithm.
            </summary>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
            <see cref="T:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm"/>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.Message">
            <summary>
            Gets any message that may have been generated by the computation. For 
            example, if the calculation is unsuccessful, the message indicates the
            reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.Results">
            <summary>
            Gets the results of the cross validation for each training/testing
            subsets pair.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.AverageMeanSqrError">
            <summary>
            Gets the average of the mean square errors for each training/testing
            subsets pair.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.Calculator">
            <summary>
            Gets and sets the SparsePLS calculator to use for the sparse PLS calculations.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.SubsetGenerator">
            <summary>
            Gets and sets the subset generator to use to generate testing
            and training subsets.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.IsGood">
            <summary>
            Whether all the PLS2 calculations were successful.
            </summary>
            <remarks>
            If one or more calculations failed, false is returned. The results 
            may be examined to determine which calculations failed.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.Clone">
            <summary>
            Creates a deep copy of this SparsePLSDACrossValidation.
            </summary>
            <returns>A deep copy of this SparsePLSDACrossValidation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SparsePLSDACrossValidation.DoCrossValidation(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Factor,System.Int32,System.Int32[])">
            <summary>
            Perform cross validation on the given data using the existing
            calculator and subset generator.
            </summary>
            <param name="X">Predictor data. Matrix is number of samples rows by number
            of independent variables columns.</param>
            <param name="yFactor">Response data. Matrix is number of samples rows by number
            of dependent variables columns.</param>
            <param name="numComponents">Number of components (a.k.a. latent vectors) to
            use in the PLS calculation.</param>
            <param name="keepX">Vector with length equal to the number of components, the
            number of variables to keep in the X loadings for each component. The 
            default is to keep all variables.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ProcessCapability">
            <summary>
            Computes the process capability parameters Cp, Cpm, Cp for normally distributed data.  If the data
            is not normal the Box-Cox transform can be used.
            </summary>
            <remarks>
            This standard deviation is computed using the mean of the ranges method.  This
            estimate is refered to the "UWAVE-R" method in the R qcc package.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ProcessCapability.c4_">
            <summary>
            c4 table for sample size from 2 to 10
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ProcessCapability.d2_">
            <summary>
            D2 table for sample size from 1 to 25.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ProcessCapability.d2s_">
            <summary>
             D2_star table for sample size from 2 to 14 to 15 and over.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProcessCapability.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Computes the process capability parameters Cp, Cpm, Cp for normally distributed data.
            </summary>
            <param name="data">Input measurements.</param>
            <param name="subgroupSize">Size of subgroups.  The data must be laid out in contiguous subgroups of equal size.</param>
            <param name="UpperSpecLimit">Upper specification limit.</param>
            <param name="LowerSpecLimit">Lower specification limit.</param>
            <param name="Target">Control target.</param>
            <exception cref="T:System.ArgumentException">The input data must have a non-zero length.</exception>
            <exception cref="T:System.ArgumentException">The subgroup size must be greater than zero.</exception>
            <exception cref="T:System.ArgumentException">The upper spec limit must be greater than the lower spec limit.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProcessCapability.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Int32,System.Double,System.Double)">
            <summary>
            Computes the process capability parameters Cp, Cpm, Cp for normally distributed data.  Target is taken to be the 
            mean the upper and lower specification limits.
            </summary>
            <param name="data">Input measurements.</param>
            <param name="subgroupSize">Size of subgroups.  The data needs to be laid out in contiguous subgroups of equal size.</param>
            <param name="UpperSpecLimit">Upper control limit.</param>
            <param name="LowerSpecLimit">Lower control limit.</param>
            <exception cref="T:System.ArgumentException">The input data must have a non-zero length.</exception>
            <exception cref="T:System.ArgumentException">The subgroup size must be greater than zero.</exception>
            <exception cref="T:System.ArgumentException">The upper spec limit must be greater than the lower spec limit.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ProcessCapability.CI95">
            <summary>
            Confidence interval that 95% of the time the process mean will reside within this given interval.  
            </summary>
            <remarks>
            This CI95 is based on the t-distribution (t-score) when there are 30 or fewer samples.  Otherwise
            the normal distribution is used (z-score).
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ProcessCapability.Cp">
            <summary>
            Process capability.
            </summary>
            <remarks>
            Computed using the standard deviation estimate, Sigma = R_bar / d2.  Where 
            R_bar is the mean of the ranges.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ProcessCapability.Cpk">
            <summary>
            Process capability index.
            </summary>
            <remarks>
            Computed using the standard deviation estimate, Sigma = R_bar / d2.  Where 
            R_bar is the mean of the ranges.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ProcessCapability.Cpm">
            <summary>
            Taguchi capability index.
            </summary>
            <remarks>
            Computed using the standard deviation estimate, Sigma = R_bar / d2.  Where 
            R_bar is the mean of the ranges.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ProcessCapability.ProcessSigma">
            <summary>
            Estimate of the process standard deviations used to compute Cp, Cpk, and Cpm.
            </summary>
            <remarks>
            The standard deviation is estimated using the unweighted averages of the 
            subgroup ranges.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ProcessCapability.IQR">
            <summary>
            Interquartile range using the Minitab interpolation method.
            </summary>
            <remarks>There are many different ways to compute the inter-quartile range.  The original Tukey method, Excel's method
            by Freund and Perles, Moore and McCabe's method, and Minitab's.  This IQR method returns values that will match
            the Minitab method.  The Minitab method uses interpolation to find the upper and lower quartiles before returning 
            the IQR and therefore the IQR is computed from points that may not exist in the data set as has traditionally
            been the case (before we had computers).
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProcessCapability.EstimateProcessSigma">
            <summary>
            Estimates the standard deviation using the unweighted averages of the subgroup ranges.
            </summary>
            <remarks>
            Assumes data normality and that all subgroups have the same sample size.
            </remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ControlLimits">
            <summary>
            Emum specifics types of control limits.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ControlLimits.DoubledEnded">
            <summary>
            Includes both upper and lower control limits.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ControlLimits.LowerOnly">
            <summary>
            Includes on lower control limits.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ControlLimits.UpperOnly">
            <summary>
            Includes only upper control limits.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ProcessPerformance">
            <summary>
            Computes process performance parameters Pp and Ppk for normally distributed data.  If the data
            is not normal the Box-Cox transform can be used.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProcessPerformance.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double)">
            <summary>
            Compute process performance parameters for normally distributed data.  
            </summary>
            <param name="data">Input measurements.</param>
            <param name="UpperSpecLimit">Upper specification limit.</param>
            <param name="LowerSpecLimit">Lower specification limit.</param>
            <exception cref="T:System.ArgumentException">The upper spec limit must be greater than the lower spec limit.</exception>
            <exception cref="T:System.ArgumentException">The input data must have a non-zero length.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ProcessPerformance.Ppk">
            <summary>
            Process performance index, a measure of long-term process performance.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ProcessPerformance.Pp">
            <summary>
            Process performance, a measure of long-term process performance.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ZBenchNormal">
            <summary>
            Computes the ZBench for normally distributed data, percent defective, and the parts per million defective. 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ZBenchNormal.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double)">
            <summary>
            Computes the ZBench for normally distributed data, percent defective, and the parts per million defective. 
            </summary>
            <param name="data">Input measurements.</param>
            <param name="UpperSpecLimit">Upper specification limit.</param>
            <param name="LowerSpecLimit">Lower specification limit.</param>
            <exception cref="T:System.ArgumentException">The upper spec limit must be greater than the lower spec limit.</exception>
            <exception cref="T:System.ArgumentException">The input data must have a non-zero length.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ZBenchNormal.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.ControlLimits,System.Double)">
            <summary>
            Computes the ZBench for normally distributed data, with only a single-end limit specified, percent defective, and 
            the parts per million defective. 
            </summary>
            <param name="data">Input measurements.</param>
            <param name="limitSide">Control limit side.</param>
            <param name="specLimit">Single-ended control limit, either the upper or the lower.</param>
            <exception cref="T:System.ArgumentException">The input data must have a non-zero length.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ZBenchNormal.PercentDefective">
            <summary>
            Percent defective.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ZBenchNormal.PPMDefective">
            <summary>
            Parts per million defective.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ZBenchNormal.ZBench">
            <summary>
            ZBench, dependent on the control limits specified.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.AnovaRegressionFactorParam">
            <summary>
            Class AnovaRegressionFactorParam provides information about a regression
            parameter associated with a specific level of an ANOVA factor.
            </summary>
            <remarks>
            Instances of class AnovaRegressionFactorParam are returned by properties
            and member functions on class TwoWayAnova. They cannot be constructed
            independently.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.factorName_">
            <summary>
            Regresssion parameter is a dummy variable for this factor.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.factorLevel_">
            <summary>
            Regression parameter is a dummy variable for this level.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.encoding_">
            <summary>
            The value of the variable encoding for this level of this factor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.#ctor">
            <summary>
            Used by Clone method.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.#ctor(CenterSpace.NMath.Stats.LinearRegression,System.Int32,System.Double,System.String,System.Object,System.Double)">
            <summary>
            Construct an ANOVA regression factor parameter object from the given
            ANOVA regression and factor information.
            </summary>
            <param name="lr">The linear regression formed to compute the ANOVA.</param>
            <param name="paramIndex">The index of the parameter among all regression
            parameters.</param>
            <param name="sumOfSquares">The sum of squares for the regression parameters.</param>
            <param name="factor">The name of the ANOVA factor which this regresssion parameter
            is associated with.</param>
            <param name="factorLevel">The level of the ANOVA factor which this regresssion parameter
            is associated with.</param>
            <param name="encoding">The encoding for this factor level.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.#ctor(System.Int32,System.String,System.Object,System.Double)">
            <summary>
            Construct an ANOVA regression factor parameter object from the given
            ANOVA regression and factor information.
            </summary>
            <param name="paramIndex">The index of the parameter among all regression
            parameters.</param>
            <param name="factor">The name of the ANOVA factor which this regresssion parameter
            is associated with.</param>
            <param name="factorLevel">The level of the ANOVA factor which this regresssion parameter
            is associated with.</param>
            <param name="encoding">The encoding for this factor level.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.#ctor(System.String,System.Object,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Construct an Anova factor regression paramater object with the given values.
            </summary>
            <param name="factor">The name of the ANOVA factor which this regresssion parameter
            is associated with.</param>
            <param name="factorLevel">The level of the ANOVA factor which this regresssion parameter
            is associated with.</param>
            <param name="parameterIndex">Index of this parameter in the linear regresssion</param>
            <param name="parameterValue">Parameter value.</param>
            <param name="parameterVariance">Parameter variance.</param>
            <param name="modelVariance">Model variance.</param>
            <param name="degreesOfFreedom">Degrees of freedom.</param>
            <param name="beta">Beta value for the parameter.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.FactorName">
            <summary>
            Gets the name of the ANOVA factor encoded by this dummy variable.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.FactorLevel">
            <summary>
            Gets the level of the ANOVA factor encoded by this dummy variable.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.Encoding">
            <summary>
            Gets the encoding for this dummy variable.
            </summary>
            <remarks>
            The encoding is the value the dummy variable assumes when an
            ANOVA observation is made with this factor at this level.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.Equals(System.Object)">
            <summary>
            Tests for equality of this factor regression parameter and another
            factor regression parameter.
            </summary>
            <param name="other">Another factor regression parameter.</param>
            <returns>Returns <c>true</c> if both paramters have the same factor name
            and level; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.GetHashCode">
            <summary>
            Returns an integer hash code for this factor regression parameter.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.Clone">
            <summary>
            Creates a deep copy of this AnovaRegressionFactorParam.
            </summary>
            <returns>A deep copy of this AnovaRegressionFactorParam.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionFactorParam.ToString">
            <summary>
            Construct a string representation of this parameter.
            </summary>
            <returns>A string representation of this parameter.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam">
            <summary>
            Class AnovaRegressionInteractionParam provides information about a
            regression parameter associated with the interaction between the
            level of one ANOVA factor and the level of another ANOVA factor.
            </summary>
            <remarks>
            Instances of class AnovaRegressionInteractionParam are returned by properties
            and member functions on class TwoWayAnova. They cannot be constructed
            independently.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam.#ctor">
            <summary>
            Used by Clone method.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam.FactorAName">
            <summary>
            Gets the name of the first factor in the interaction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam.FactorALevel">
            <summary>
            Gets the level of the first factor in the interaction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam.FactorBName">
            <summary>
            Gets the name of the second factor in the interaction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam.FactorBLevel">
            <summary>
            Gets the level of the second factor in the interaction.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam.Equals(System.Object)">
            <summary>
            Tests for equality of the interaction regression parameter and another
            interaction regression parameter. Two interaction regression parameters
            are equal if they have the same factor names and level values.
            </summary>
            <param name="obj">Another interaction regression parameter.</param>
            <returns><c>true</c> if both parameters have the same factor names and
            levels.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam.GetHashCode">
            <summary>
            Returns an integer has code for this interaction regression parameter.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam.Clone">
            <summary>
            Creates a deep copy of this AnovaRegressionInteractionParam.
            </summary>
            <returns>A deep copy of this AnovaRegressionInteractionParam.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionInteractionParam.ToString">
            <summary>
            Construct a string representation of this parameters.
            </summary>
            <returns>String representation of this parameter.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.AnovaRegressionParameter">
            <summary>
            Class AnovaRegressionParameter provides information about a 
            regression parameter used to perform an analysis of variance by class
            TwoWayAnova.
            </summary>
            <remarks>
            Instances of class AnovaRegressionParameter are returned by properties
            and member functions on class TwoWayAnova. They cannot be constructed
            independently.
            <br/>
            AnovaRegressionParameter derives from LinearRegressionParameter,
            which provides properties for computing the t statistic, p-value for
            the t statistic, and confidence intervals for individual regression
            parameters.
            <br/>
            AnovaRegressionParameter is the base class for AnovaRegressionFactorParam
            and AnovaRegressionInteractionParam.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.AnovaRegressionParameter.sumOfSquares_">
            <summary>
            Sum of squares.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionParameter.#ctor">
            <summary>
            Used by Clone method.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionParameter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Construct an Anova regression paramater object with the given values.
            </summary>
            <param name="parameterIndex">Index of this parameter in the linear regresssion</param>
            <param name="parameterValue">Parameter value.</param>
            <param name="parameterVariance">Parameter variance.</param>
            <param name="modelVariance">Model variance.</param>
            <param name="degreesOfFreedom">Degrees of freedom.</param>
            <param name="beta">Beta value for the parameter.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionParameter.#ctor(CenterSpace.NMath.Stats.LinearRegression,System.Int32,System.Double)">
            <summary>
            Construct an ANOVA regression parameter object from the given linear regression
            and sum of squares.
            </summary>
            <param name="lr">The linear regression formed for the ANOVA.</param>
            <param name="paramIndex">The index of the parameter among all regression
            paramters in the ANOVA regression.</param>
            <param name="sumOfSquares">The sum of squares associated with the regression
            parameter.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.AnovaRegressionParameter.SumOfSquares">
            <summary>
            Gets the sum of squares due to this parameter.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionParameter.Clone">
            <summary>
            Creates a deep copy of this AnovaRegressionParameter.
            </summary>
            <returns>A deep copy of this AnovaRegressionParameter.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.AnovaRegressionSubjectParam">
            <summary>
            Class AnovaRegressionSubjectParam provides information about a regression
            parameter associated with a subject dummy regression variable.
            </summary>
            <remarks>
            Instances of class AnovaRegressionSubjectParam are returned by properties
            and member functions on class TwoWayRanova and TwoWayRanovaTwo. They cannot
            be constructed independently.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionSubjectParam.#ctor">
            <summary>
            Used by Clone method.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.AnovaRegressionSubjectParam.SubjectNumber">
            <summary>
            Gets the subject number for the regression subject dummy variable. Subject
            numbering starts at zero.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionSubjectParam.Equals(System.Object)">
            <summary>
            Tests for equality of this factor regression parameter and another
            factor regression parameter.
            </summary>
            <param name="other">Another factor regression parameter.</param>
            <returns>Returns <c>true</c> if both paramters have the same factor name
            and level; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionSubjectParam.GetHashCode">
            <summary>
            Returns an integer hash code for this factor regression parameter.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionSubjectParam.Clone">
            <summary>
            Creates a deep copy of this AnovaRegressionSubjectParam.
            </summary>
            <returns>A deep copy of this AnovaRegressionSubjectParam.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.AnovaRegressionSubjectParam.ToString">
            <summary>
            The regression parameter statistics as a string.
            </summary>
            <returns>String representation of the regression parameter.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.WeightedRegressionAnova">
            <summary>
            Class for performing an Analysis Of Variance on a weighted linear least
            squares fit.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeightedRegressionAnova.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Construct a linear model ANOVA from a weighted least squares fit.
            </summary>
            <param name="regressionMatrix">Regression data.</param>
            <param name="parameters">The calculated model parameters.</param>
            <param name="observations">The observations.</param>
            <param name="weights">The weights. It is assumed
            that the parameters minimize the weighted least squares problem:
            <c>||(D^1/2)*(Ax - b)||</c>
            where A is the regression matrix, b is the vector of observations, and D is a 
            diagonal matrix whose diagonal consists of the <c>weights</c>.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.WeightedResiduals">
            <summary>
            Returns the vector of weighted residuals.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.RegressionSumOfSquares">
            <summary>
            Gets the regression sum of squares.
            </summary>
            <remarks>
            This quantity indicates the amount of variability explained by the
            model. It is the sum of the squares of the difference between the
            values predicted by the model and the mean.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.ResidualSumOfSquares">
            <summary>
            Gets the residual sum of squares.
            </summary>
            <remarks>
            This is the sum of the squares of the differences between the predicted and
            actual observations.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.ModelDegreesOfFreedom">
            <summary>
            Gets the number of degrees of freedom for the model.
            </summary>
            <remarks>
            This equal to the number of predictors in the model.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.ErrorDegreesOfFreedom">
            <summary>
            Gets the number of degrees of freedom for the model error.
            </summary>
            <remarks>
            This is equal to the number of observations minus the number of model 
            parameters.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.RSquared">
            <summary>
            Gets the coefficient of determination.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.AdjustedRsquared">
            <summary>
            Gets the adjusted coefficient of determination.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.MeanSquaredResidual">
            <summary>
            Gets the mean squared residual.
            </summary>
            <remarks>
            This is the equal to the residual sum of squares divided by the
            error degrees of freedom (equals the number of observations
            minus the number of model parameters).
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.MeanSquaredRegression">
            <summary>
            Gets the mean squared for the regression.
            </summary>
            <remarks>
            This is equal to the regresssion sum of squares divided by the
            model degrees of freedom (equals number of predictors in the model).
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.FStatistic">
            <summary>
            Gets the overall <i>F</i> statistic for the model.
            </summary>
            <remarks>
            This is equal to the ratio of the mean squared for the regression to the
            mean squared residual.
            <br/>
            This is the statistic for a hypothesis test where the null hypothesis is
            that all the parameters are equal to 0 and the alternative hypothesis is
            that at least one parameter is nonzero.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.FStatisticPValue">
            <summary>
            Gets the p-value for the <i>F</i> statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.ParameterEstimatesAvailable">
            <summary>
            Check if parameter estimats are available through the <c>ParameterEstimates</c> property.
            Parameter variance is undefined in the regression matrix is rank deficient. In this
            case the parameter estimates property will throw an exception if accessed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeightedRegressionAnova.ParameterEstimates">
            <summary>
            Gets an array of parameter objects which may be used to perform hypothesis tests on
            individual parameters in the model.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if the parameter statistics are not available.
            This will be the case if the regression matrix is not of full rank. One should
            check the <c>ParameterEstimatesAvailable</c> property if in doubt.</exception>"
        </member>
        <member name="T:CenterSpace.NMath.Stats.BetaDistribution">
            <summary>
            Class BetaDistribution represents the beta probability distribution.
            </summary>
            <remarks>Beta distributions are nonzero only on the interval <c>(0 1)</c>.
            Beta distributions have two free parameters, usually labelled alpha
            and beta.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BetaDistribution.#ctor">
            <summary>
            Default constructor. Constructs a BetaDistribution instance with 
            alpha and beta equal to 1.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BetaDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a BetaDistribution instance with the given alpha and beta.
            </summary>
            <param name="alpha">The alpha shape parameter.</param>
            <param name="beta">The beta shape parameter.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BetaDistribution.Alpha">
            <summary>
            Gets and sets the alpha shape parameter.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if set to a non-positive value.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BetaDistribution.Beta">
            <summary>
            Gets and sets the beta shape parameter.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if set to a non-positive value.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BetaDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BetaDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <remarks>The variance of the distribution is the standard deviation squared.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BetaDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
            <remarks>
            The skewness is the third central moment divided by the cube of 
            the standard deviation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BetaDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
            <remarks>
            The kurtosis is the fourth centeral moment divided by the
            fouth power of the standard deviation normalized so that
            the kurtosis if the normal distribution is zero.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BetaDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BetaDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this normal density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BetaDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated a the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If <c>p</c> is greater than 1 or less than zero,
            Double.NaN (Not a Number) is returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BetaDistribution.Clone">
            <summary>
            Creates a deep copy of this BetaDistribution.
            </summary>
            <returns>A deep copy of this BetaDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BetaDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.BiasType">
            <summary>
            Enumeration for specifying a biased or unbiased estimator.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.BiasType.Biased">
            <summary>
            Specifies a biased estimator as in the case of a population.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.BiasType.Unbiased">
            <summary>
            Specifies an unbiased estimator as in the case of a sample.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.BinomialDistribution">
            <summary>
            Class BinomialDistribution represents the discrete probability distribution of obtaining
            exactly <c>n</c> successes in <c>N</c> trials where the probability of success on each
            trial is <c>P</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BinomialDistribution.#ctor">
            <summary>
            Default constructor. Constructs a BinomialDistribution instance with
            2 trials, and a 0.5 probability of success.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BinomialDistribution.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a BinomialDistribution instance with the given number of
            trials, and the given probability of success on each trial.
            </summary>
            <param name="n">The total number of trials.</param>
            <param name="p">The probability of success on each trial.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the number of trials is &lt;0, or the probability of success
            is &lt;0.0 or &gt;1.0.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BinomialDistribution.N">
            <summary>
            Gets and sets the total number of trials.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if set to a negative value.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BinomialDistribution.P">
            <summary>
            Gets and sets the probability of success on each trial.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if set to a value less than 0, or greater than 1.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BinomialDistribution.Mean">
            <summary>
            Gets the mean of this distribution.
            </summary>
            <remarks>
            The mean of the binomial distribution with parameters <c>N</c> and <c>P</c>
            is <c>NP</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BinomialDistribution.Variance">
            <summary>
            Gets the variance of this distribution.
            </summary>
            The variance of the binomial distribution with parameters <c>N</c> and <c>P</c>
            is <c>NP(1 - P)</c>.
        </member>
        <member name="P:CenterSpace.NMath.Stats.BinomialDistribution.Skewness">
            <summary>
            Gets the skewness coefficient, a measure of the degree of asymmetry of 
            this distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.BinomialDistribution.Kurtosis">
            <summary>
            Gets the kurtosis coefficient, a measure of the degree of peakedness of
            this distribution.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BinomialDistribution.PDF(System.Double)">
            <summary>
            Returns the probability distribution function evaluated at the given value.
            </summary>
            <param name="x">The number of successes.</param>
            <returns>The probability of obtaining exactly <c>x</c> successes.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the number of success is set to a negative value, or to a value 
            greater than <c>N</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BinomialDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative distribution function evaluated at the given value.
            </summary>
            <param name="x">The number of successes.</param>
            <returns>
            The probability of obtaining <c>x</c> or fewer successes.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the number of success is set to a negative value, or to a value 
            greater than <c>N</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BinomialDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative distribution function evaluated at the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>
            The <c>x</c> for the cumulative distribution function corresponding to the given
            probability.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given probability is &lt;0.0 or &gt;1.0.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BinomialDistribution.Clone">
            <summary>
            Creates a deep copy of this BinomialDistribution.
            </summary>
            <returns>A deep copy of this BinomialDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BinomialDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ChiSquareDistribution">
            <summary>
            Class ChiSquareDistribution represents the chi-square probability distribution.
            </summary>
            <remarks>
            The chi-square distribution is a special case of the gamma distribution with
            <c>alpha = df/2</c> and <c>beta = 2</c>, where <c>df</c> is the degrees of 
            freedom.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ChiSquareDistribution.#ctor">
            <summary>
            Constructs a ChiSquareDistribution instance with 1 degree of freedom.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ChiSquareDistribution.#ctor(System.Double)">
            <summary>
            Constructs a ChiSquareDistribution instance with the given degrees
            of freedom.
            </summary>
            <param name="df">The degrees of freedom of the distribution.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ChiSquareDistribution.DegreesOfFreedom">
            <summary>
            Gets and sets the degrees of freedom of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ChiSquareDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ChiSquareDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <remarks>The variance of the distribution is the standard deviation squared.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ChiSquareDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
            <remarks>
            The skewness is the third central moment divided by the cube of 
            the standard deviation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ChiSquareDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
            <remarks>
            The kurtosis is the fourth centeral moment divided by the
            fouth power of the standard deviation normalized so that
            the kurtosis if the normal distribution is zero.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ChiSquareDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ChiSquareDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this normal density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ChiSquareDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated at a given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If <c>p</c> is greater than 1 or less than zero, returns <c>Double.NaN</c>
            (Not a Number).</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ChiSquareDistribution.Clone">
            <summary>
            Creates a deep copy of this ChiSquareDistribution.
            </summary>
            <returns>A deep copy of this ChiSquareDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ChiSquareDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ClusterAnalysis">
            <summary>
            Class ClusterAnalysis perform hierarchical cluster analysis.
            </summary>
            <remarks>
            Instances of class ClusterAnalysis are constructed from a matrix of
            data, where each row in the matrix represents an object to be clustered.
            Initially, each object is assigned to its own singleton cluster and
            then the analysis proceeds iteratively, at each stage joining the two
            most similar clusters into a new cluster, continuing until there is one
            overall cluster. 
            <br/>
            Distances between objects are computed using a Distance.Function delegate.
            Delegates are provided as static variables on class Distance for
            euclidean, squared euclidean, city-block (Manhattan), maximum (Chebychev),
            and power distance functions. You can also create your own distance function
            delegate. Property <c>Distances</c> gets the vector of distances between
            all possible object pairs, computed using the current distance delegate.
            <br/>
            Distances between clusters of objects are computed using a Linkage.Function
            delegate. Delegates are provided as static variables on class Linkage
            for single, complete, unweighted average, weighted average, centroid, median,
            and Ward's linkage functions. Again, you can also create your own linkage
            function delegate. The <c>Linkages</c> property gets the complete hierarchical
            linkage tree, computed from <c>Distances</c> using the current linkage
            delegate.
            <br/>
            The <c>CutTree()</c> method constructs a set of clusters by cutting the
            hierarchical linkage tree either at the specified height, or into the
            specified number of clusters.
            </remarks>
            <example><code>
            // cluster 8 random vectors of length 3
            DoubleMatrix data = new DoubleMatrix( 8, 3, new RandGenUniform() );
            ClusterAnalysis ca = new ClusterAnalysis( data,
              Distance.SquaredEuclideanFunction, Linkage.CompleteFunction );
            Console.WriteLine( ca.Distances );
            Console.WriteLine( ca.Linkages );
            
            // cut linkage tree to form 3 clusters
            Console.WriteLine( ca.CutTree( 3 ) );
            
            // cut linkage tree at height of 0.75
            Console.WriteLine( ca.CutTree( 0.75 ) );
            </code></example>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ClusterAnalysis.n_">
            <summary>The total number of objects.</summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ClusterAnalysis.distances_">
            <summary>The distances between all object pairs.</summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ClusterAnalysis.linkages_">
            <summary>The complete heirarchical linkage tree.</summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ClusterAnalysis.cophenetic_">
            <summary>The cophenetic distances. Calculated on-demand and cached.</summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ClusterAnalysis.distanceFunction_">
            <summary>Distance metric delegate.</summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ClusterAnalysis.linkageFunction_">
            <summary>Linkage metric delegate.</summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.#ctor">
            <summary>
            Default constructor. Constructs an empty ClusterAnalysis instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a ClusterAnalysis instance from the given data, using the
            current default distance and linkage delegates.
            </summary>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object to
            be clustered.
            </param>
            <remarks>
            The default distance and linkage delegates are <c>Distance.EuclideanFunction</c>
            and <c>Linkage.SingleFunction</c>, unless changed  using the static
            <c>DefaultDistanceFunction</c> and <c>DefaultLinkageFunction</c> properties.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Distance.Function)">
            <summary>
            Constructs a ClusterAnalysis instance from the given data, 
            using the given distance delegates.
            </summary>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object to
            be clustered.
            </param>
            <param name="distanceFunction">
            A delegate for computing the distance between individual objects.
            </param>
            <remarks>Uses the current default linkage function.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Constructs a ClusterAnalysis instance from the given data, 
            using the given distance delegates.
            </summary>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object to
            be clustered.
            </param>
            <param name="linkageFunction">
            A delegate for computing the distance between clusters.
            </param>
            <remarks>Uses the current default distance function.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Distance.Function,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Constructs a ClusterAnalysis instance from the given data, 
            using the given distance and linkage delegates.
            </summary>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object to
            be clustered.
            </param>
            <param name="distanceFunction">
            A delegate for computing the distance between individual objects.
            </param>
            <param name="linkageFunction">
            A delegate for computing the distance between clusters.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.#ctor(CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Default constructor. Constructs a ClusterAnalysis instance from the
            given data, using the current default distance and linkage delegates.
            </summary>
            <param name="data">
            A data frame containing the data. Each row represents an object to
            be clustered. Non-numeric columns are ignored.
            </param>
            <remarks>
            The default distance and linkage delegates are <c>Distance.EuclideanFunction</c>
            and <c>Linkage.SingleFunction</c>, unless changed  using the static
            <c>DefaultDistanceFunction</c> and <c>DefaultLinkageFunction</c> properties.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.#ctor(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.Distance.Function)">
            <summary>
            Constructs a ClusterAnalysis instance from the given data, 
            using the given distance delegates.
            </summary>
            <param name="data">
            A data frame containing the data. Each row represents an object to
            be clustered. Non-numeric columns are ignored.
            </param>
            <param name="distanceFunction">
            A delegate for computing the distance between individual objects.
            </param>
            <remarks>Uses the current default linkage function.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.#ctor(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Constructs a ClusterAnalysis instance from the given data, 
            using the given distance delegates.
            </summary>
            <param name="data">
            A data frame containing the data. Each row represents an object to
            be clustered. Non-numeric columns are ignored.
            </param>
            <param name="linkageFunction">
            A delegate for computing the distance between clusters.
            </param>
            <remarks>Uses the current default distance function.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.#ctor(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.Distance.Function,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Constructs a ClusterAnalysis instance from the given data, 
            using the given distance and linkage delegates.
            </summary>
            <param name="data">
            A data frame containing the data. Each row represents an object to
            be clustered. Non-numeric columns are ignored.
            </param>
            <param name="distanceFunction">
            A delegate for computing the distance between individual objects.
            </param>
            <param name="linkageFunction">
            A delegate for computing the distance between clusters.
            </param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterAnalysis.DefaultDistanceFunction">
            <summary>
            Gets and sets the default distance delegate associated with
            ClusterAnalysis objects.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterAnalysis.DefaultLinkageFunction">
            <summary>
            Gets and sets the default linkage delegate associated with
            ClusterAnalysis objects.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterAnalysis.N">
            <summary>
            Gets the total number of objects.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterAnalysis.Distances">
            <summary>
            Gets the vector of distances between all possible object
            pairs, computed using the current distance delegate.
            </summary>
            <remarks>For <c>n</c> objects, the distance vector is of length
            <c>(n-1)(n/2)</c>, with distances arranged in the order:
            <code>
            (1,2), (1,3), ..., (1,n), (2,3), ..., (2,n), ..., ..., (n-1,n)
            </code>
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterAnalysis.Linkages">
            <summary>
            Gets the complete hierarchical linkage tree, computed from <c>Distances</c>
            using the current linkage delegate.
            </summary>
            <remarks>
            Returns an <c>(n-1) x 3</c> matrix containing the complete hierarchical
            linkage tree. At each level in the tree, Columns 1 and 2 contain the
            indices of the clusters linked to form the next cluster. Column 3 contains
            the distances between the clusters.
            <br/>
            Clusters <c>0</c> to <c>n-1</c> are the objects in the original dataset.
            Each newly formed cluster is assigned the next available index. For
            example, if there are five objects in the original data set, they are assigned
            to singleton clusters <c>0</c> to through <c>4</c>. The first new cluster
            formed by the linkage function is assigned index <c>5</c>. If cluster <c>5</c>
            appears later in the tree, it is being combined again into a still larger
            cluster.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterAnalysis.CopheneticDistances">
            <summary>
            Gets the vector of cophenetic distances between all possible object
            pairs.
            </summary>
            <remarks>
            The cophenetic distance between two objects is defined to be the
            intergroup distance when the objects are first combined into a single
            cluster in the linkage tree.
            <br/>
            The format is the same as the distance vector returned by <c>Distances</c>.
            <br/>
            The correlation between the original <c>Distances</c> and the
            <c>CopheneticDistances</c> is sometimes taken as a measure of appropriateness
            of a cluster analysis relative to the original data:
            <code>
            ClusterAnalysis ca = new ClusterAnalysis( data );
            double r = StatsFunctions.Correlation( ca.Distances, ca.CopheneticDistances );
            </code>
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterAnalysis.DistanceFunction">
            <summary>
            Gets and sets the distance measurement delegate used by this
            ClusterAnalysis instance to determine the distance between individual
            objects.
            </summary>
            <remarks>
            Setting the distance delegate has no effect until <c>Update()</c> is
            called with new data.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterAnalysis.LinkageFunction">
            <summary>
            Gets and sets the linkage measurement delegate used by this ClusterAnalysis
            instance to determine the distance between clusters.
            </summary>
            <remarks>
            Setting the linkage delegate has no effect until <c>Update()</c> is
            called with new data.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.Clone">
            <summary>
            Creates a deep copy of this cluster analysis.
            </summary>
            <returns>A deep copy of this cluster analysis.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.Update(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Clusters the given data, using the current <c>Distance</c> and
            <c>Linkage</c> delegates.
            </summary>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object
            to be clustered.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.Update(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Distance.Function)">
            <summary>
            Clusters the given data, using the given distance delegate and the
            current linkage delegate.
            </summary>
            <remarks>
            The <c>DistanceFunction</c> property on this object is set with
            the given distance delegate.
            </remarks>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object
            to be clustered.
            </param>
            <param name="distance">
            A delegate for computing the distance between individual objects.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.Update(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Clusters the given data, using the current distance delegate and the
            given linkage delegate.
            </summary>
            <remarks>
            The <c>LinkageFunction</c> property on this object is set with the given 
            linkage delegate.
            </remarks>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object
            to be clustered.
            </param>
            <param name="linkage">
            A delegate for computing the distance between clusters.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.Update(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Distance.Function,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Clusters the given data, using the given distance and linkage
            delegates.
            </summary>
            <remarks>
            <c>DistanceFunction</c> and <c>LinkageFunction</c> properties
            on this object are set with the given distance and linkage delegates.
            </remarks>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object
            to be clustered.
            </param>
            <param name="distance">
            A delegate for computing the distance between individual objects.
            </param>
            <param name="linkage">
            A delegate for computing the distance between clusters.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.Update(CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Clusters the given data, using the current <c>Distance</c> and
            <c>Linkage</c> delegates.
            </summary>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object
            to be clustered.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.Update(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.Distance.Function)">
            <summary>
            Clusters the given data, using the given distance delegate and the
            current linkage delegate.
            </summary>
            <remarks>
            The <c>DistanceFunction</c> property on this object is set with
            the given distance delegate.
            </remarks>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object
            to be clustered.
            </param>
            <param name="distance">
            A delegate for computing the distance between individual objects.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.Update(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Clusters the given data, using the current distance delegate and the
            given linkage delegate.
            </summary>
            <remarks>
            The <c>LinkageFunction</c> property on this object is set with the given 
            linkage delegate.
            </remarks>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object
            to be clustered.
            </param>
            <param name="linkage">
            A delegate for computing the distance between clusters.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.Update(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.Distance.Function,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Clusters the given data, using the given distance and linkage
            delegates.
            </summary>
            <remarks>
            <c>DistanceFunction</c> and <c>LinkageFunction</c> properties
            on this object are set with the given distance and linkage delegates.
            </remarks>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object
            to be clustered.
            </param>
            <param name="distance">
            A delegate for computing the distance between individual objects.
            </param>
            <param name="linkage">
            A delegate for computing the distance between clusters.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.CutTree(System.Int32)">
            <summary>
            Constructs the specified number of clusters from the hierarchical
            linkage tree.
            </summary>
            <param name="k">The number of clusters to form.</param>
            <returns>
            A ClusterSet object that identifies the cluster into which each
            object was grouped. Cluster numbers are arbitrary, and zero-based.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>k</c> is less than one or greater than <c>N</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.CutTree(System.Double)">
            <summary>
            Constructs a set of clusters by cutting the hierarchical
            linkage tree at the specified height.
            </summary>
            <param name="height">The height at which to cut the tree.</param>
            <returns>
            A ClusterSet object that identifies the cluster into which each
            object was grouped. Cluster numbers are arbitrary, and zero-based.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.GetDistances(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Computes the vector of distances between all possible object
            pairs, using the current distance delegate.
            </summary>
            <remarks>For <c>n</c> objects, the distance vector is of length
            <c>(n-1)(n/2)</c>, with distances arranged in the order:
            <code>
            (1,2), (1,3), ..., (1,n), (2,3), ..., (2,n), ..., ..., (n-1,n)
            </code>
            </remarks>
            <param name="data">
            A matrix of data. Each row in the matrix represents an object
            to be clustered.
            </param>
            <returns>
            The distances between all pairs of rows in <c>data</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterAnalysis.GetLinkages">
            <summary>
            Computes the complete hierarchical linkage tree, using the
            current distance vector and linkage delegate.
            </summary>
            <returns>
            An <c>(n-1) x 3</c> matrix containing the complete hierarchical
            linkage tree. At each level in the tree, Columns 1 and 2 contain
            the indices of the clusters linked to form the next cluster.
            Column 3 contains the distances between the clusters.
            </returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ClusterSet">
            <summary>
            Class ClusterSet represents a collection of objects assigned to a
            finite number of clusters.
            </summary>
            <remarks>
            Instances of class ClusterSet are returned by the <c>ClusterAnalysis.CutTree()</c>
            method and cannot be constructed independently.
            <br/>
            The <c>Clusters</c> property returns an array of integers that identifies
            the cluster into which each object was grouped. Cluster numbers are arbitrary,
            and range from <c>0</c> to <c>NumberOfClusters - 1</c>. The indexer gets
            the cluster to which a given object is assigned. The <c>Cluster()</c>
            method returns the objects assigned to a given cluster.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Update following deserialization
            </summary>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.#ctor">
            <summary>
            Used by Clone method.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterSet.Clusters">
            <summary>
            Gets an array of integers that identifies the cluster into
            which each object is grouped.
            </summary>
            <remarks>
            Cluster numbers are arbitrary, and range from <c>0</c> to
            <c>NumberOfClusters - 1</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterSet.N">
            <summary>
            Gets the number of objects clustered in this cluster set.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterSet.NumberOfClusters">
            <summary>
            Gets the number of clusters into which objects are grouped.
            </summary>
            <remarks>
            Objects in a cluster set are grouped into clusters <c>0</c> to
            <c>NumberOfClusters - 1</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ClusterSet.Item(System.Int32)">
            <summary>
            Gets the cluster to which the given object is assigned.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">
            Thrown if the given index is less than zero or less than or equal
            to <c>N</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.Clone">
            <summary>
            Creates a deep copy of this cluster set.
            </summary>
            <returns>A deep copy of this cluster set.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.Equals(System.Object)">
            <summary>
            Tests for equality of this cluster set and another. Two cluster sets
            are equal if they have the same number of objects and all objects are
            assigned to the same clusters.
            </summary>
            <param name="o">Another cluster set.</param>
            <returns>
            <c>True</c> if the cluster sets have the same number of objects and
            all objects are assigned to the same clusters; otherwise, <c>false</c>.
            Returns <c>false</c> if the passed object is <c>null</c>, or is not a
            ClusterSet.
             </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.GetEnumerator">
            <summary>
            Creates an IEnumerator out of the clusters in this set.
            </summary>
            <returns>An IEnumerator of <c>this.Clusters</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.GetHashCode">
            <summary>
            Returns an integer hash code for this cluster set.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.Cluster(System.Int32)">
            <summary>
            Returns the objects assigned to a given cluster.
            </summary>
            <param name="clusterNum">A cluster number.</param>
            <returns>
            An array of integers indentifying the objects assigned to the given
            cluster.
            <br/>
            The result is calculated on the fly from <c>this.Clusters</c>, so for best
            performance care should be taken to avoid unnecessary calls to this function.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.ToString">
            <summary>
            Returns a formatted string representation of this cluster set.
            </summary>
            <returns>A formatted string representation <c>this.Clusters</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.op_Implicit(CenterSpace.NMath.Stats.ClusterSet)~System.Int32[]">
            <summary>
            Implicitly converts a cluster set into an array of integers. 
            </summary>
            <param name="clusters">A cluster set.</param>
            <returns>An array of integers.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.op_Equality(CenterSpace.NMath.Stats.ClusterSet,CenterSpace.NMath.Stats.ClusterSet)">
            <summary>
            Tests for equality of two cluster sets. Two clusters sets are equal
            if they have the same number of objects and all objects are assigned to
            the same clusters.
            </summary>
            <param name="x">The left-hand cluster set.</param>
            <param name="y">The right-hand cluster set.</param>
            <returns>
            <c>True</c> if the cluster sets have the same number of objects and all
            objects are assigned to the same clusters, or if both cluster sets are
            <c>null</c>; otherwise, <c>false</c>.
             </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ClusterSet.op_Inequality(CenterSpace.NMath.Stats.ClusterSet,CenterSpace.NMath.Stats.ClusterSet)">
            <summary>
            Tests for inequality of two cluster sets. Two cluster sets are unequal
            if they have different numbers of objects or the objects are assigned
            to different clusters.
            </summary>
            <param name="x">The left-hand cluster set.</param>
            <param name="y">The right-hand cluster set.</param>
            <returns>
            <c>True</c> if the two cluster sets have different numbers of objects or
            the objects are assigned to different clusters, or are not both <c>null</c>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ConnectivityMatrix">
            <summary>
            Class ConnectivityMatrix represents a symmetric matrix of double-precision
            floating point values.
            </summary>
            <remarks>
            The i, j entry represents the strength of connectivity between the variables i and j.
            <br/>
            A symmetric matrix is equal to its transpose. In other words, <c>A[i,j] = A[j,i]</c> for all
            elements <c>i,j</c> in <c>matrix A</c>.
            <br/>
            The matrix is stored in a vector column by column. For efficiency, only the
            upper triangle is stored. For example, the following 5 by 5 symmetric matrix:
            <pre>
                | a00 a01 a02 a03 a04 |
                | a10 a11 a12 a13 a14 |
            A = | a20 a21 a22 a23 a24 |
                | a30 a31 a32 a33 a34 |
                | a40 a41 a42 a43 a44 |
            </pre>   
            is stored in a data vector <c>v</c> as:
            <pre>
            v = [a00 a01 a11 a02 a12 a22 a03 a13 a23 a33 a04 a14 a24 a34 a44 ] 
            </pre>    
            In general, <c>A[i,j] = v[j(j+1)/2+i], i&lt;=j  v[i(i+1)/2+j], j&lt;i</c>
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ConnectivityMatrix.DEFAULT_LABEL_FORMAT">
            <summary>
            Default label format for the items represented in a ConnectivityMatrix
            instance. If the format string contains the symbol '{0}' it will be
            replaced by the items zero-based index.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ConnectivityMatrix.labels_">
            <summary>
            Lables for the items being connected.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.#ctor(System.Int32)">
            <summary>
            Constructs a ConnectivityMatrix instance with the specified size.
            </summary>
            <remarks>
            Results in an <c>order x order</c> matrix. All elements are initialized to zero.
            </remarks>
            <param name="order">The size of the the square matrix (<c>order x order</c>).</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a ConnectivityMatrix instance with the specified number of
            items and lables for those items.
            </summary>
            <param name="order">The number of items. the resulting matrix will be of
            dimension <c>order x order</c>.</param>
            <param name="labels">Item labels. The ith item will be associated with the
            ith label.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.#ctor(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a ConnectivityMatrix instance using the data in the
            given vector.
            </summary>
            <remarks>
            The data vector must be formatted as described in the class summary,
            and must have a length that can be made into a square symmetric matrix. The
            resultant matrix references the same data as the vector.
            </remarks>
            <param name="data">The matrix data.</param>
            <exception cref="T:CenterSpace.NMath.Core.MatrixNotSquareException">
            Thrown if the given vector has a length that cannot be made into a square
            symmetric matrix.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a ConnectivityMatrix instance from the specified data
            and lables for those items.
            </summary>
            <param name="data">The matrix data. See class description for format.</param>
            <param name="labels">Item labels. The ith item will be associated with the
            ith label.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Constructs a ConnectivityMatrix instance with the specified 
            size, and using the data in the given vector.
            </summary>
            <remarks>
            The data vector must be formatted as described in the class summary. The
            resultant matrix references the same data as the vector.  This
            constructor assumes that the order supplied is correct.
            </remarks>
            <param name="data">The matrix data.</param>
            <param name="order">The size of the square matrix (<c>order x order</c>).</param>
            <exception cref="T:CenterSpace.NMath.Core.MatrixNotSquareException">
            Thrown if the given vector is not large enough to fill an <c>order x order</c> square
            symmetric matrix.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a ConnectivityMatrix instance from the specified data
            and lables for those items.
            </summary>
            <param name="data">The matrix data. See class description for format.</param>
            <param name="order">The size of the square matrix (<c>order x order</c>).</param>
            <param name="labels">Item labels. The ith item will be associated with the
            ith label.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a square ConnectivityMatrix instance by extracting the upper 
            triangular part of a square general matrix.
            </summary>
            <remarks>
            If you want a symmetric matrix based on the <c>lower</c> triangular portion
            of the general matrix then transpose it before calling this method.
            </remarks>
            <param name="A">A square general matrix.</param>
            <exception cref="T:CenterSpace.NMath.Core.MatrixNotSquareException">
            Thrown if the given matrix is not square.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a square ConnectivityMatrix instance by extracting the upper 
            triangular part of a square general matrix.
            </summary>
            <remarks>
            If you want a symmetric matrix based on the <c>lower</c> triangular portion
            of the general matrix then transpose it before calling this method.
            </remarks>
            <param name="A">A square general matrix.</param>
            <param name="labels">Item labels. The ith item will be associated with the
            ith label.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Int32,System.Boolean)">
            <summary>
            Constructs a <c>ConnectivityMatrix</c> instance from the given
            data.
            </summary>
            <param name="data">The column by column upper triangular part of the
            matrix. See class description for format.</param>
            <param name="order">The order of the matrix.</param>
            <param name="check">Don't check the data.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ConnectivityMatrix.Labels">
            <summary>
            Gets and sets the labels for the rows/columns of the connectivity matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ConnectivityMatrix.NumberOfLabels">
            <summary>
            Gets the number of row/column labels.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.Clone">
            <summary>
            Constructs a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.Equals(System.Object)">
            <summary>
            Tests for equality of this connectivity matrix and another 
            connectivity matrix.
            Two connectivity matrices are equal if they have the same dimensions
            and all values are equal.
            </summary>
            <param name="o">Another connectivity matrix.</param>
            <returns><c>True</c> if the connectivity matrices are of the same order
            and contain the same values; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.GetHashCode">
            <summary>
            Computes hash code.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.SetLabels(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the labels to the input values filling in with default values
            if there order is greater than the number of input labels.
            </summary>
            <param name="labels">Labels.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Equality(CenterSpace.NMath.Stats.ConnectivityMatrix,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Tests for equality of two connectivity matrices. Two matrices are equal if they
            have the same order and all values are equal.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="B">A connectivity matrix.</param>
            <returns><c>True</c> if the matrices have the same order and all values are
            equal.</returns>
            <remarks>The comparison of the values is done using <c>operator==</c> for
            doubles. Therefore, the values of the matrices must be exactly equal for
            this method to return <c>true</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Inequality(CenterSpace.NMath.Stats.ConnectivityMatrix,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Tests for inequality of two connectivity matrices. Two matrices are equal if they
            have the same order and all values are equal.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="B">A connectivity matrix.</param>
            <returns><c>True</c> if the matrices have a different order, or
            have different values; otherwise, <c>false</c>.</returns>
            <remarks>The comparison of the values is done using <c>operator==</c> for
            doubles. Therefore, the values of the matrices must be exactly equal for
            this method to return <c>false</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_UnaryPlus(CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Unary + operator. Just returns the input matrix.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <returns>The input matrix.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_UnaryNegation(CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Negation operator.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <returns>A new connectivity matrix <c>B</c> where <c>B[i,j] = -A[i,j]</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Increment(CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Increments each element of the given matrix.
            </summary>
            <param name="A">A matrix.</param>
            <returns>The input matrix with each of its elements incremented.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Decrement(CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Decrements each element of the given matrix.
            </summary>
            <param name="A">A matrix.</param>
            <returns>The input matrix with each of its elements decremented.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Addition(CenterSpace.NMath.Stats.ConnectivityMatrix,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Adds two connectivity matrices.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="B">A connectivity matrix.</param>
            <returns>A connectivity matrix <c>C</c> where <c>C[i,j] = A[i,j] + B[i,j]</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the two matrices do
            not have the same order.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Addition(CenterSpace.NMath.Stats.ConnectivityMatrix,System.Double)">
            <summary>
            Adds a connectivity matrix and a scalar.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="s">A scalar.</param>
            <returns>A connectivity matrix <c>B</c> where <c>B[i,j] = A[i,j] + s</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Addition(System.Double,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Adds a scalar and a connectivity matrix.
            </summary>
            <param name="s">A scalar.</param>
            <param name="A">A connectivity matrix.</param>
            <returns>A connectivity matrix <c>B</c> where <c>B[i,j] = s + A[i,j]</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Subtraction(CenterSpace.NMath.Stats.ConnectivityMatrix,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Subtracts one connectivity matrix from another.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="B">A connectivity matrix.</param>
            <returns>A connectivity matrix <c>C</c> where <c>C[i,j] = A[i,j] - B[i,j]</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the two matrices do
            not have the same order.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Subtraction(CenterSpace.NMath.Stats.ConnectivityMatrix,System.Double)">
            <summary>
            Subtracts a scalar from a connectivity matrix.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="s">A scalar.</param>
            <returns>A connectivity matrix <c>B</c> where <c>B[i,j] = A[i,j] - s</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Subtraction(System.Double,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Subtracts a connectivity matrix from a scalar.
            </summary>
            <param name="s">A scalar.</param>
            <param name="A">A connectivity matrix.</param>
            <returns>A connectivity matrix <c>B</c> where <c>B[i,j] = s - A[i,j]</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Multiply(CenterSpace.NMath.Stats.ConnectivityMatrix,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Multiply two lower connectivity matrices.
            Multiply two lower connectivity matrices.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="B">A connectivity matrix.</param>
            <returns>A connectivity matrix <c>C</c> where <c>C[i,j] = A[i,j] * B[i,j]</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the two matrices do
            not have the same order.</exception>
            <remarks>This is not the inner product of A and B.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Multiply(CenterSpace.NMath.Stats.ConnectivityMatrix,System.Double)">
            <summary>
            Multiply a connectivity matrix and a scalar.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="s">A scalar.</param>
            <returns>A connectivity matrix <c>B</c> where <c>B[i,j] = A[i,j] * s</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Multiply(System.Double,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Multiply a scalar and a connectivity matrix.
            </summary>
            <param name="s">A scalar.</param>
            <param name="A">A connectivity matrix.</param>
            <returns>A connectivity matrix <c>B</c> where <c>B[i,j] = s * A[i,j]</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Division(CenterSpace.NMath.Stats.ConnectivityMatrix,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Divide a connectivity matrix by another.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="B">A connectivity matrix.</param>
            <returns>A connectivity matrix <c>C</c> where <c>C[i,j] = A[i,j] / B[i,j]</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the two matrices do
            not have the same order.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Division(CenterSpace.NMath.Stats.ConnectivityMatrix,System.Double)">
            <summary>
            Divide a connectivity matrix by a scalar.
            </summary>
            <param name="A">A connectivity matrix.</param>
            <param name="s">A scalar.</param>
            <returns>A connectivity matrix <c>B</c> where <c>B[i,j] = A[i,j] / s</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ConnectivityMatrix.op_Division(System.Double,CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Divide a scalar by a connectivity matrix.
            </summary>
            <param name="s">A scalar.</param>
            <param name="A">A connectivity matrix.</param>
            <returns>A connectivity matrix <c>B</c> where <c>B[i,j] = s / A[i,j]</c>.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.CORegressionCalculation">
            <summary>
            Class CORegressionCalculation computes linear regression parameters by 
            the method of least squares using a complete orthogonal decomposition.
            </summary>
            <remarks>
            Class CORegressionCalculation finds the minimal norm solution to the
            overdetermined linear system:
            <code>Ax = b</code>
            That is, this class finds the vector <c>x</c> that minimizes the 2-norm
            of the residual vector <c>Ax - b</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.CORegressionCalculation.#ctor(System.Double)">
            <summary>
            Constructs a CORegressionCalculation instance with a given tolerance.
            </summary>
            <param name="tolerance">Tolerance used for computing numerical rank. Values
            with absolute less than <c>tolerance</c> are considered zero when
            computing the effective rank.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.CORegressionCalculation.#ctor">
            <summary>
            Constructs a CORegressionCalculation instance with a default tolerance of zero.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.CORegressionCalculation.RankAvailable">
            <summary>
            Gets a boolean value indicating whether or not the rank for the regression
            matrix is available.
            </summary>
            <remarks>
            For instances of CORegressionCalculation, this is always <c>true</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.CORegressionCalculation.Rank">
            <summary>
            Gets the rank of the regression matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.CORegressionCalculation.Tolerance">
            <summary>
            Gets and sets the tolerance used in computing the effective rank of
            the regression matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.CORegressionCalculation.XTXInvAvailable">
            <summary>
            Gets a boolean indicating whether or not the matrix formed by taking
            the inverse of the product of the transpose of the regression matrix
            with itself is avaialble as part of the decomposition.
            </summary>
            <remarks>If <c>X</c> is the regression matrix and <c>'</c>
            denotes matrix transposition, then this property is <c>true</c> if this
            calculation object can return the inverse of the matrix <c>X'X</c>.
            </remarks>
            <remarks>
            For instances of CORegressionCalculation, this is always <c>false</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.CORegressionCalculation.XTXInv">
            <summary>
            Gets the inverse of the matrix formed by taking the product of the 
            regression matrix with its transpose, if available.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Always thrown, because the matrix
            is not available from instances of CORegressionCalculation.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.CORegressionCalculation.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Calculates the parameters for a regression using a complete
            orthogonal decomposition of the regression matrix to solve the
            least squares problem.
            </summary>
            <param name="regressionMatrix">A regression matrix.</param>
            <param name="observations">A vector of observations.</param>
            <param name="dataCleansed">If true the regression matrix is guaranteed to contain no NaN or Infinity values.</param>
            <returns>The calculated model parameters.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length
            of the observation vector is not equal to the number of rows
            in the regression matrix.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.CORegressionCalculation.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the parameters for a regression using a complete
            orthogonal decomposition of the regression matrix to solve the
            least squares problem.
            </summary>
            <param name="regressionMatrix">A regression matrix.</param>
            <param name="observations">A vector of observations.</param>
            <returns>The calculated model parameters.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length
            of the observation vector is not equal to the number of rows
            in the regression matrix.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.CORegressionCalculation.Clone">
            <summary>
            Creates a deep copy of this CORegressionCalculation.
            </summary>
            <returns>A deep copy of this CORegressionCalculation.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DataFrame">
            <summary>
            Class DataFrame represents a two-dimensional data object consisting of 
            a list of columns of the same length.
            </summary>
            <remarks>
            Columns may contain difference types of data: numeric, string, boolean,
            generic, and so on. Methods are provided for appending, inserting, removing,
            sorting, and permuting rows and columns.
            <br/>
            Columns can be accessed by index or name. Rows can be accessed by index or 
            key. Column names and row keys do not need to be unique.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DataFrame.name_">
            <summary>
            The name of this data object.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DataFrame.creationDate_">
            <summary>
            The creation DateTime of this data object.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DataFrame.rowKeys_">
            <summary>
            List of row keys
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DataFrame.rowKeyHeader_">
            <summary>
            Heading for row keys
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DataFrame.columns_">
            <summary>
            List of columns
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor">
            <summary>
            Default constructor. Constructs an empty data frame.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(CenterSpace.NMath.Stats.DFColumn[])">
            <summary>
            Constructs a DataFrame instance from the given array of columns.
            </summary>
            <remarks>Row keys are set to nulls. Use <c>SetRowKeys()</c> to initialize.</remarks>
            <param name="columns">An array of columns.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(CenterSpace.NMath.Stats.DFColumn[],System.Collections.ICollection)">
            <summary>
            Constructs a DataFrame instance from the given array of columns
            and a collection of row keys.
            </summary>
            <param name="columns">An array of columns.</param>
            <param name="rowKeys">A collection of row keys.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.String[])">
            <summary>
            Constructs a DataFrame instance from the given matrix.
            </summary>
            <param name="A">A matrix of double precision floating point values.</param>
            <param name="colNames">An array of column names.</param>
            <remarks>Row keys are set to nulls. Use <c>SetRowKeys()</c> to initialize.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of column names
            does not equal the number of columns in the given matrix.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(System.Data.DataTable)">
            <summary>
            Constructs a DataFrame instance from the given DataTable.
            </summary>
            <param name="dt">A DataTable.</param>
            <remarks>The row keys are set to <c>rowIndex + 1</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(System.Data.DataTable,System.Object[])">
            <summary>
            Constructs a DataFrame instance from the given DataTable. Row keys are
            set to the given array of objects.
            </summary>
            <param name="dt">A DataTable.</param>
            <param name="rowKeys">An array of row key objects.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of keys does not match
            the number of rows.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Constructs a DataFrame instance from the given DataTable. Row keys are
            set to the values in the specified column.
            </summary>
            <param name="dt">A DataTable.</param>
            <param name="columnName">The name of the column containing row keys.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of keys does not match
            the number of rows.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(System.Data.DataTable,System.Int32)">
            <summary>
            Constructs a DataFrame instance from the given DataTable. Row keys are
            set to the values in the specified column.
            </summary>
            <param name="dt">A DataTable.</param>
            <param name="keyColumn">The index of the column containing row keys.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of keys does not match
            the number of rows.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(System.String)">
            <summary>
            Constructs a DataFrame instance from the given string.
            </summary>
            <param name="str">A formatted string representation of a data frame.</param>
            <remarks>
            The given string is assumed to contain column headers and row keys.
            Column data is assumed to be tab delimited.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Constructs a DataFrame instance from the given string.
            </summary>
            <param name="str">A formatted string representation of a data frame.</param>
            <param name="hasHeader">A boolean value indicating whether or not the string contains column headers.</param>
            <param name="hasRowKeys">A boolean value indicating whether or not the string contains row keys.</param>
            <param name="delimiter">The column delimiter.</param>
            <param name="parse">A boolean value indicating whether to parse the column types, or treat
            everything as string data.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.#ctor(CenterSpace.NMath.Stats.Table,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a DataFrame instance from a table.
            </summary>
            <param name="table">A table.</param>
            <param name="hasHeader">A boolean value indicating whether or not the table has a header.</param>
            <param name="hasRowKeys">A boolean value indicating whether or not the table has row keys.</param>
            <param name="parse">A boolean value indicating whether to parse the column types, or treat
            everything as string data.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Cols">
            <summary>
            Gets the number of columns in this data frame.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.ColumnNames">
            <summary>
            Gets an array of the column names in this data frame.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.ColumnHeaders">
            <summary>
            Gets and sets the array of column labels in this data frame.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown on set if the number of data frame column labels does not match the number of columns.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.CreateDate">
            <summary>
            Gets the creation datetime for this data object.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Name">
            <summary>
            Gets and sets the name for this data frame.
            </summary>
            <remarks>If a name has not been set for this data frame, get returns
            <c>this.Type</c>.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Rows">
            <summary>
            Gets the number of rows in this data frame.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.RowKeyHeader">
            <summary>
            Gets and sets the header for the row keys in this data frame.
            </summary>
            <remarks>Default row key header is "#".</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.RowKeys">
            <summary>
            Gets an object array of the row keys in this data frame.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.StringRowKeys">
            <summary>
            Gets a string array of the row keys in this data frame.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Type">
            <summary>
            Gets the type of this data object.
            </summary>
            <returns>Returns <c>CenterSpace.NMath.Stats.DataFrame</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(System.Int32)">
            <summary>
            Gets the column indicated by the given column index.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(System.String)">
            <summary>
            Gets the column indicated by the given column name.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(System.Object,System.String)">
            <summary>
            Gets and sets the element specified by the given row key and column name.
            </summary>
            <remarks>
            Column names and row keys may not be unique, so this indexer accesses
            and modifies the first matching element.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the data frame does not contain a row with the given key, or a
            column with the given name.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(System.Int32,System.Int32)">
            <summary>
            Gets and sets the element at the given row and column index.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(System.Int32,CenterSpace.NMath.Core.Slice)">
            <summary>
            Gets the subcolumn indicated by the given column index and row slice.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(System.Int32,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the subcolumn indicated by the given column index and row subset.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(CenterSpace.NMath.Core.Slice,CenterSpace.NMath.Core.Slice)">
            <summary>
            Gets a new data frame containing the portion of this data frame indicated by
            the given row slice and column slice.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets a new data frame containing the portion of this data frame indicated by
            the given row subset and column subset.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(CenterSpace.NMath.Core.Slice,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets a new data frame containing the portion of this data frame indicated by
            the given row slice and column subset.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DataFrame.Item(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Core.Slice)">
            <summary>
            Gets a new data frame containing the portion of this data frame indicated by
            the given row subset and column slice.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddColumn(System.Data.DataColumn)">
            <summary>
            Adds the given DataColumn to this data frame.
            </summary>
            <param name="column">A DataColumn.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if this data frame 
            already contains rows. Use <c>AddColumn( DataColumn, DataRowCollection )</c>
            to add columns with data.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddColumn(System.Data.DataColumn,System.Data.DataRowCollection)">
            <summary>
            Adds the given DataColumn and accompanying data to this data frame.
            </summary>
            <param name="column">A DataColumn.</param>
            <param name="rows">A DataRowCollection containing data for this column.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the number of columns
            in the DataRowCollection is not equal to one, or if the DataRowCollection 
            does not contain the same number of rows as this data fra.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddColumn(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Adds a column to this data frame. 
            </summary>
            <param name="col">The column to be added.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddColumns(System.Data.DataColumnCollection)">
            <summary>
            Adds a collection of DataColumns to this data frame.
            </summary>
            <param name="columns">A DataColumnCollection.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if this data frame 
            already contains rows. Use <c>AddColumns( DataColumnCollection, DataRowCollection )</c>
            to add columns with data.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddColumns(System.Data.DataColumnCollection,System.Data.DataRowCollection)">
            <summary>
            Adds a collection of DataColumns and accompanying data to this data frame.
            </summary>
            <param name="columns">A DataColumnCollection.</param>
            <param name="rows">A DataRowCollection containing data for each of the new columns.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the number of columns
            in the DataColumnCollection is not equal to the number of columns in the
            DataRowCollection, or if the DataRowCollection does not contain the same
            number of rows as this data frame.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddColumns(CenterSpace.NMath.Stats.DataFrame,System.Boolean)">
            <summary>
            Adds all columns from another data frame to this data frame, optionally
            copying the data in the columns.
            </summary>
            <param name="df">A data frame.</param>
            <param name="copyData">A boolean value indicated whether data should
            be copied.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRow(System.Data.DataRow)">
            <summary>
            Adds the data from the given DataRow to this data frame.
            </summary>
            <remarks>
            The row key is set to <c>rowIndex + 1</c>.
            </remarks>
            <param name="row">A DataRow.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of columns
            in the DataRow does not match number of columns in this data frame.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRow(System.Object,System.Data.DataRow)">
            <summary>
            Adds the data from the given DataRow using the given row key.
            </summary>
            <param name="rowKey">A row key.</param>
            <param name="row">A DataRow.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of columns
            in the DataRow does not match number of columns in this data frame.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRow(System.Int32,System.Data.DataRow)">
            <summary>
            Adds the data from the given DataRow using the specified column in the row
            as the row key.
            </summary>
            <param name="keyColumn">A column containing the row key.</param>
            <param name="row">A DataRow.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of columns
            in the DataRow does not match number of columns in this data frame.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRows(System.Data.DataRowCollection)">
            <summary>
            Adds the data from the given DataRowCollection.
            </summary>
            <remarks>
            The row key are set to <c>rowIndex + 1</c>.
            </remarks>
            <param name="rows">A DataRowCollection.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of columns
            in the DataRowCollection does not match number of columns in this data 
            frame.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRows(System.Object[],System.Data.DataRowCollection)">
            <summary>
            Adds the data from the given DataRowCollection using the specified row keys.
            </summary>
            <param name="rowKeys">An array of row keys.</param>
            <param name="rows">A DataRowCollection.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of columns
            in the DataRowCollection does not match number of columns in this data 
            frame, or if the number of rows in the DataRowCollection does not match the
            number of row keys.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRows(System.Int32,System.Data.DataRowCollection)">
            <summary>
            Adds the data from the given DataRow using the specified column as row keys.
            </summary>
            <param name="keyColumn">A column containing row keys.</param>
            <param name="rows">A DataRowCollection.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of columns
            in the DataRowCollection does not match number of columns in this data 
            frame.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRow(System.Object,System.Object[])">
            <summary>
            Adds a row to this data frame. 
            </summary>
            <param name="rowKey">A row key.</param>
            <param name="c">An array of row data.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of objects does
            not equal the number of columns in this data frame.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the type of the given row key
            does not match the type of any existing row keys.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRow(System.Object,System.Collections.ICollection)">
            <summary>
            Adds a row to this data frame.
            </summary>
            <param name="rowKey">A row key.</param>
            <param name="c">A collection of row data.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of objects does
            not equal the number of columns in this data frame</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the type of the given row key
            does not match the type of any existing row keys.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRow(System.Object,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Adds a row to this data frame.
            </summary>
            <remarks>
            All columns in this data frame </remarks>
            <param name="rowKey">A row key.</param>
            <param name="v">A vector of double precision values.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of objects does
            not equal the number of columns in this data frame</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if a column in this data frame is not 
            numeric, or if the type of the given row key does not match the type of any existing row
            keys.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRow(System.Collections.ICollection)">
            <summary>
            Adds a row to this data frame using default row key (<c>this.Rows + 1</c>).
            </summary>
            <param name="c">A collection of row data.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of objects does
            not equal the number of columns in this data frame</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the type of the given row key
            does not match the type of any existing row keys.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddRow(System.Object,System.Collections.IDictionary)">
            <summary>
            Adds a row to this data frame from the given dictionary.
            </summary>
            <param name="rowKey">A row key.</param>
            <param name="dic">A dictionary in which the keys are names of the columns.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of objects does
            not equal the number of columns in this data frame</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the type of the given row key
            does not match the type of any existing row keys.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.CleanRows">
            <summary>
            Returns a new data frame containing the rows in this data frame that
            do not contain missing values.
            </summary>
            <returns>A new data frame cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.CleanAndRemoveRows">
            <summary>
            Removes rows that contain missing values.
            </summary>
            <returns>This data frame cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.CleanRows(System.Int32[])">
            <summary>
            Returns a new data frame containing the rows in this data frame that
            do not contain missing values in the given columns.
            </summary>
            <param name="colIndices">
            The indices of the columns to check for missing vlaues.
            </param>
            <returns>A new data frame cleaned of missing values.</returns>
            <remarks>
            Columns other than the given columns are ignored in 
            determining which rows to clean.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">
            Thrown if a given column index is negative, or greater than or
            equal to the number of columns.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.CleanAndRemoveRows(System.Int32[])">
            <summary>
            Removes rows in this data frame that missing values in the given 
            columns.
            </summary>
            <param name="colIndices">
            The indices of the columns to check for missing vlaues.
            </param>
            <returns>This data frame cleaned of missing values.</returns>
            <remarks>
            Columns other than the given columns are ignored in 
            determining which rows to clean.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">
            Thrown if a given column index is negative, or greater than or
            equal to the number of columns.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.CleanCols">
            <summary>
            Returns a new data frame containing the columns in this data frame that
            do not contain missing values.
            </summary>
            <returns>A new data frame cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.CleanAndRemoveCols">
            <summary>
            Removes all columns that contain missing values.
            </summary>
            <returns>This data frame cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.CleanCols(System.Int32[])">
            <summary>
            Returns a new data frame containing the columns in this data frame that
            do not contain missing values in the given rows.
            </summary>
            <param name="rowIndices">
            The indices of the rows to check for missing vlaues.
            </param>
            <returns>A new data frame cleaned of missing values.</returns>
            <remarks>
            Rows other than the given rows are ignored in determining
            which columns to clean.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">
            Thrown if a given row index is negative, or greater than or equal to
            the number of rows.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.CleanAndRemoveCols(System.Int32[])">
            <summary>
            Removes columns that contain missing values in the given rows.
            </summary>
            <param name="rowIndices">
            The indices of the rows to check for missing vlaues.
            </param>
            <returns>This data frame cleaned of missing values.</returns>
            <remarks>
            Rows other than the given rows are ignored in determining
            which columns to clean.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">
            Thrown if a given row index is negative, or greater than or equal to
            the number of rows.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Clear">
            <summary>
            Removes all columns and all rows from this data frame.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Clone">
            <summary>
            Returns a deep copy of this data frame.
            </summary>
            <returns>A clone of this data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.ContainsColumn(System.String)">
            <summary>
            Tests whether this data frame contains a column of the given name.
            </summary>
            <param name="colName">A column name.</param>
            <returns>Returns <c>true</c> if the given column name exists; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.ContainsRow(System.Object)">
            <summary>
            Tests whether this data frame contains a row with the given row key.
            </summary>
            <param name="rowKey">A row key.</param>
            <returns>Returns <c>true</c> if the given row key exists; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetColumnDictionary(System.String)">
            <summary>
            Returns a dictionary for values in the given column. The row keys are
            used as keys in the dictionary.
            </summary>
            <param name="columnName">A column name.</param>
            <returns>A dictionary of key-value pairs.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetColumnDictionary(System.Int32)">
            <summary>
            Returns a dictionary for values in the given column. The row keys are
            used as keys in the dictionary.
            </summary>
            <param name="colIndex">A column index.</param>
            <returns>A dictionary of key-value pairs.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetColumnDictionary(System.Int32,System.Int32)">
            <summary>
            Returns a dictionary for values in the given column. The dictionary keys are
            taken from the specified key column.
            </summary>
            <param name="keyColIndex">The key column index.</param>
            <param name="valColIndex">The value column index.</param>
            <returns>A dictionary of key-value pairs.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetColumns(CenterSpace.NMath.Core.Slice)">
            <summary>
            Gets a new data frame containing the portion of this data frame specified by the
            given column slice.
            </summary>
            <param name="colSlice">A column slice.</param>
            <returns>A new data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetColumns(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets a new data frame containing the portion of this data frame specified by the
            given column subset.
            </summary>
            <param name="colSubset">A column subset.</param>
            <returns>A new data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetFactor(System.Int32)">
            <summary>
            Creates a factor from the given column. 
            </summary>
            <param name="colIndex">A column index.</param>
            <returns>A factor with levels for the sorted, unique elements
            in the given column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetFactor(System.String)">
            <summary>
            Creates a factor from the given column. 
            </summary>
            <param name="colName">A column name.</param>
            <returns>A factor with levels for the sorted, unique elements
            in the given column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetFactor(System.Int32,System.Object[])">
            <summary>
            Creates a factor from the given column. 
            </summary>
            <param name="colIndex">A column index.</param>
            <param name="levels">An array of factor levels.</param>
            <returns>
            A factor with the given levels.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given column contains a value that is not in <c>levels</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetFactor(System.String,System.Object[])">
            <summary>
            Creates a factor from the given column. 
            </summary>
            <param name="colName">A column name.</param>
            <param name="levels">An array of factor levels.</param>
            <returns>
            A factor with the given levels.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given column contains a value that is not in <c>levels</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetRow(System.Int32)">
            <summary>
            Gets the data for a given row index.
            </summary>
            <param name="rowIndex">A row index.</param>
            <returns>A collection of row data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetRow(System.Object)">
            <summary>
            Gets the data for the first row with a given row key.
            </summary>
            <param name="rowKey">A row key.</param>
            <returns>A collection of row data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetRowDictionary(System.Int32)">
            <summary>
            Gets a row dictionary for the given row index. The dictionary keys are
            the column names.
            </summary>
            <param name="rowIndex">A row index.</param>
            <returns>A dictionary of data for the given row.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetRowDictionary(System.Object)">
            <summary>
            Gets a row dictionary for the given row key. The dictionary keys are
            the column names.
            </summary>
            <param name="rowKey">A row key.</param>
            <returns>A dictionary of data for the given row.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetRows(CenterSpace.NMath.Core.Slice)">
            <summary>
            Gets a new data frame containing the portion of this data frame specified by the
            given row slice.
            </summary>
            <param name="rowSlice">A row slice.</param>
            <returns>A new data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetRows(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets a new data frame containing the portion of this data frame specified by the
            given row subset.
            </summary>
            <param name="rowSubset">A row subset.</param>
            <returns>A new data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetSubRow(System.Int32,CenterSpace.NMath.Core.Slice)">
            <summary>
            Gets the portion of the row in this data frame indicated by the given row index and
            column slice.
            </summary>
            <param name="rowIndex">A row index.</param>
            <param name="colSlice">A column slice.</param>
            <returns>A collection of row data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.GetSubRow(System.Int32,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the portion of the row in this data frame indicated by the given row index and
            column subset.
            </summary>
            <param name="rowIndex">A row index.</param>
            <param name="colSubset">A column subset.</param>
            <returns>A collection of row data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.IndexOf(System.Int32,System.Object)">
            <summary>
            Returns the index of the first row with a given value in a specified column.
            </summary>
            <param name="colIndex">A column index.</param>
            <param name="val">A value.</param>
            <returns>The index of the first row with a given value in a specified column,
            or <c>-1</c> if the value is not found.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.IndexOfColumn(System.String)">
            <summary>
            Return the index of the first column with a given column name.
            </summary>
            <param name="colName">A column name.</param>
            <returns>The index of the first column with the given column name, or
            <c>-1</c> if the column name is not found.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.IndexOfKey(System.Object)">
            <summary>
            Returns the index of the first row with a given row key.
            </summary>
            <param name="rowKey">A row key.</param>
            <returns>The index of the first row with the given row key.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.IndexRowKeys">
            <summary>
            Resets the row keys for all rows to <c>rowIndex + 1</c>.
            </summary>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.IndicesOf(System.Int32,System.Object)">
            <summary>
            Returns the indices of all rows with a given value in a specified column.
            </summary>
            <param name="colIndex">A column index.</param>
            <param name="val">A value</param>
            <returns>An array of row indices.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.IndicesOfColumn(System.String)">
            <summary>
            Returns an array of column indices for the given column name. Column
            names need not be unique, so multiple columns may share a single name.
            </summary>
            <returns>An array of column indices.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.IndicesOfKey(System.Object)">
            <summary>
            Returns the indices of all rows with a given row key.
            </summary>
            <param name="rowKey">A row key.</param>
            <returns>An array of row indices.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.InsertColumn(System.Int32,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Inserts the given column at the given column index.
            </summary>
            <param name="colIndex">A column index.</param>
            <param name="col">The column to insert.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the given column is
            not the same length as the other columns in this data frame.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.InsertRow(System.Int32,System.Object,System.Collections.ICollection)">
            <summary>
            Inserts the given row at the given row index.
            </summary>
            <param name="rowIndex">A row index.</param>
            <param name="rowKey">A row key, which may be null.</param>
            <param name="c">A collection of row data.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of objects does
            not equal the number of columns in this data frame.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the type of the given row key
            does not match the type of any existing row keys.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.InsertRow(System.Int32,System.Object,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Inserts the given row at the given row index.
            </summary>
            <remarks>
            All columns in this data frame </remarks>
            <param name="rowIndex">A row index.</param>
            <param name="rowKey">A row key.</param>
            <param name="v">A vector of double precision values.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of objects does
            not equal the number of columns in this data frame.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if a column in this data frame is not 
            numeric, or if the type of the given row key does not match the type of any existing row
            keys.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.InsertRow(System.Int32,System.Object,System.Collections.IDictionary)">
            <summary>
            Inserts the given row at the given row index.
            </summary>
            <param name="rowIndex">A row index.</param>
            <param name="rowKey">A row key, which may be null.</param>
            <param name="dic">A dictionary of row data. The dictionary keys must be the names of 
            the columns.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of objects does
            not equal the number of columns in this data frame</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the type of the given row key
            does not match the type of any existing row keys.</exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.LaunchSaveFileDialog">
            <summary>
            Launches the Save File Dialog, allowing an end user to save the contents 
            of this data frame to the text file of their choice.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.OpenInEditor">
            <summary>
            Opens the contents of this data frame in the default text editor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.PermuteColumns(System.Int32[])">
            <summary>
            Reorders the columns in this data frame according to the given permutation array.
            </summary>
            <param name="colIndices">The permutation array of column indices.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the number of column indices
            in the permutation array is not equal to the number of columns in this data frame,
            or if the permutation array does not contain unique indices. </exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.PermuteRows(System.Int32[])">
            <summary>
            Reorders the rows in this data frame according to the given permutation array.
            </summary>
            <remarks>
            Row[ permutation[i] ] is set to the <i>i</i>th row in the orginal data frame.
            Permutation array must be the same length as the column length.
            </remarks>
            <param name="rowIndices">The permutation array of row indices.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the number of row indices
            in the permutation array is not equal to the number of rows in this data frame,
            or if the permutation array does not contain unique indices. </exception>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveAllColumns">
            <summary>
            Removes all columns from this data frame, but preserves the existing row keys.
            </summary>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveColumn(System.Int32)">
            <summary>
            Removes the column from this data frame with the given column index.
            </summary>
            <param name="colIndex">A column index.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveColumn(System.String)">
            <summary>
            Removes all columns from this data frame with the given column name.
            </summary>
            <param name="columnName">A column name.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveColumns(CenterSpace.NMath.Core.Slice)">
            <summary>
            Removes the columns from this data frame specified by the given column slice.
            </summary>
            <param name="colSlice">A column slice.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveColumns(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Removes the columns from this data frame specified by the given column subset.
            </summary>
            <param name="colSubset">A column subset.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveAllRows">
            <summary>
            Removes all rows from this data frame.
            </summary>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveRow(System.Int32)">
            <summary>
            Removes the row from this data table at the given row index.
            </summary>
            <param name="rowIndex">A row index.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveRow(System.Object)">
            <summary>
            Removes all rows from this data table with the given row key.
            </summary>
            <param name="rowKey">A row key.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveRows(CenterSpace.NMath.Core.Slice)">
            <summary>
            Removes the rows from this data frame specified by the given row slice.
            </summary>
            <param name="rowSlice">A row slice.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.RemoveRows(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Removes the rows from this data frame specified by the given row subset.
            </summary>
            <param name="rowSubset">A row subset.</param>
            <returns>This data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Save(System.String)">
            <summary>
            Exports the contents of this data frame to a text file.
            </summary>
            <remarks>
            By default, the saved file includes column headers and row keys.
            Column data is tab delimited.  Formatting uses the column formatting which by default is 
            <c>StatsSettings.NumericFormat</c>, <c>StatsSettings.IntegerFormat</c> and 
            <c>StatsSettings.DateTimeFormat</c>.
            </remarks>  
            <param name="filename">The output filename.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Save(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Exports the contents of this data frame to a text file.
            </summary>
            <remarks>Formatting uses the column formatting which by default is <c>StatsSettings.NumericFormat</c>,
            <c>StatsSettings.IntegerFormat</c> and <c>StatsSettings.DateTimeFormat</c>.
            </remarks>  
            <param name="filename">The output filename.</param>
            <param name="exportHeader">A boolean value indicated whether or not the saved file should
            include column headers.</param>
            <param name="exportRowKeys">A boolean value indicated whether or not the saved file should
            include row keys.</param>
            <param name="delimiter">The column delimiter.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Save(System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Exports the contents of this data frame to a text file.
            </summary>
            <param name="filename">The output filename.</param>
            <param name="exportHeader">A boolean value indicated whether or not the saved file should
            include column headers.</param>
            <param name="exportRowKeys">A boolean value indicated whether or not the saved file should
            include row keys.</param>
            <param name="delimiter">The column delimiter.</param>
            <param name="numericFormat">Numeric format such as "F3"</param>
            <param name="integerFormat">Integer format such as "C"</param>
            <param name="dateTimeFormat">DateTime format such as "MMM ddd d HH:mm yyyy"</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.SetRowKey(System.Int32,System.Object)">
            <summary>
            Sets the row key for the given row index to the given value.
            </summary>
            <param name="rowIndex">A row index.</param>
            <param name="key">A row key.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.SetRowKeys(System.Collections.ICollection)">
            <summary>
            Sets the row keys in this data frame to the elements of the given collection. 
            </summary>
            <param name="c">A collection of row keys.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of elements in the
            collection does not equal the number of rows in this data frame.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.SortByColumnHeader">
            <summary>
            Sorts the columns in this data frame by the column headers.
            </summary>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.SortRows(System.Int32[])">
            <summary>
            Sorts the rows in this data frame according to the given ordered array of column
            indices.
            </summary>
            <remarks>All sorting is in ascending order.</remarks>
            <param name="colIndices">An ordered array of column indices.</param>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.SortRows(System.Int32[],CenterSpace.NMath.Stats.SortingType[])">
            <summary>
            Sorts the rows in this data frame according to the given ordered array of column
            indices. Sort order is determined by the matching array of sorting types (ascending
            or descending).
            </summary>
            <param name="colIndices">An ordered array of column indices.</param>
            <param name="sortingTypes">An ordered array of sorting types.</param>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.SortRowsByKeys">
            <summary>
            Sorts the rows in this data frame by their row keys in ascending order.
            </summary>
            <returns>A reference to self.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">
            Thrown if the row keys are of different types, and so cannot be sorted.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.SortRowsByKeys(CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Sorts the rows in this data frame by their row keys.
            </summary>
            <param name="sortingType">A sorting type (ascending or descending).</param>
            <returns>A reference to self.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">
            Thrown if the row keys are of different types, and so cannot be sorted.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Swaps the position of the given columns in the data frame.
            </summary>
            <param name="colIndex1">A column index.</param>
            <param name="colIndex2">A column index.</param>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">
            Thrown if a given column index is negative, or greater than or equal to the number of columns.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.SwapRows(System.Int32,System.Int32)">
            <summary>
            Swaps the position of the given rows in the data frame.
            </summary>
            <param name="rowIndex1">A row index.</param>
            <param name="rowIndex2">A row index.</param>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">
            Thrown if a given row index is negative, or greater than or
            equal to the number of rows.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Int32})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColName">The name of the column for the grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns an integer.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFIntColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Int32})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColIndex">The index of the column for the grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns an integer.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFIntColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Int32})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColName">The name of the column for the first grouping factor.</param>
            <param name="factorBColName">The name of the column for the second grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns an integer.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFIntColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Int32})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColIndex">The index of the column for the first grouping factor.</param>
            <param name="factorBColIndex">The index of the column for the second grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns an integer.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFIntColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            <br/>
            In the case where there is no data, the function is called. If an exception is called, however,
            a missing value will be placed in the cell.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Double})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColName">The name of the column for the grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a double-precision floating
            point number.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFNumericColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Double})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColIndex">The index of the column for the grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a double-precision floating
            point number.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFNumericColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Double})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColName">The name of the column for the first grouping factor.</param>
            <param name="factorBColName">The name of the column for the second grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a double-precision floating
            point number.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFNumericColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Double})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColIndex">The index of the column for the first grouping factor.</param>
            <param name="factorBColIndex">The index of the column for the second grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a double-precision floating
            point number.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFNumericColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            <br/>
            In the case where there is no data, the function is called. If an exception is called, however,
            a missing value will be placed in the cell.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Boolean})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColName">The name of the column for the grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a boolean value.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFBoolColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Boolean})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColIndex">The index of the column for the grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a boolean value.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFBoolColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Boolean})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColName">The name of the column for the first grouping factor.</param>
            <param name="factorBColName">The name of the column for the second grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a boolean value.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFBoolColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Boolean})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColIndex">The index of the column for the first grouping factor.</param>
            <param name="factorBColIndex">The index of the column for the second grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a boolean value.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFBoolColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.String})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColName">The name of the column for the grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a string.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFStringColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.String})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColIndex">The index of the column for the grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a string.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFStringColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.String})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColName">The name of the column for the first grouping factor.</param>
            <param name="factorBColName">The name of the column for the second grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a string.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFStringColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.String})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColIndex">The index of the column for the first grouping factor.</param>
            <param name="factorBColIndex">The index of the column for the second grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a string.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFStringColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            <br/>
            In the case where there is no data, the function is called. If an exception is called, however,
            a missing value will be placed in the cell.    
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.DateTime})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColName">The name of the column for the grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a datetime value.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFDateTimeColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.DateTime})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColIndex">The index of the column for the grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a datetime value.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFDateTimeColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.DateTime})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColName">The name of the column for the first grouping factor.</param>
            <param name="factorBColName">The name of the column for the second grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a datetime value.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFDateTimeColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.DateTime})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColIndex">The index of the column for the first grouping factor.</param>
            <param name="factorBColIndex">The index of the column for the second grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a datetime value.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFDateTimeColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            <br/>
            In the case where there is no data, the function is called. If an exception is called, however,
            a missing value will be placed in the cell.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Object})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColName">The name of the column for the grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a generic object.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFGenericColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Object})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for each level of the specified factor.
            </summary>
            <param name="factorColIndex">The index of the column for the grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a generic object.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique factor levels
            as strings. The only column, a DFGenericColumn named <c>Results</c>, contains the
            results of applying the given delegate to the values in the data column tabulated
            for each level of the factor.
            <br/>
            A final row is appended, with key <c>Overall</c>, containing the results of applying
            the given delegate to all values in the data column. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.String,System.String,System.String,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Object})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColName">The name of the column for the first grouping factor.</param>
            <param name="factorBColName">The name of the column for the second grouping factor.</param>
            <param name="dataColName">The name of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a generic object.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFGenericColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given factor or data column names do not exist in this data frame.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Tabulate(System.Int32,System.Int32,System.Int32,System.Func{CenterSpace.NMath.Stats.IDFColumn,System.Object})">
            <summary>
            Tabulates the results of applying the given delegate to the values in the specified data
            column for every combination of the two specified factors.
            </summary>
            <param name="factorAColIndex">The index of the column for the first grouping factor.</param>
            <param name="factorBColIndex">The index of the column for the second grouping factor.</param>
            <param name="dataColIndex">The index of the data column.</param>
            <param name="function">
            A delegate that takes a data frame column and returns a generic object.
            </param>
            <returns>
            A new data frame.
            </returns>
            <remarks>
            The returned data frame has row keys containing the sorted, unique levels of
            the first grouping factor as strings. The columns in the data frame, all instances
            of DFGenericColumn, are named using the sorted, unique levels of the second grouping
            factor. Each cell in the data frame contains the results of applying the given
            delegate to the values in the data column tabulated for the appropriate combination of
            the two factors. 
            <br/>
            A final column is appended, named <c>Overall</c>, containing the overall results for each
            level of the first factor. A final row is appended, with key <c>Overall</c>, containing
            the overall results for each level of the second factor. The lower right corner cell, accessed
            by <c>this["Overall","Overall"]</c>, contains the results of applying the given delegate to all
            values in the data column. 
            <br/>
            In the case where there is no data, the function is called. If an exception is called, however,
            a missing value will be placed in the cell.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.ToDataTable">
            <summary>
            Returns a data table containing all data in this data frame.
            </summary>
            <remarks>The row keys are placed in a DataColumn named <c>DFRowKeys</c>.</remarks>
            <returns>A data table.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.ToDoubleMatrix">
            <summary>
            Returns a double matrix containing all numeric data in this data frame.
            </summary>
            <returns>A new double matrix.</returns>
            <remarks>Non-numeric columns are ignored.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.ToString">
            <summary>
            Returns a formatted string representation of this data frame.
            </summary>
            <remarks>
            By default, the returned string includes column headers and row keys.
            Column data is tab delimited. Formatting uses <c>StatsSettings.NumericFormat</c>,
            <c>StatsSettings.IntegerFormat</c> and <c>StatsSettings.DateTimeFormat</c>.
            </remarks>
            <returns>A formatted string representation of this data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.ToString(System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns a formatted string representation of this data frame.
            </summary>
            <remarks>Formatting uses the column formatting which by default is <c>StatsSettings.NumericFormat</c>,
            <c>StatsSettings.IntegerFormat</c> and <c>StatsSettings.DateTimeFormat</c>.
            </remarks>
            <param name="exportHeader">A boolean value indicated whether or not the returned string should
            include column headers.</param>
            <param name="exportRowKeys">A boolean value indicated whether or not the returned string should
            include row keys.</param>
            <param name="delimiter">The column delimiter.</param>
            <returns>A formatted string representation of this data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.ToString(System.Boolean,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a formatted string representation of this data frame.
            </summary>
            <param name="exportHeader">A boolean value indicated whether or not the returned string should
            include column headers.</param>
            <param name="exportRowKeys">A boolean value indicated whether or not the returned string should
            include row keys.</param>
            <param name="delimiter">The column delimiter.</param>
            <param name="numericFormat">Numeric format such as "F3"</param>
            <param name="integerFormat">Integer format such as "C"</param>
            <param name="dateTimeFormat">DateTime format such as "MMM ddd d HH:mm yyyy"</param>
            <returns>A formatted string representation of this data frame.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.ToTable(System.Boolean,System.Boolean)">
            <summary>
            Export to Table
            </summary>
            <remarks>
            Formatting uses the column formatting which by default is <c>StatsSettings.NumericFormat</c>,
            <c>StatsSettings.IntegerFormat</c> and <c>StatsSettings.DateTimeFormat</c>.
            </remarks>
            <param name="exportHeader">Export header or not</param>
            <param name="exportRowKeys">Export row keys or not</param>
            <returns>Table</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.ToTable(System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Export to Table
            </summary>
            <param name="exportHeader">Export header or not</param>
            <param name="exportRowKeys">Export row keys or not</param>
            <param name="numericFormat">Numeric format such as "F3"</param>
            <param name="integerFormat">Integer format such as "C"</param>
            <param name="dateTimeFormat">DateTime format such as "MMM ddd d HH:mm yyyy"</param>
            <returns>Table</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Load(System.String)">
            <summary>
            Imports a data frame from the given text file.
            </summary>
            <remarks>
            The text file is assumed to contain column headers and row keys.
            Column data is assumed to be tab delimited.
            </remarks>
            <param name="filename">The input file name.</param>
            <returns>A new data frame.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if an I/O error is encountered, or if the file is
            in the wrong format.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Load(System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Imports a data frame from the given text file.
            </summary>
            <param name="filename">The input file name.</param>
            <param name="hasHeader">A boolean value indicating whether or not the string contains column headers.</param>
            <param name="hasRowKeys">A boolean value indicating whether or not the string contains row keys.</param>
            <param name="delimiter">The column delimiter.</param>
            <param name="parse">A boolean value indicating whether to parse the column types, or treat
            everything as string data.</param>
            <returns>A new data frame.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if an I/O error is encountered, or if the file is
            in the wrong format.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Load(System.IO.StreamReader,System.String)">
            <summary>
            Imports a data frame from the given stream reader.
            </summary>
            <remarks>
            The underlying stream is assumed to contain column headers and row keys.
            Column data is assumed to be tab delimited.
            </remarks>
            <param name="reader">The input stream reader.</param>
            <param name="name">The name of the data frame.</param>
            <returns>A new data frame.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if an I/O error is encountered, or if the file is
            in the wrong format.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Load(System.IO.StreamReader,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Imports a data frame from the given stream reader.
            </summary>
            <param name="reader">The input stream reader.</param>
            <param name="name">The name of the data frame.</param>
            <param name="hasHeader">A boolean value indicating whether or not the stream contains column headers.</param>
            <param name="hasRowKeys">A boolean value indicating whether or not the stream contains row keys.</param>
            <param name="delimiter">The column delimiter.</param>
            <param name="parse">A boolean value indicating whether to parse the column types, or treat
            everything as string data.</param>
            <returns>A new data frame.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if an I/O error is encountered, or if the file is
            in the wrong format.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Load(System.IO.Stream,System.String)">
            <summary>
            Imports a data frame from the given stream.
            </summary>
            <remarks>
            The stream is assumed to contain column headers and row keys.
            Column data is assumed to be tab delimited.
            </remarks>
            <param name="stream">The input stream.</param>
            <param name="name">The name of the data frame.</param>
            <returns>A new data frame.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if an I/O error is encountered, or if the file is
            in the wrong format.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.Load(System.IO.Stream,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Imports a data frame from the given stream.
            </summary>
            <param name="stream">An input stream.</param>
            <param name="name">The name of the data frame.</param>
            <param name="hasHeader">A boolean value indicating whether or not the string contains column headers.</param>
            <param name="hasRowKeys">A boolean value indicating whether or not the string contains row keys.</param>
            <param name="delimiter">A column delimiter.</param>
            <param name="parse">A boolean value indicating whether to parse the column types, or treat
            everything as string data.</param>
            <returns>A new data frame.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if an I/O error is encountered, or if the file is
            in the wrong format.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DataFrame.AddDFColumnToDataTable(System.Data.DataTable,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Adds the given DFColumn to the given DataTable. Handles the case when trying
            to add a DFColumn with the same name as a column in the DataTable by creating
            new name that is the DFColumn name with a '_1' appended. If there is already
            such a name in the DataTable, try appending a '_2',... and so on until we
            get a name that is not in the DataTable.
            </summary>
            <param name="table">The table to add the DFColumn to.</param>
            <param name="dfCol">The DFColumn.</param>
            <returns>The added DataColumn.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFBoolColumn">
            <summary>
            Class DFBoolColumn represents a column of logical data in a data frame.
            </summary>
            <remarks>Elements are stored as <c>System.Boolean</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.#ctor(System.String)">
            <summary>
            Constructs a DFBoolColumn instance with the given name.
            </summary>
            <param name="name">The name of the column.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.#ctor(System.String,System.Boolean[])">
            <summary>
            Constructs a DFBoolColumn instance with the given name. Column elements
            are initialized with data from the given array.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">An array of boolean values.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.#ctor(System.String,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a DFBoolColumn instance with the given name. Column elements are
            initialized with data from the given column, after conversion to bool.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">A column of data.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data cannot be converted to bool.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFBoolColumn.ColumnType">
            <summary>
            Gets the type of the objects held by this column.
            </summary>
            <returns>Returns <c>System.Boolean</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFBoolColumn.Item(System.Int32)">
            <summary>
            Gets the object in this column at the given position.
            </summary>
            <remarks>Returns a bool.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Apply(System.String,System.Func{System.Boolean,System.Boolean})">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given unary 
            function to each element of this column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that takes a single 
            <c>bool</c> parameter and returns a <c>bool</c>.
            </param>
            <returns>
            A new column with the same name and size as self and with 
            <c>c[i]=function( this[i] )</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Apply(System.String,System.Func{System.Boolean,System.Boolean,System.Boolean},System.Boolean)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column. 
            The first parameter to the binary function is an element of self; 
            the second parameter is the passed boolean. 
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>bool</c> parameters and returns a <c>bool</c>.
            </param>
            <param name="b">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], b )</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Apply(System.String,System.Func{System.Boolean,System.Boolean,System.Boolean},CenterSpace.NMath.Stats.DFBoolColumn)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>bool</c> parameters and returns a <c>bool</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], column[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Clean">
            <summary>
            Returns a copy of this column without missing values.
            </summary>
            <returns>A column cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Clone">
            <summary>
            Returns a deep copy of this column.
            </summary>
            <returns>A clone of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Convert(System.Object)">
            <summary>
            Converts an object to the type held by this column.
            </summary>
            <param name="obj">An object.</param>
            <returns>A converted object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.IsMissing(System.Int32)">
            <summary>
            Returns <c>false</c>. Missing values are not supported in DFBoolColumns,
            which have only two valid values. 
            </summary>
            <param name="i">An element index.</param>
            <returns>
            Returns <c>false</c>.
            </returns>
            <remarks>
            To represent missing values in boolean data, use DFIntColumn. For example,
            use 1 for true, 0 for false, and -1 for missing.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.SubColumn(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the subcolumn specified by the given Subset.
            </summary>
            <param name="subset">A subset.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Transform(System.Func{System.Boolean})">
            <summary>
            Modifies the elements of this column by applying the given no-argument 
            function to each element.
            </summary> 
            <param name="function">A delegate object representing a function that
            takes no parameters and returns a <c>bool</c>.</param>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Transform(System.Func{System.Boolean,System.Boolean})">
            <summary>
            Modifies the elements of this column by applying the given unary function 
            to each element.
            </summary>
            <param name="function">A delegate object representing a function that
            takes a single <c>bool</c> parameter and returns a <c>bool</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i] ).</c></remarks>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Transform(System.Func{System.Boolean,System.Boolean,System.Boolean},System.Boolean)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the passed boolean.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>bool</c> parameters and returns a <c>bool</c>.
            </param>
            <param name="b">The second parameter to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], b )</c>.</remarks>
            <returns>A reference to self.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFBoolColumn.Transform(System.Func{System.Boolean,System.Boolean,System.Boolean},CenterSpace.NMath.Stats.DFBoolColumn)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the corresponding element of the passed 
            column.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>bool</c> parameters and returns a <c>bool</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], column[i] )</c>.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
            <returns>A reference to self.</returns> 
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFColumn">
            <summary>
            Abstract base class for data frame column types.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DFColumn.list_">
            <summary>
            An array list of column elements.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DFColumn.name_">
            <summary>
            The name of this column. Must be set in the constructor.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DFColumn.label_">
            <summary>
            The label in the header of this column. Can be changed.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DFColumn.missingValue_">
            <summary>
            Value used to represent missing values in this column.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DFColumn.properties_">
            <summary>
            A dictionary of the properties of this column.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.#ctor(System.String)">
            <summary>
            Constructs a DFColumn instance with the given name.
            </summary>
            <param name="name">The name of the column.</param>
            <remarks>Once a DFColumn instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumn.ColumnType">
            <summary>
            Gets the type of the objects held by this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumn.Count">
            <summary>
            Gets the number of ojects in this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumn.IsNumeric">
            <summary>
            Returns <c>true</c> if the objects in this column are integers or floating point
            numbers; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumn.IsSynchronized">
            <summary>
            Returns <c>false</c>. Access to this class is not synchronized.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumn.Label">
            <summary>
            Gets and sets the label in the header of this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumn.Name">
            <summary>
            Gets the name of this column.
            </summary>
            <remarks>The name of a column can only be set in a constructor. Once a column is
            constructed, the name cannot be changed. For a modifiable label, see the <c>Label</c>
            property.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumn.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to this ICollection.
            </summary>
            <remarks>Returns <c>this</c>.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumn.MissingValue">
            <summary>
            Gets and sets the value used to represent missing values in this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumn.Item(System.Int32)">
            <summary>
            Gets the object in this column at the given position.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Add(System.Object)">
            <summary>
            Adds an object to this column.
            </summary>
            <param name="obj">An object.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.GetFactor">
            <summary>
            Creates a factor from this column. 
            </summary>
            <returns>
            A factor with levels for the sorted, unique elements in this column.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.GetFactor(System.Object[])">
            <summary>
            Creates a factor from this column. 
            </summary>
            <param name="levels">An array of factor levels.</param>
            <returns>
            A factor with the given levels.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if this column contains a value that is not in <c>levels</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Clean">
            <summary>
            Returns a copy of this column without missing values.
            </summary>
            <returns>A column cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Clone">
            <summary>
            Returns a deep copy of this column.
            </summary>
            <returns>A clone of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Convert(System.Object)">
            <summary>
            Converts an object to the type held by this column.
            </summary>
            <param name="obj">An object.</param>
            <returns>A converted object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.CopyTo(System.Array)">
            <summary>
            Copies the contents of this column into the given array, beginning
            at the first position within the array.
            </summary>
            <param name="array">An array into which to copy this column.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of this column into the given array, beginning
            at the given position within the array.
            </summary>
            <param name="array">An array into which to copy this column.</param>
            <param name="position">Position within the array at which to begin copying.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.GetEnumerator">
            <summary>
            Returns an enumerator for this column.
            </summary>
            <returns>An IEnumerator for the objects in the column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.IsMissing(System.Int32)">
            <summary>
            Returns <c>true</c> if the element at the given position is missing; 
            otherwise, <c>false</c>.
            </summary>
            <param name="i">An element index.</param>
            <returns>
            Returns <c>true</c> if <c>this[i] == this.MissingValue</c>; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an object into this column and the given position.
            </summary>
            <param name="position">An index.</param>
            <param name="obj">The object to be inserted.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Permute(System.Int32[])">
            <summary>
            Permutes the objects in this column by the given permutation vector (ranks).
            </summary>
            <remarks>
            this[ permutation[i] ] is set to the <i>i</i>th object in the orginal column.
            Permutation array must be the same length as the column length.
            </remarks>
            <param name="permutation">A permutation vector.</param>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.RemoveAt(System.Int32)">
            <summary>
            Removes the object from this column at the given position.
            </summary>
            <param name="position">An index.</param>
            <returns>Returns the removed object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.SubColumn(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the subcolumn specified by the given Subset.
            </summary>
            <param name="subset">A subset.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.SubColumn(CenterSpace.NMath.Core.Slice)">
            <summary>
            Gets the subcolumn specified by the given Slice.
            </summary>
            <param name="slice">A slice.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.ToArray">
            <summary>
            Exports the contents of this column to an array.
            </summary>
            <returns>A strongly-typed array containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.ToDoubleArray">
            <summary>
            Extracts the contents of a column to an array of doubles.
            </summary>
            <remarks>
            Missing values are returned as <c>NaN</c>.
            </remarks>
            <returns>An array of doubles.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if this column does not contain numeric
            data.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.ToDoubleVector">
            <summary>
            Extracts the contents of a column to a DoubleVector.
            </summary>
            <remarks>
            Missing values are returned as <c>NaN</c>.
            </remarks>
            <returns>A DoubleVector.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if this column does not contain numeric
            data.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.ToIntArray">
            <summary>
            Extracts the contents of a column to an array of integers.
            </summary>
            <returns>An array of integers.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if this column does not contain 
            numeric data.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.ToString">
            <summary>
            Returns a formatted string representation of this column.
            </summary>
            <returns>A comma-separated list of elements.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.ToString(System.Int32)">
            <summary>
            Returns formatted representation.
            </summary>
            <param name="index">Index into column.</param>
            <returns>Formatted string representation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.ToString(System.Int32,System.String)">
            <summary>
            Returns formatted representation.
            </summary>
            <param name="index">Index into column.</param>
            <param name="format">Specified format.</param>
            <returns>Formatted string representation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.ToStringArray">
            <summary>
            Exports the contents of this column to an array of strings.
            </summary>
            <returns>A string[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.ToStringArray(System.String)">
            <summary>
            Exports the contents of this column to an array of strings.
            </summary>
            <param name="format">Specified format.</param>
            <returns>A string[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps the position of the given elements in the column.
            </summary>
            <param name="position1">An index.</param>
            <param name="position2">An index.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.SetClone(CenterSpace.NMath.Stats.DFColumn,CenterSpace.NMath.Stats.DFColumn)">
            <summary>
            Set the memebers of the clone.
            </summary>
            <param name="source">The source column.</param>
            <param name="target">The target column.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.SetClone(CenterSpace.NMath.Stats.DFColumn,CenterSpace.NMath.Stats.DFColumn,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Set the memebers of the clone.
            </summary>
            <param name="source">The source column.</param>
            <param name="target">The target column.</param>
            <param name="subset">The subset to add.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Parse(System.Collections.ICollection)">
            <summary>
            Parses a column from a collection.
            </summary>
            <param name="data">A collection of column data.</param>
            <remarks>
            The first item in the collection will be used as the columm header name.
            </remarks>
            <returns>Returns a DFIntColumn, a DFNumericColumn, a DFBoolColumn or a DFStringColumn.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Parse(System.Collections.ICollection,System.Boolean)">
            <summary>
            Parses a column from a collection.
            </summary>
            <param name="data">A collection of column data.</param>
            <param name="parse">A boolean value indicating whether to parse the column types, or treat
            everything as generic object data.</param>
            <returns>If <c>parse</c> is <c>true</c>, returns a DFIntColumn, a DFNumericColumn,
            a DFBoolColumn or a DFStringColumn. If <c>false</c>, always returns a 
            DFStringColumn.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Parse(System.Collections.ICollection,System.String)">
            <summary>
            Parses a column from a collection.
            </summary>
            <param name="data">A collection of column data.</param>
            <param name="headerName">Name to use for the column header.</param>
            <returns>Returns a DFIntColumn, a DFNumericColumn, a DFBoolColumn or a 
            DFStringColumn.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Parse(System.Collections.ICollection,System.String,System.Boolean)">
            <summary>
            Parses a column from a collection.
            </summary>
            <param name="data">A collection of column data.</param>
            <param name="headerName">Name to use for the column header.</param>
            <param name="parse">A boolean value indicating whether to parse the column types, or treat
            everything as generic object data.</param>
            <returns>If <c>parse</c> is <c>true</c>, returns a DFIntColumn, a DFNumericColumn,
            a DFBoolColumn or a DFStringColumn. If <c>false</c>, always returns a 
            DFStringColumn.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumn.Parse(System.Data.DataColumn)">
            <summary>
            Parses the DataColumn into a DFColumn.
            </summary>
            <remarks>
            A DataColumn of type System.Int16, System.Int32 or System.Int64 will be 
            parsed into a DFIntColumn, of type System.Single or System.Double into a
            DFNumericColumn, of type System.DateTime into a DFDateTimeColumn, of type 
            System.Boolean into a DFBoolColumn, of type System.String into a 
            DFStringColumn. Any other type will be made into a DFGenericColumn.
            </remarks>
            <param name="column">A DataColumn.</param>
            <returns>A new DFColumn.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFDateTimeColumn">
            <summary>
            Class DFDataTimeColumn represents a column of DataTime data in a data frame.
            </summary>
            <remarks>Elements are stored as <c>System.DateTime</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.#ctor(System.String)">
            <summary>
            Constructs a DFDateTimeColumn instance with the given name, a
            date format as specified in <c>StatsSettings.DateTimeFormat</c>
            and a missing value as specified in 
            <c>StatsSettings.DateTimeMissingValue</c>.
            </summary>
            <param name="name">The name of the column.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.#ctor(System.String,System.DateTime[])">
            <summary>
            Constructs a DFDateTimeColumn instance with the given name, a
            date format as specified in <c>StatsSettings.DateTimeFormat</c>
            and a missing value as specified in 
            <c>StatsSettings.DateTimeMissingValue</c>. Column elements
            are initialized with data from the given array.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">An array of DateTime objects.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.#ctor(System.String,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a DFDateTimeColumn instance with the given name. Column elements are
            initialized with data from the given column, after conversion to DateTime.
            </summary>
            <remarks>
            If the specified column is a DFDateTimeColumn, then this new column will 
            use its date time format and missing value settings. Otherwise, the defaults 
            in <c>StatsSettings.DateTimeFormat</c> and 
            <c>StatsSettings.DateTimeMissingValue</c> will be used.
            </remarks>
            <param name="name">The name of the column.</param>
            <param name="data">A column of data.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data cannot be converted to DateTime.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFDateTimeColumn.ColumnType">
            <summary>
            Gets the type of the objects held by this column.
            </summary>
            <returns>Returns <c>System.DateTime</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFDateTimeColumn.MissingValue">
            <summary>
            Gets and sets the value used to represent missing values in this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFDateTimeColumn.Item(System.Int32)">
            <summary>
            Gets the object in this column at the given position.
            </summary>
            <remarks>Returns a DateTime.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFDateTimeColumn.DateFormat">
            <summary>
            Gets and sets the date format.
            </summary>
            <remarks>Set to <c>null</c> to restore the default.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Apply(System.String,System.Func{System.DateTime,System.DateTime})">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given unary 
            function to each element of this column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a single <c>DateTime</c> parameter and returns a <c>DateTime</c>.
            </param>
            <returns>
            A new column with the same name and size as self and with 
            <c>c[i]=function( this[i] )</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Apply(System.String,System.Func{System.DateTime,System.DateTime,System.DateTime},System.DateTime)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column. 
            The first parameter to the binary function is the column element; 
            the second parameter is the passed date. 
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>DateTime</c> parameters and returns a <c>DateTime</c>.
            </param>
            <param name="date">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], s )</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Apply(System.String,System.Func{System.DateTime,System.DateTime,System.DateTime},CenterSpace.NMath.Stats.DFDateTimeColumn)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>DateTime</c> parameters and returns a <c>DateTime</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], column[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Clean">
            <summary>
            Returns a copy of this column without missing values.
            </summary>
            <returns>A column cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Clone">
            <summary>
            Returns a deep copy of this column.
            </summary>
            <returns>A clone of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Convert(System.Object)">
            <summary>
            Converts an object to the type held by this column.
            </summary>
            <param name="obj">An object.</param>
            <returns>A converted object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.IsMissing(System.Int32)">
            <summary>
            Returns <c>true</c> if the element at the given position is missing; 
            otherwise, <c>false</c>.
            </summary>
            <param name="i">An element index.</param>
            <returns>
            Returns <c>true</c> if <c>this[i] == this.MissingValue</c>; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.SubColumn(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the subcolumn specified by the given Subset.
            </summary>
            <param name="subset">A subset.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.ToString(System.Int32)">
            <summary>
            Formatted string representation of the date. Uses StatsSettings format.
            </summary>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>. 
            </remarks>
            <param name="index">Index into column.</param>
            <returns>Formatted string representation of cell value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.ToString(System.Int32,System.String)">
            <summary>
            Formatted string representation of the date.
            </summary>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>. 
            </remarks>
            <param name="index">Index into column.</param>
            <param name="format">DateTime format such as "MMM ddd d HH:mm yyyy"</param>
            <returns>Formatted string representation of cell value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.ToStringArray">
            <summary>
            Exports the contents of this column to an array of strings. Uses StatsSettings format.
            </summary>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>. 
            </remarks>
            <returns>A string[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.ToStringArray(System.String)">
            <summary>
            Exports the contents of this column to a formatted array of strings.
            </summary>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>. 
            </remarks>
            <param name="format">DateTime format such as "MMM ddd d HH:mm yyyy"</param>
            <returns>A string[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Transform(System.Func{System.DateTime})">
            <summary>
            Modifies the elements of this column by applying the given no-argument function to 
            each element.
            </summary> 
            <param name="function">A delegate object representing a function that
            takes no parameters and returns a <c>DateTime</c>.</param>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Transform(System.Func{System.DateTime,System.DateTime})">
            <summary>
            Modifies the elements of this column by applying the given unary function to 
            each element.
            </summary>
            <param name="function">A delegate object representing a function that
            takes a single <c>DateTime</c> parameter and returns a <c>DateTime</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i] ).</c></remarks>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Transform(System.Func{System.DateTime,System.DateTime,System.DateTime},System.DateTime)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is 
            the column element; the second parameter is the passed date.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>DateTime</c> parameters and returns a <c>DateTime</c>.
            </param>
            <param name="date">The second parameter to the function.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], s )</c>.</remarks>
            <returns>A reference to self.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFDateTimeColumn.Transform(System.Func{System.DateTime,System.DateTime,System.DateTime},CenterSpace.NMath.Stats.DFDateTimeColumn)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the corresponding element of the passed 
            column.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>DateTime</c> parameters and returns a <c>DateTime</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], column[i] )</c>.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
            <returns>A reference to self.</returns> 
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFGenericColumn">
            <summary>
            Class DFGenericColumn represents a column of generic data in a data frame.
            </summary>
            <remarks>Elements are stored as <c>System.Object</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.#ctor(System.String)">
            <summary>
            Constructs a DFGenericColumn instance with the given name and a
            missing value as specified in <c>StatsSettings.GenericMissingValue</c>.
            </summary>
            <param name="name">The name of the column.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.#ctor(System.String,System.Collections.ICollection)">
            <summary>
            Constructs a DFGenericColumn instance with the given name and a
            missing value as specified in <c>StatsSettings.GenericMissingValue</c>. 
            Column elements are initialized with data from the given collection.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">A collection of objects.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.#ctor(System.String,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a DFBoolColumn instance with the given name. Column elements are
            initialized with data from the given column.
            </summary>
            <remarks>
            If the specified column is a DFGenericColumn, then this new column will use 
            its missing value setting. Otherwise, the default in 
            <c>StatsSettings.GenericMissingValue</c> will be used.
            </remarks>
            <param name="name">The name of the column.</param>
            <param name="data">A column of data.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFGenericColumn.ColumnType">
            <summary>
            Gets the type of the objects held by this column.
            </summary>
            <returns>Returns <c>System.Object</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Apply(System.String,System.Func{System.Object,System.Object})">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given unary 
            function to each element of this column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a single <c>object</c> parameter and returns an <c>object</c>.
            </param>
            <returns>
            A new column with the same name and size as self and with 
            <c>c[i]=function( this[i] )</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Apply(System.String,System.Func{System.Object,System.Object,System.Object},System.Object)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column. 
            The first parameter to the binary function is the column element; 
            the second parameter is the passed object. 
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>object</c> parameters and returns an <c>object</c>.
            </param>
            <param name="o">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], s )</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Apply(System.String,System.Func{System.Object,System.Object,System.Object},CenterSpace.NMath.Stats.DFGenericColumn)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>object</c> parameters and returns an <c>object</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], column[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Apply(System.String,System.Func{System.Double,System.Double})">
            <summary>
            Returns a new numeric column with the given name and same size as 
            this column, whose values are the result of applying the given 
            double unary function to each element of this column.
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a single <c>double</c> parameter and returns a <c>double</c>.
            </param>
            <returns>
            A new column with the same name and size as self and with 
            <c>c[i] = function( this[i] )</c>.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},System.Double)">
            <summary>
            Returns a new numeric column with the given name and same size as 
            this column, whose values are the result of applying the given 
            double binary function to each element of this column. 
            The first parameter to the binary function is the column element; 
            the second parameter is the passed double-precision value. 
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="d">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], d )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Apply(System.String,System.Func{System.Double,System.Int32,System.Double},System.Int32)">
            <summary>
            Returns a new numeric column with the given name and same size as 
            this column, whose values are the result of applying the given 
            double integer function to each element of this column.
            The first parameter to the binary function is the column element; 
            the second parameter is the passed integer value. 
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a <c>double</c> parameter and an <c>integer</c> parameter and returns a 
            <c>double</c>.
            </param>
            <param name="x">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], x )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns a new numeric column with the given name and same size as this 
            column, whose values are the result of applying the given double binary 
            function to each element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed vector.
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="v">A vector of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], v[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed vector
            is not the same length as this column.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Stats.DFNumericColumn)">
            <summary>
            Returns a new numeric column with the given name and size as this column, 
            whose values are the result of applying the given binary function to each 
            element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed column.
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], column[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Apply(System.String,System.Func{System.Double,System.Boolean})">
            <summary>
            Returns a new numeric column with the given name and size containing the items 
            in this column that evaluate to <c>true</c> using the given logical function.
            </summary>
            <remarks>
            For example, if you apply a function that returns <c>true</c> if a number is
            greater than two to a column containing <c>1, 3, 4, 5, 3, 2, 4</c>, a new column 
            containing <c>3, 4, 5, 3, 4</c> is returned.
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that takes a single <c>double</c> 
            parameter and returns a <c>bool</c>.
            </param>
            <returns>
            A new column with the given name containing the items in this column that evaluate to
            <c>true</c> using the given logical function. 
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Clean">
            <summary>
            Returns a copy of this column without missing values.
            </summary>
            <returns>A column cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Clone">
            <summary>
            Returns a deep copy of this column.
            </summary>
            <returns>A clone of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.IsMissing(System.Int32)">
            <summary>
            Returns <c>true</c> if the element at the given position is missing; 
            otherwise, <c>false</c>.
            </summary>
            <param name="i">An element index.</param>
            <returns>
            Returns <c>true</c> if <c>this[i] == this.MissingValue</c>; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.SubColumn(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the subcolumn specified by the given Subset.
            </summary>
            <param name="subset">A subset.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Transform(System.Func{System.Object})">
            <summary>
            Modifies the elements of this column by applying the given no-argument function to 
            each element.
            </summary> 
            <param name="function">A delegate object representing a function that
            takes no parameters and returns an <c>object</c>.</param>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Transform(System.Func{System.Object,System.Object})">
            <summary>
            Modifies the elements of this column by applying the given unary function to 
            each element.
            </summary>
            <param name="function">A delegate object representing a function that
            takes a single <c>object</c> parameter and returns an <c>object</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i] ).</c></remarks>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Transform(System.Func{System.Object,System.Object,System.Object},System.Object)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is 
            the column element; the second parameter is the passed object.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>object</c> parameters and returns an <c>object</c>.
            </param>
            <param name="o">The second parameter to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], s )</c>.</remarks>
            <returns>A reference to self.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFGenericColumn.Transform(System.Func{System.Object,System.Object,System.Object},CenterSpace.NMath.Stats.DFGenericColumn)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the corresponding element of the passed 
            column.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>object</c> parameters and returns an <c>object</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], column[i] )</c>.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
            <returns>A reference to self.</returns> 
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFIntColumn">
            <summary>
            Class DFIntColumn represents a column of integer data in a data frame.
            </summary>
            <remarks>Elements are stored as <c>System.Int32</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.#ctor(System.String)">
            <summary>
            Constructs a DFIntColumn instance with the given name, an integer
            format as specified in <c>StatsSettings.IntegerFormat</c> and a
            missing value as specified in <c>StatsSettings.IntegerMissingValue</c>.
            </summary>
            <param name="name">The name of the column.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.#ctor(System.String,System.Int32[])">
            <summary>
            Constructs a DFIntColumn instance with the given name, an integer
            format as specified in <c>StatsSettings.IntegerFormat</c> and a
            missing value as specified in 
            <c>StatsSettings.IntegerMissingValue</c>. Column elements are 
            initialized with data from the given array.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">An array of integers.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.#ctor(System.String,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a DFIntColumn instance with the given name. Column elements are
            initialized with data from the given column, after conversion to int.
            </summary>
            <remarks>
            If the specified column is a DFIntColumn, then this new column will use its
            integer format and missing value settings. Otherwise, the defaults in
            <c>StatsSettings.IntegerFormat</c> and 
            <c>StatsSettings.IntegerMissingValue</c> will be used.
            </remarks>
            <param name="name">The name of the column.</param>
            <param name="data">A column of data.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data cannot be converted to int.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFIntColumn.ColumnType">
            <summary>
            Gets the type of the objects held by this column.
            </summary>
            <returns>Returns <c>System.Double</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFIntColumn.IntegerFormat">
            <summary>
            Gets and sets the integer format.
            </summary>
            <remarks>Set to <c>null</c> to restore the default.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFIntColumn.MissingValue">
            <summary>
            Gets and sets the value used to represent missing values in this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFIntColumn.Item(System.Int32)">
            <summary>
            Gets the object in this column at the given position.
            </summary>
            <remarks>Returns an int.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Int32,System.Int32})">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given unary 
            function to each element of this column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a single <c>int</c> parameter and returns an <c>int</c>.
            </param>
            <returns>
            A new column with the same name and size as self and with 
            <c>c[i] = function( this[i] )</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Int32,System.Int32,System.Int32},System.Int32)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column. 
            The first parameter to the binary function is the column element; 
            the second parameter is the passed integer value. 
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>int</c> parameters and returns an <c>int</c>.
            </param>
            <param name="x">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], x )</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Int32,System.Int32,System.Int32},CenterSpace.NMath.Stats.DFIntColumn)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>int</c> parameters and returns an <c>int</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], column[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Int32,System.Boolean})">
            <summary>
            Returns a new column with the given name and size containing the items in 
            this column that evaluate to <c>true</c> using the given logical function.
            </summary>
            <remarks>
            For example, if you apply a function that returns <c>true</c> if a number is
            greater than two to a column containing <c>1, 3, 4, 5, 3, 2, 4</c>, a new 
            column containing <c>3, 4, 5, 3, 4</c> is returned.
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that takes a single <c>int</c> 
            parameter and returns a <c>bool</c>.
            </param>
            <returns>
            A new column with the given name containing the items in this column that evaluate to
            <c>true</c> using the given logical function. 
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Double,System.Double})">
            <summary>
            Returns a new numeric column with the given name and same size as 
            this column, whose values are the result of applying the given 
            double unary function to each element of this column.
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a single <c>double</c> parameter and returns a <c>double</c>.
            </param>
            <returns>
            A new column with the same name and size as self and with 
            <c>c[i] = function( this[i] )</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},System.Double)">
            <summary>
            Returns a new numeric column with the given name and same size as 
            this column, whose values are the result of applying the given 
            double binary function to each element of this column. 
            The first parameter to the binary function is the column element; 
            the second parameter is the passed double-precision value. 
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="d">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], d )</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Double,System.Int32,System.Double},System.Int32)">
            <summary>
            Returns a new numeric column with the given name and same size as 
            this column, whose values are the result of applying the given 
            double integer function to each element of this column.
            The first parameter to the binary function is the column element; 
            the second parameter is the passed integer value. 
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a <c>double</c> parameter and an <c>integer</c> parameter and returns a 
            <c>double</c>.
            </param>
            <param name="x">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], x )</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns a new numeric column with the given name and same size as this 
            column, whose values are the result of applying the given double binary 
            function to each element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed vector.
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="v">A vector of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], v[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed vector
            is not the same length as this column.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Stats.DFNumericColumn)">
            <summary>
            Returns a new numeric column with the given name and size as this column, 
            whose values are the result of applying the given binary function to each 
            element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed column.
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], column[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Apply(System.String,System.Func{System.Double,System.Boolean})">
            <summary>
            Returns a new numeric column with the given name and size containing the items 
            in this column that evaluate to <c>true</c> using the given logical function.
            </summary>
            <remarks>
            For example, if you apply a function that returns <c>true</c> if a number is
            greater than two to a column containing <c>1, 3, 4, 5, 3, 2, 4</c>, a new column 
            containing <c>3, 4, 5, 3, 4</c> is returned.
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that takes a single <c>double</c> 
            parameter and returns a <c>bool</c>.
            </param>
            <returns>
            A new column with the given name containing the items in this column that evaluate to
            <c>true</c> using the given logical function. 
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Clean">
            <summary>
            Returns a copy of this column without missing values.
            </summary>
            <returns>A column cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Clone">
            <summary>
            Returns a deep copy of this column.
            </summary>
            <returns>A clone of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Convert(System.Object)">
            <summary>
            Converts an object to the type held by this column.
            </summary>
            <param name="obj">An object.</param>
            <returns>A converted object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.IsMissing(System.Int32)">
            <summary>
            Returns <c>true</c> if the element at the given position is missing; 
            otherwise, <c>false</c>.
            </summary>
            <param name="i">An element index.</param>
            <returns>
            Returns <c>true</c> if <c>this[i] == this.MissingValue</c>; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.SubColumn(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the subcolumn specified by the given Subset.
            </summary>
            <param name="subset">A subset.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.ToString(System.Int32)">
            <summary>
            Formatted string representation of the date. Uses StatsSettings value.
            </summary>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>. 
            Formatting uses <c>StatsSettings.IntegerFormat</c>.
            </remarks>
            <param name="index">Index into column.</param>
            <returns>A formatted string representation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.ToString(System.Int32,System.String)">
            <summary>
            Formatted string representation of the date. Uses StatsSettings value.
            </summary>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>. 
            </remarks>
            <param name="index">Index into column.</param>
            <param name="format">Specified format such as "C"</param>
            <returns>A formatted string representation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.ToStringArray">
            <summary>
            Exports the contents of this column to an array of strings.
            </summary>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>.
            Formatting uses <c>StatsSettings.IntegerFormat</c>.
            </remarks>
            <returns>A string[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.ToStringArray(System.String)">
            <summary>
            Exports the contents of this column to an array of strings.
            </summary>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>. 
            </remarks>
            <param name="format">Numeric format such as "C"</param>
            <returns>A string[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Transform(System.Func{System.Int32})">
            <summary>
            Modifies the elements of this column by applying the given no-argument function 
            to each element.
            </summary> 
            <param name="function">A delegate object representing a function that
            takes no parameters and returns a <c>int</c>.</param>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Transform(System.Func{System.Int32,System.Int32})">
            <summary>
            Modifies the elements of this column by applying the given unary function 
            to each element.
            </summary>
            <param name="function">A delegate object representing a function that
            takes a single <c>int</c> parameter and returns an <c>int</c>.</param>
            <remarks>Upon exit, <c>this[i] = function(this[i]).</c></remarks>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Transform(System.Func{System.Int32,System.Int32,System.Int32},System.Int32)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the passed integer value.
            </summary>
            <param name="function">
            A delegate object representing a function that takes two 
            <c>int</c> parameters and returns an <c>int</c>.
            </param>
            <param name="x">The second parameter to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], x )</c>.</remarks>
            <returns>A reference to self.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFIntColumn.Transform(System.Func{System.Int32,System.Int32,System.Int32},CenterSpace.NMath.Stats.DFIntColumn)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the corresponding element of the passed 
            column.
            </summary>
            <param name="function">
            A delegate object representing a function that takes two <c>int</c> 
            parameters and returns an <c>int</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], column[i] )</c>.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
            <returns>A reference to self.</returns> 
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFNumericColumn">
            <summary>
            Class DFNumericColumn represents a column of numeric data in a data frame.
            </summary>
            <remarks>Elements are stored as <c>System.Double</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.#ctor(System.String)">
            <summary>
            Constructs a DFNumericColumn instance with the given name, a
            floating-point format as specified in <c>StatsSettings.NumericFormat</c>
            and a missing value as specified in 
            <c>StatsSettings.NumericMissingValue</c>.
            </summary>
            <param name="name">The name of the column.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.#ctor(System.String,System.Double[])">
            <summary>
            Constructs a DFNumericColumn instance with the given name, a
            floating-point format as specified in <c>StatsSettings.NumericFormat</c>
            and a missing value as specified in 
            <c>StatsSettings.NumericMissingValue</c>. Column elements are 
            initialized with data from the given array.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">An array of doubles.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.#ctor(System.String,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a DFNumericColumn instance with the given name, a
            floating-point format as specified in <c>StatsSettings.NumericFormat</c>
            and a missing value as specified in 
            <c>StatsSettings.NumericMissingValue</c>. Column elements are 
            initialized with data from the given DoubleVector.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">A DoubleVector.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.#ctor(System.String,System.Int32[])">
            <summary>
            Constructs a DFNumericColumn instance with the given name, a
            floating-point format as specified in <c>StatsSettings.NumericFormat</c>
            and a missing value as specified in 
            <c>StatsSettings.NumericMissingValue</c>. Column elements are 
            initialized with data from the given array.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">An array of integers.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.#ctor(System.String,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a DFNumericColumn instance with the given name. Column 
            elements are initialized with data from the given column, after 
            conversion to double.
            </summary>
            <remarks>
            If the specified column is a DFNumericColumn, then this new column will 
            use its numeric format and missing value settings. Otherwise, the defaults 
            in <c>StatsSettings.NumericFormat</c> and 
            <c>StatsSettings.NumericMissingValue</c> will be used.
            </remarks>
            <param name="name">The name of the column.</param>
            <param name="data">A column of data.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data cannot be converted to double.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFNumericColumn.ColumnType">
            <summary>
            Gets the type of the objects held by this column.
            </summary>
            <returns>Returns <c>System.Double</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFNumericColumn.FloatPrecision">
            <summary>
            Gets and sets the floating precision as the number of decimal places.
            </summary>
            <remarks>
            Will return <c>-1</c> if the format is not of type <c>F</c> for fixed-point.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFNumericColumn.NumericFormat">
            <summary>
            Gets and sets the numeric format.
            </summary>
            <remarks>Set to <c>null</c> to restore the default.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFNumericColumn.MissingValue">
            <summary>
            Gets and sets the value used to represent missing values in this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFNumericColumn.Item(System.Int32)">
            <summary>
            Gets the object in this column at the given position.
            </summary>
            <remarks>Returns a double.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Apply(System.String,System.Func{System.Double,System.Double})">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given unary 
            function to each element of this column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a single <c>double</c> parameter and returns a <c>double</c>.
            </param>
            <returns>
            A new column with the same name and size as self and with 
            <c>c[i] = function( this[i] )</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},System.Double)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column. 
            The first parameter to the binary function is the column element; 
            the second parameter is the passed double-precision value. 
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="d">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], d )</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Apply(System.String,System.Func{System.Double,System.Int32,System.Double},System.Int32)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given integer 
            function to each element of this column.
            The first parameter to the binary function is the column element; 
            the second parameter is the passed integer value. 
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a <c>double</c> parameter and an <c>integer</c> parameter and returns a 
            <c>double</c>.
            </param>
            <param name="x">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], x )</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns a new column with the given name and same size as this column, 
            whose values are the result of applying the given binary function to 
            each element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed vector.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="v">A vector of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], v[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed vector
            is not the same length as this column.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Stats.DFNumericColumn)">
            <summary>
            Returns a new column with the given name and size as this column, whose 
            values are the result of applying the given binary function to each 
            element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], column[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Apply(System.String,System.Func{System.Double,System.Boolean})">
            <summary>
            Returns a new column with the given name and size containing the items in this 
            column that evaluate to <c>true</c> using the given logical function.
            </summary>
            <remarks>
            For example, if you apply a function that returns <c>true</c> if a number is
            greater than two to a column containing <c>1, 3, 4, 5, 3, 2, 4</c>, a new column 
            containing <c>3, 4, 5, 3, 4</c> is returned.
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that takes a single <c>double</c> 
            parameter and returns a <c>bool</c>.
            </param>
            <returns>
            A new column with the given name containing the items in this column that evaluate to
            <c>true</c> using the given logical function. 
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Clean">
            <summary>
            Returns a copy of this column without missing values.
            </summary>
            <returns>A column cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Clone">
            <summary>
            Returns a deep copy of this column.
            </summary>
            <returns>A clone of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Convert(System.Object)">
            <summary>
            Converts an object to the type held by this column.
            </summary>
            <param name="obj">An object.</param>
            <returns>A converted object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.IsMissing(System.Int32)">
            <summary>
            Returns <c>true</c> if the element at the given position is missing; 
            otherwise, <c>false</c>.
            </summary>
            <param name="i">An element index.</param>
            <returns>
            Returns <c>true</c> if the element at the given position equals <c>Double.NaN</c>
            or <c>this.MissingValue</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.SubColumn(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the subcolumn specified by the given Subset.
            </summary>
            <param name="subset">A subset.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.ToString(System.Int32)">
            <summary>
            Formatted string representation of the date. Uses StatsSettings value.
            </summary>
            <remarks>
            Formatting uses <c>StatsSettings.NumericFormat</c>.
            </remarks>
            <param name="index">Index into column.</param>
            <returns>A formatted string representation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.ToString(System.Int32,System.String)">
            <summary>
            Formatted string representation of the date. Uses StatsSettings value.
            </summary>
            <param name="index">Index into column.</param>
            <param name="format">Specified format such as "F3"</param>
            <returns>A formatted string representation.</returns>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.ToStringArray">
            <summary>
            Exports the contents of this column to an array of strings.
            </summary>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>.
            Formatting uses <c>StatsSettings.NumericFormat</c>.
            </remarks>
            <returns>A string[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.ToStringArray(System.String)">
            <summary>
            Exports the contents of this column to an array of strings.
            </summary>
            <param name="format">Numeric format such as "F3"</param>
            <returns>A string[] containing the contents of this column.</returns>
            <remarks>
            Missing values are exported as <c>StatsSettings.MissingStringValue</c>. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Transform(System.Func{System.Double})">
            <summary>
            Modifies the elements of this column by applying the given no-argument function 
            to each element.
            </summary> 
            <param name="function">A delegate object representing a function that
            takes no parameters and returns a <c>double</c>.</param>
            <remarks>For example:
            <code>
            RandGenMTwist rand = new RandGenMTwist();
            DoubleVector randVec = new DoubleVector( 20, rand );
            ...
            // Get new numbers
            randVec.Transform( new StatsFunctions.DoubleFunction( rand.NextDouble );
            ...
            </code>
            </remarks>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Transform(System.Func{System.Double,System.Double})">
            <summary>
            Modifies the elements of this column by applying the given unary function 
            to each element.
            </summary>
            <param name="function">A delegate object representing a function that
            takes a single <c>double</c> parameter and returns a <c>double</c>.</param>
            <remarks>Upon exit, <c>this[i] = function(this[i]).</c></remarks>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Transform(System.Func{System.Double,System.Int32,System.Double},System.Int32)">
            <summary>
            Modifies the contents of this column by applying the given function
            to each element. The first parameter to the function is an element
            of self; the second parameter is the passed integer value.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes a <c>double</c> parameter and an <c>integer</c> and returns a 
            <c>double</c>.
            </param>
            <param name="x">The second parameter to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], x )</c>.</remarks>
            <returns>A reference to self.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Transform(System.Func{System.Double,System.Double,System.Double},System.Double)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the passed double-precision value.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="d">The second parameter to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], d )</c>.</remarks>
            <returns>A reference to self.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Transform(System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the corresponding element of the passed 
            vector.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="v">A vector of parameters to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], v[i] )</c>.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed vector
            is not the same length as this column.</exception>
            <returns>A reference to self.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFNumericColumn.Transform(System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Stats.DFNumericColumn)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the corresponding element of the passed 
            column.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], column[i] )</c>.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
            <returns>A reference to self.</returns> 
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFStringColumn">
            <summary>
            Class DFStringColumn represents a column of string data in a data frame.
            </summary>
            <remarks>Elements are stored as <c>System.String</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.#ctor(System.String)">
            <summary>
            Constructs a DFStringColumn instance with the given name and a
            missing value as specified in 
            <c>StatsSettings.StringMissingValue</c>.
            </summary>
            <param name="name">The name of the column.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.#ctor(System.String,System.String[])">
            <summary>
            Constructs a DFStringColumn instance with the given name and a
            missing value as specified in 
            <c>StatsSettings.StringMissingValue</c>. Column elements are 
            initialized with data from the given array.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">An array of strings.</param>
            <remarks>Once a column instance is constructed, the name cannot be 
            changed. For a modifiable property, see <c>Label</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.#ctor(System.String,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a DFStringColumn instance with the given name. Column elements are
            initialized with data from the given column, after conversion to strings.
            </summary>
            <remarks>
            If the specified column is a DFStringColumn, then this new column will use 
            its missing value setting. Otherwise, the default in 
            <c>StatsSettings.StringMissingValue</c> will be used.
            </remarks>
            <param name="name">The name of the column.</param>
            <param name="data">A column of data.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data cannot be converted to strings.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFStringColumn.ColumnType">
            <summary>
            Gets the type of the objects held by this column.
            </summary>
            <returns>Returns <c>System.String</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFStringColumn.MissingValue">
            <summary>
            Gets and sets the value used to represent missing values in this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFStringColumn.Item(System.Int32)">
            <summary>
            Gets the object in this column at the given position.
            </summary>
            <remarks>Returns a string.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.String,System.String})">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given unary 
            function to each element of this column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a single <c>string</c> parameter and returns a <c>string</c>.
            </param>
            <returns>
            A new column with the same name and size as self and with 
            <c>c[i]=function( this[i] )</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.String,System.String,System.String},System.String)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column. 
            The first parameter to the binary function is the column element; 
            the second parameter is the passed string. 
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>string</c> parameters and returns a <c>string</c>.
            </param>
            <param name="s">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], s )</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.String,System.String,System.String},CenterSpace.NMath.Stats.DFStringColumn)">
            <summary>
            Returns a new column with the given name and same size as this 
            column, whose values are the result of applying the given binary 
            function to each element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed column.
            </summary>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>string</c> parameters and returns a <c>string</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], column[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Returns a new column with the given name and size containing the items in this 
            column that evaluate to <c>true</c> using the given logical function.
            </summary>
            <remarks>
            For example, if you apply a function that returns <c>true</c> if a string
            starts with "b" to a column containing <c>"banana", "apple", "boat", "car"</c>, 
            a new column containing <c>"banana", "boat"</c> is returned.
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that takes a single <c>string</c> 
            parameter and returns a <c>bool</c>.
            </param>
            <returns>
            A new column with the given name containing the items in this column that evaluate to
            <c>true</c> using the given logical function. 
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.Double,System.Double})">
            <summary>
            Returns a new numeric column with the given name and same size as 
            this column, whose values are the result of applying the given 
            double unary function to each element of this column.
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a single <c>double</c> parameter and returns a <c>double</c>.
            </param>
            <returns>
            A new column with the same name and size as self and with 
            <c>c[i] = function( this[i] )</c>.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},System.Double)">
            <summary>
            Returns a new numeric column with the given name and same size as 
            this column, whose values are the result of applying the given 
            double binary function to each element of this column. 
            The first parameter to the binary function is the column element; 
            the second parameter is the passed double-precision value. 
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="d">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], d )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.Double,System.Int32,System.Double},System.Int32)">
            <summary>
            Returns a new numeric column with the given name and same size as 
            this column, whose values are the result of applying the given 
            double integer function to each element of this column.
            The first parameter to the binary function is the column element; 
            the second parameter is the passed integer value. 
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes a <c>double</c> parameter and an <c>integer</c> parameter and returns a 
            <c>double</c>.
            </param>
            <param name="x">The second parameter to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], x )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns a new numeric column with the given name and same size as this 
            column, whose values are the result of applying the given double binary 
            function to each element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed vector.
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="v">A vector of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], v[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed vector
            is not the same length as this column.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.Double,System.Double,System.Double},CenterSpace.NMath.Stats.DFNumericColumn)">
            <summary>
            Returns a new numeric column with the given name and size as this column, 
            whose values are the result of applying the given binary function to each 
            element of this column.
            The first parameter to the binary function is an element of self; the
            second parameter is the corresponding element of the passed column.
            </summary>
            <remarks>
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that
            takes two <c>double</c> parameters and returns a <c>double</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <returns>A column with the same name and size as self and with
            <c>c[i] = function( this[i], column[i] )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the values in this column cannot be converted to numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Apply(System.String,System.Func{System.Double,System.Boolean})">
            <summary>
            Returns a new numeric column with the given name and size containing the items 
            in this column that evaluate to <c>true</c> using the given logical function.
            </summary>
            <remarks>
            For example, if you apply a function that returns <c>true</c> if a number is
            greater than two to a column containing <c>1, 3, 4, 5, 3, 2, 4</c>, a new column 
            containing <c>3, 4, 5, 3, 4</c> is returned.
            An attempt will be made to convert each value in this column to a
            <c>double</c> to perform the operation. No data in this column will
            be changed. 
            </remarks>
            <param name="name">
            Name for the new column.
            </param>
            <param name="function">
            A delegate object representing a function that takes a single <c>double</c> 
            parameter and returns a <c>bool</c>.
            </param>
            <returns>
            A new column with the given name containing the items in this column that evaluate to
            <c>true</c> using the given logical function. 
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Clean">
            <summary>
            Returns a copy of this column without missing values.
            </summary>
            <returns>A column cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Clone">
            <summary>
            Returns a deep copy of this column.
            </summary>
            <returns>A clone of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Convert(System.Object)">
            <summary>
            Converts an object to the type held by this column.
            </summary>
            <param name="obj">An object.</param>
            <returns>A converted object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.IsMissing(System.Int32)">
            <summary>
            Returns <c>true</c> if the element at the given position is missing; 
            otherwise, <c>false</c>.
            </summary>
            <param name="i">An element index.</param>
            <returns>
            Returns <c>true</c> if <c>this[i] == this.MissingValue</c>; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.SubColumn(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the subcolumn specified by the given Subset.
            </summary>
            <param name="subset">A subset.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.ToFactor">
            <summary>
            Extract a factor from this column.
            </summary>
            <returns>A factor with levels for the sorted, unique strings in this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Transform(System.Func{System.String})">
            <summary>
            Modifies the elements of this column by applying the given no-argument function to 
            each element.
            </summary> 
            <param name="function">A delegate object representing a function that
            takes no parameters and returns a <c>string</c>.</param>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Transform(System.Func{System.String,System.String})">
            <summary>
            Modifies the elements of this column by applying the given unary function to 
            each element.
            </summary>
            <param name="function">A delegate object representing a function that
            takes a single <c>string</c> parameter and returns a <c>string</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i] ).</c></remarks>
            <returns>A reference to self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Transform(System.Func{System.String,System.String,System.String},System.String)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is 
            the column element; the second parameter is the passed string.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>string</c> parameters and returns a <c>string</c>.
            </param>
            <param name="s">The second parameter to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], s )</c>.</remarks>
            <returns>A reference to self.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFStringColumn.Transform(System.Func{System.String,System.String,System.String},CenterSpace.NMath.Stats.DFStringColumn)">
            <summary>
            Modifies the contents of this column by applying the given binary function
            to each element. The first parameter to the binary function is an element
            of self; the second parameter is the corresponding element of the passed 
            column.
            </summary>
            <param name="function">
            A delegate object representing a function that
            takes two <c>string</c> parameters and returns a <c>string</c>.
            </param>
            <param name="column">A column of parameters to <c>function</c>.</param>
            <remarks>Upon exit, <c>this[i] = function( this[i], column[i] )</c>.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the passed column
            is not the same length as this column.</exception>
            <returns>A reference to self.</returns> 
        </member>
        <member name="T:CenterSpace.NMath.Stats.Distance">
            <summary>
            Class Distance provides functions for computing the distance between objects.
            </summary>
            <remarks>
            Instances of delegate type Distance.Function are used by class ClusterAnalysis
            to compute the distances between singleton objects. Delegates are provided as
            static variables for euclidean, squared euclidean, city-block (Manhattan),
            maximum (Chebychev), and power distance functions. 
            </remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Distance.Function">
            <summary>
            Functor that takes two vectors and returns a measure of the distance 
            (similarity) between them.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Distance.EuclideanFunction">
            <summary>
            Euclidean distance function. Encapsulates <c>Distance.EuclideanDistance</c>
            as a Distance.Function delegate.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Distance.SquaredEuclideanFunction">
            <summary>
            Squared Euclidean distance function. Encapsulates <c>Distance.SquaredEuclideanDistance</c>
            as a Distance.Function delegate.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Distance.CityBlockFunction">
            <summary>
            City-block (Manhattan) distance function. Encapsulates <c>Distance.CityBlockDistance</c>
            as a Distance.Function delegate.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Distance.MaximumFunction">
            <summary>
            Maximum (Chebychev) distance function. Encapsulates <c>Distance.MaximumDistance</c>
            as a Distance.Function delegate.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Distance.PowerFunction(System.Double,System.Double)">
            <summary>
            Power distance function. Encapsulates <c>GetDistance()</c> on a newly constructed
            Distance.PowerDistance object as a Distance.Function delegate.
            </summary>
            <remarks>
            The power distance is computed as: 
            <code>
            distance( x, y ) = ( |xi - yi|^p )^1/r
            </code>
            Missing values are allowed. Pairs of elements are excluded from the 
            distance measure when their comparison returns NaN. If all pairs are 
            excluded, NaN is returned for the distance measure.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Distance.EuclideanDistance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the Euclidean distance between two data sets (2 norm).
            </summary>
            <remarks>
            Euclidean distance is simply the geometric distance in the
            multidimensional space. This distance is computed as: 
            <code>
            distance( x, y ) = sqrt( sum ( xi - yi )^2 )
            </code>
            Missing values are allowed. Pairs of elements are excluded from the 
            distance measure when their comparison returns NaN. If all pairs are 
            excluded, NaN is returned for the distance measure.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>The distance between <c>data1</c> and <c>data2</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if the given data sets do not have equal lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Distance.SquaredEuclideanDistance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the squared Euclidean distance between two data sets.
            </summary>
            <remarks>
            This distance is computed as: 
            <code>
            distance( x, y ) = sum ( xi - yi )^2 
            </code>
            Squaring the simple Euclidean distance places progressively greater
            weight on objects that are further apart.
            <br/>
            Missing values are allowed. Pairs of elements are excluded from the 
            distance measure when their comparison returns NaN. If all pairs are 
            excluded, NaN is returned for the distance measure.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>The distance between <c>data1</c> and <c>data2</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if the given data sets do not have equal lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Distance.CityBlockDistance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Compute the city-block (Manhattan) distance between two data sets (1 norm).
            </summary>
            <remarks>
            This distance is computed as: 
            <code>
            distance( x, y ) = sum ( | xi - yi | )
            </code>
            In most cases, the city-block distance measure yields results similar to the
            simple Euclidean distance. Note, however, that the effect of outliers is
            dampened, since they are not squared. 
            <br/>
            Missing values are allowed. Pairs of elements are excluded from the 
            distance measure when their comparison returns NaN. If all pairs are 
            excluded, NaN is returned for the distance measure.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>The distance between <c>data1</c> and <c>data2</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if the given data sets do not have equal lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Distance.MaximumDistance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the maximum (Chebychev) distance between two data sets.
            </summary>
            <remarks>
            This distance is computed as: 
            <code>
            distance( x, y ) = maximum( |xi - yi| )
            </code>
            This distance measure may be appropriate in cases when you want to
            define two objects as different if they differ on any one
            of the dimensions. 
            <br/>
            Missing values are allowed. Pairs of elements are excluded from the 
            distance measure when their comparison returns NaN. If all pairs are 
            excluded, NaN is returned for the distance measure.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>The distance between <c>data1</c> and <c>data2</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if the given data sets do not have equal lengths.
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Distance.PowerDistance">
            <summary>
            Class PowerDistance compute the power distance between two vectors.
            </summary>
            <remarks>
            The power distance is computed as: 
            <code>
            distance( x, y ) = ( |xi - yi|^p )^1/r
            </code>
            where <c>p</c> and <c>r</c> are user-defined parameters. Parameter <c>p</c>
            controls the progressive weight that is placed on differences on individual
            dimensions; parameter <c>r</c> controls the progressive weight that is placed
            on larger differences between objects. Appropriate selections of <c>p</c> and
            <c>r</c> yield Euclidean, squared Euclidean, Minkowski, city-block, and many
            other distance metrics. For example, if <c>p</c> and <c>r</c> are equal to 2,
            the power distance is equal to the Euclidean distance. 
            <br/>
            Property <c>DistanceDelegate</c> returns a <c>Distance.Function</c>
            delegate that encapsulates <c>this.GetDistance</c>. The returned delegate can be
            used by an instance of class ClusterAnalysis for computing the distances between
            objects during cluster analysis using the power distance metric.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Distance.PowerDistance.#ctor">
            <summary>
            Default constructor. Sets <c>p</c> and <c>r</c> equal to 2, equivalent
            to the Euclidean distance.
            </summary>
            <remarks>
            The power distance is computed as: 
            <code>
            distance( x, y ) = ( |xi - yi|^p )^1/r
            </code>
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Distance.PowerDistance.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a PowerDistance instance using the given parameters.
            </summary>
            <remarks>
            The power distance is computed as: 
            <code>
            distance( x, y ) = ( |xi - yi|^p )^1/r
            </code>
            Appropriate selections of <c>p</c> and <c>r</c> yield Euclidean, squared
            Euclidean, Minkowski, city-block, and many other distance metrics.
            For example, if <c>p</c> and <c>r</c> are equal to 2, the power distance is
            equal to the Euclidean distance.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Distance.PowerDistance.P">
            <summary>
            Gets and sets the power for the power distance calculation.
            </summary>
            <remarks>
            The power distance is computed as: 
            <code>
            distance( x, y ) = ( |xi - yi|^p )^1/r
            </code>
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Distance.PowerDistance.R">
            <summary>
            Gets and sets the root for the power distance calculation.
            </summary>
            <remarks>
            The power distance is computed as: 
            <code>
            distance( x, y ) = ( |xi - yi|^p )^1/r
            </code>
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Distance.PowerDistance.Function">
            <summary>
            Returns a <c>Distance.Function</c> delegate that encapsulates
            <c>this.GetDistance</c>.
            </summary>
            <remarks>
            The returned delegate can be used by an instance of class
            ClusterAnalysis for computing the distances between objects.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Distance.PowerDistance.Clone">
            <summary>
            Creates a deep copy of this PowerDistance.
            </summary>
            <returns>A deep copy of this PowerDistance.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Distance.PowerDistance.GetDistance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns the power distance between two data sets, using the current
            values of parameters <c>p</c> and <c>r</c>.
            </summary>
            <remarks>
            The power distance is computed as: 
            <code>
            distance( x, y ) = ( |xi - yi|^p )^1/r
            </code>
            Missing values are allowed. Pairs of elements are excluded from the 
            distance measure when their comparison returns NaN. If all pairs are 
            excluded, NaN is returned for the distance measure.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>The power distance between <c>data1</c> and <c>data2</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if the given data sets do not have equal lengths.
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DoublePCA">
            <summary>
            Class DoublePCA performs a principal component analysis on a given
            double-precision data matrix, or data frame.
            </summary>
            <remarks>
            The first principal component accounts for as much of the variability
            in the data as possible, and each succeeding component accounts for as
            much of the remaining variability as possible.
            <br/>
            The calculation is performed using a singular value decomposition
            of the data matrix. The data may optionally be centered and scaled
            before analysis takes place.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePCA.x_">
            <summary>
            The data matrix.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePCA.v_">
            <summary>
            Right eigenvectors.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePCA.d_">
            <summary>
            Eigenvalues.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePCA.center_">
            <summary>
            If <c>true</c>, the data supplied at construction time will be shifted to be
            zero-centered.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePCA.scale_">
            <summary>
            If <c>true</c>, the data supplied at construction time will be scaled to have
            unit variance.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePCA.means_">
            <summary>
            Column means. Used for centering.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePCA.norms_">
            <summary>
            Column 1-norms. Used for scaling.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePCA.scores_">
            <summary>
            Scores matrix.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePCA.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePCA.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a DoublePCA instance from the given data.
            </summary>
            <param name="data">
            A matrix containing the data. Each column represents a variable; each
            row an observation.
            </param>
            <remarks>
            By default, variables are centered but not scaled before analysis takes place.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePCA.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Boolean,System.Boolean)">
            <summary>
            Constructs a DoublePCA instance from the given data,
            optionally centering and scaling the data before analysis takes place.
            </summary>
            <param name="data">
            A matrix containing the data. Each column represents a variable; each
            row an observation.
            </param>
            <param name="center">
            A boolean value indicating whether the variables should be
            shifted to be zero-centered before analysis takes place. 
            </param>
            <param name="scale">
            A boolean value indicating indicating whether the variables should be
            scaled to have unit variance before analysis takes place.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePCA.#ctor(CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Constructs a DoublePCA instance from the given data.
            </summary>
            <param name="data">
            A data frame containing the data. Each column represents a variable; each
            row an observation. Non-numeric columns are ignored.
            </param>
            <remarks>
            By default, variables are centered but not scaled before analysis takes
            place.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePCA.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Boolean,System.Boolean)">
            <summary>
            Constructs a DoublePCA instance from the given data,
            optionally centering and scaling the data before analysis takes place.
            </summary>
            <param name="data">
            A data frame containing the data. Each column represents a variable; each
            row an observation. Non-numeric columns are ignored.
            </param>
            <param name="center">
            A boolean value indicating whether the variables should be
            shifted to be zero-centered before analysis takes place. 
            </param>
            <param name="scale">
            A boolean value indicating indicating whether the variables should be
            scaled to have unit variance before analysis takes place.
            </param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.Data">
            <summary>
            Gets the data matrix.
            </summary>
            <remarks>
            If centering or scaling were specified at construction time, the returned
            matrix may not match the original data.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.NumberOfObservations">
            <summary>
            Gets the number of observations in the data matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.NumberOfVariables">
            <summary>
            Gets the number of variables in the data matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.IsCentered">
            <summary>
            Returns <c>true</c> if the data supplied at construction time was
            shifted to be zero-centered.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.IsScaled">
            <summary>
            Returns <c>true</c> if the data supplied at construction time was
            scaled to have unit variance.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.Means">
            <summary>
            Gets the column means of the data matrix.
            </summary>
            <remarks>
            If centering is specified, the column means are substracted from
            the column values before analysis takes place.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.Norms">
            <summary>
            Gets the column norms (1-norm).
            </summary>
            <remarks>
            If scaling is specified, column values are scaled to have unit variance 
            before analysis by dividing by the column norm.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.Loadings">
            <summary>
            Gets the loading matrix. Each column is a principal component.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.Scores">
            <summary>
            Gets the score matrix.
            </summary>
            <remarks>
            The scores are the data formed by transforming the original data into
            the space of the principal components.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.Eigenvalues">
            <summary>
            Gets the eigenvalues of the covariance/correlation matrix, though the
            calculation is actually performed using the singular values of the data
            matrix.
            </summary>
            <remarks>
            The eigenvalues of the covariance/correlation matrix are equal to the squares
            of the standard deviations of the principal components. 
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.StandardDeviations">
            <summary>
            Gets the standard deviations of the principal components.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.VarianceProportions">
            <summary>
            Gets the proportion of the total variance accounted for by each 
            principal component.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.CumulativeVarianceProportions">
            <summary>
            Gets the cumulative variance proportions.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePCA.Item(System.Int32)">
            <summary>
            Gets the specified principal component.
            </summary>
            <param name="index">The (zero-based) index of the principal component to return.</param>
            <returns>The specified principal component.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if <c>index</c> is less
            than zero or greater than or equal to <c>NumberOfVariables</c>.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePCA.Clone">
            <summary>
            Creates a deep copy of this principal component analysis.
            </summary>
            <returns>A deep copy of this principal component analysis.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePCA.Threshold(System.Double)">
            <summary>
            Gets the number of principal components required to account for the given
            proportion of the total variance.
            </summary>
            <param name="varianceProportion">A variance proportion between 0 and 1.</param>
            <returns>
            The number of the principal components whose cumulative proportion 
            of the variance is greater than or equal to the given value.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the given proportion
            of total variance is less than 0 or greater than 1.</exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ExponentialDistribution">
            <summary>
            Class ExponentialDistribution represents the Exponential probability distribution.
            </summary>
            <remarks>The probability density function of the exponential distribution is given
            by the formula:
            <c>f(x:lambda) = lamba*exp(-lambda*x)</c>
            where lambda > 0 is often called the rate parameter.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ExponentialDistribution.#ctor(System.Double)">
            <summary>
            Constructs an ExponentialDistribution instance with the given rate parameter
            lambda.
            </summary>
            <param name="lambda">Rate parameter. Must be positive.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the rate parameter,
            <c>lambda</c> is less than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ExponentialDistribution.Lambda">
            <summary>
            Gets and sets the rate parameter lambda.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the rate parameter,
            <c>lambda</c> is less than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ExponentialDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ExponentialDistribution.Variance">
            <summary>
             Gets the variance of the distribution.
             <remarks>The variance of the distribution is the standard deviation squared.
             </remarks>
             </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ExponentialDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ExponentialDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ExponentialDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this exponential density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ExponentialDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated a the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If the input probability, p, is less than 0 or greater than 1 the 
            NaN value is returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ExponentialDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ExponentialDistribution.Clone">
            <summary>
            Creates a deep copy of this ExponentialDistribution.
            </summary>
            <returns>A deep copy of this ExponentialDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ExponentialDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Factor">
            <summary>
            Class Factor represents a categorical vector in which all elements are drawn from 
            a finite number of factor levels.  
            </summary>
            <remarks>
            Factors are usually constructed from a data frame column using the GetFactor() method.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Factor.name_">
            <summary>
            The name of this vector.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.#ctor(System.Object[],System.Int32[])">
            <summary>
            Constructs a Factor instance from the given array of factor levels, and the given data array 
            consisting of indices into the factor levels.
            </summary>
            <param name="levels">An array of factor levels.</param>
            <param name="data">A data array consisting of indices into the factor levels.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if <c>data</c> contains an invalid level.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.#ctor(System.Object[],System.Int32[],System.String)">
            <summary>
            Constructs a Factor instance with the specified name from the given array of factor
            levels, and the given data array consisting of indices into the factor levels.
            </summary>
            <param name="levels">An array of factor levels.</param>
            <param name="data">A data array consisting of indices into the factor levels.</param>
            <param name="name">The factor name.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if <c>data</c> contains an invalid level.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.#ctor(System.Object[])">
            <summary>
            Constructs a Factor instance from the given array of objects.
            </summary>
            <remarks>Factor levels are constructed from a sorted list of unique
            values in <c>values</c>.</remarks>
            <param name="values">An array of objects.</param>
            <example><code>
            object[] values = { "Child", "Child", "Elderly", "Child", "Adult", "Elderly", "Adult" };
            f = new Factor( values );
            
            // f.Levels = { "Adult", "Child", "Elderly" }
            // f.Data = { 1,1,2,1,0,2,0 }
            // f[0] = "Child"
            // f[1] = "Child"
            // f[2] = "Elderly"
            // ...
            </code></example>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.#ctor(System.Object[],System.String)">
            <summary>
            Constructs a Factor instance from the given array of objects.
            </summary>
            <remarks>Factor levels are constructed from a sorted list of unique
            values in <c>values</c>.</remarks>
            <param name="values">An array of objects.</param>
            <param name="name">The factor name.</param>
            <example><code>
            object[] values = { "Child", "Child", "Elderly", "Child", "Adult", "Elderly", "Adult" };
            f = new Factor( values );
            
            // f.Levels = { "Adult", "Child", "Elderly" }
            // f.Data = { 1,1,2,1,0,2,0 }
            // f[0] = "Child"
            // f[1] = "Child"
            // f[2] = "Elderly"
            // ...
            </code></example>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.#ctor(System.Object[],System.Object[])">
            <summary>
            Constructs a Factor instance from the given array of objects, using the given
            factor levels.
            </summary>
            <param name="levels">An array of factor levels.</param>
            <param name="values">An array of objects.</param>
            <example><code>
            object[] levels = { "Infant", "Child", "Adult", "Elderly" };
            object[] values = { "Child", "Child", "Elderly", "Child", "Adult", "Elderly", "Adult" };
            f = new Factor( levels, values );
            
            // f.Levels = { "Infant", "Child", "Adult", "Elderly" }
            // f.Data = { 1,1,3,1,2,3,2 }
            // f[0] = "Child"
            // f[1] = "Child"
            // f[2] = "Elderly"
            // ...
            </code></example>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.#ctor(System.Object[],System.Object[],System.String)">
            <summary>
            Constructs a Factor instance from the given array of objects, using the given
            factor levels.
            </summary>
            <param name="levels">An array of factor levels.</param>
            <param name="values">An array of objects.</param>
            <param name="name">The factor name.</param>
            <example><code>
            object[] levels = { "Infant", "Child", "Adult", "Elderly" };
            object[] values = { "Child", "Child", "Elderly", "Child", "Adult", "Elderly", "Adult" };
            f = new Factor( levels, values );
            
            // f.Levels = { "Infant", "Child", "Adult", "Elderly" }
            // f.Data = { 1,1,3,1,2,3,2 }
            // f[0] = "Child"
            // f[1] = "Child"
            // f[2] = "Elderly"
            // ...
            </code></example>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if an element in <c>values</c> is not an element in <c>levels</c>.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Factor.Data">
            <summary>
            Gets the categorical data for this factor.
            </summary>
            <remarks>
            Each element in the returned integer array is an index into <c>this.Levels</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Factor.Levels">
            <summary>
            Gets the levels of this factor.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Factor.Length">
            <summary>
            Gets the length of the data vector for this factor.
            </summary>
            <returns>Returns <c>this.Data.Length</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Factor.Name">
            <summary>
            Gets and set the name of this factor.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Factor.NumberOfLevels">
            <summary>
            Gets the number of levels in this factor.
            </summary>
            <returns>Returns <c>this.Levels.Length</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Factor.Item(System.Int32)">
            <summary>
            Gets the element at the given index.
            </summary>
            <returns>Returns <c>this.Levels[ this.Data[index] ]</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.ToString">
            <summary>
            Returns a formatted string representation of this factor.
            </summary>
            <returns>A formatted string representation of this factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.LevelsToString">
            <summary>
            Returns a formatted string representation of the levels of this factor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.DataToString">
            <summary>
            Returns a formatted string representation of the data of this factor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.Clone">
            <summary>
            Creates a deep copy of this Factor.
            </summary>
            <returns>A deep copy of this Factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.op_Implicit(CenterSpace.NMath.Stats.Factor)~System.String[]">
            <summary>
            Implicitly converts a factor into an array of strings.
            </summary>
            <param name="factor">A factor.</param>
            <returns>An array of <c>factor[i]</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Factor.op_Implicit(CenterSpace.NMath.Stats.Factor)~System.Object[]">
            <summary>
            Implicitly converts a factor into an array of objects.
            </summary>
            <param name="factor">A factor.</param>
            <returns>An array of <c>factor[i]</c>.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FDistribution">
            <summary>
            Class FDistribution represents the F probability distribution.
            </summary>
            <remarks>
            The F distribution is the ratio of two chi-square distributions with degrees 
            of freedom  df1 and df2, respectively, where each chi-square has first been 
            divided by its degrees of freedom.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FDistribution.#ctor">
            <summary>
            Default constructor. Constructs an FDistribution instance with both
            degrees of freedom equal to one.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an FDistribution instance with the specified degrees of
            freedom.
            </summary>
            <param name="df1">First degrees of freedom parameter. If F is thought
            of as the ratio of two chi-square distributions, <c>df1</c> is the
            number of degrees of freedom of the chi-square in the numerator.</param>
            <param name="df2">Second degrees of freedom parameter. If F is thought
            of as the ratio of two chi-square distributions, <c>df2</c> is the
            number of degrees of freedom of the chi-square in the denominator.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if either of the 
            degrees of freedom is less than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FDistribution.DegreesOfFreedom1">
            <summary>
            Gets and sets the first degrees of freedom parameter. 
            </summary>
            <remarks>
            If F is thought of as the ratio of two chi-square distributions,
            <c>DegreesOfFreedom1</c> is the number of degrees of freedom of the
            chi-square in the numerator.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the degrees of 
            freedom is set to a value less than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FDistribution.DegreesOfFreedom2">
            <summary>
            Gets and sets the second degrees of freedom parameter.
            </summary>
            <remarks>
            If F is thought of as the ratio of two chi-square distributions,
            <c>DegreesOfFreedom2</c> is the number of degrees of freedom of the
            chi-square in the denominator.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the degrees of 
            freedom is set to a value less than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <remarks>The mean is not defined when the second degrees of freedom
            parameter is less than three. In this case <c>Double.NaN</c> is returned.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <remarks>The variance of the distribution is the standard deviation squared.
            If the second degrees of freedom for the distribution is less than 5, the variance
            is undefined. In this case <c>Double.NaN</c> is returned.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
            <remarks>
            The skewness is the third central moment divided by the cube of 
            the standard deviation. If the degrees of freedom for the distribution 
            is less than 7, the skewness is undefined. In this case <c>Double.NaN</c>
            is returned.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
            <remarks>
            The kurtosis is the fourth centeral moment divided by the
            fouth power of the standard deviation normalized so that
            the kurtosis if the normal distribution is zero.  If the degrees of 
            freedom for the distribution is less than 9, the skewness is undefined.
            In this case <c>Double.NaN</c> is returned.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this normal density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated at a given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If <c>p</c> is greater than 1 or less than zero, returns <c>Double.NaN</c>
            (Not a Number).</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FDistribution.Clone">
            <summary>
            Creates a deep copy of this FDistribution.
            </summary>
            <returns>A deep copy of this FDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FloatPCA">
            <summary>
            Class FloatPCA performs a principal component analysis on a given single-precision
            data matrix.
            </summary>
            <remarks>
            The first principal component accounts for as much of the variability
            in the data as possible, and each succeeding component accounts for as
            much of the remaining variability as possible.
            <br/>
            The calculation is performed using a singular value decomposition
            of the data matrix. The data may optionally be centered and scaled
            before analysis takes place.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FloatPCA.x_">
            <summary>
            The data matrix.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FloatPCA.v_">
            <summary>
            Right eigenvectors.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FloatPCA.d_">
            <summary>
            Eigenvalues.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FloatPCA.center_">
            <summary>
            If <c>true</c>, the data supplied at construction time will be shifted to be
            zero-centered.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FloatPCA.scale_">
            <summary>
            If <c>true</c>, the data supplied at construction time will be scaled to have
            unit variance.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FloatPCA.means_">
            <summary>
            Column means. Used for centering.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FloatPCA.norms_">
            <summary>
            Column 1-norms. Used for scaling.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.FloatPCA.scores_">
            <summary>
            Scores matrix.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FloatPCA.#ctor(CenterSpace.NMath.Core.FloatMatrix)">
            <summary>
            Constructs a FloatPCA instance from the given data.
            </summary>
            <param name="data">
            A matrix containing the data. Each column represents a variable; each
            row an observation.
            </param>
            <remarks>
            By default, variables are centered but not scaled before analysis takes place.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FloatPCA.#ctor(CenterSpace.NMath.Core.FloatMatrix,System.Boolean,System.Boolean)">
            <summary>
            Constructs a FloatPCA instance from the given data,
            optionally centering and scaling the data before analysis takes place.
            </summary>
            <param name="data">
            A matrix containing the data. Each column represents a variable; each
            row an observation.
            </param>
            <param name="center">
            A boolean value indicating whether the variables should be
            shifted to be zero-centered before analysis takes place. 
            </param>
            <param name="scale">
            A boolean value indicating indicating whether the variables should be
            scaled to have unit variance before analysis takes place.
            </param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.Data">
            <summary>
            Gets the data matrix.
            </summary>
            <remarks>
            If centering or scaling were specified at construction time, the returned
            matrix may not match the original data.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.NumberOfObservations">
            <summary>
            Gets the number of observations in the data matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.NumberOfVariables">
            <summary>
            Gets the number of variables in the data matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.IsCentered">
            <summary>
            Returns <c>true</c> if the data supplied at construction time was
            shifted to be zero-centered.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.IsScaled">
            <summary>
            Returns <c>true</c> if the data supplied at construction time was
            scaled to have unit variance.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.Means">
            <summary>
            Gets the column means of the data matrix.
            </summary>
            <remarks>
            If centering is specified, the column means are substracted from
            the column values before analysis takes place.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.Norms">
            <summary>
            Gets the column norms (1-norm).
            </summary>
            <remarks>
            If scaling is specified, column values are scaled to have unit variance 
            before analysis by dividing by the column norm.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.Loadings">
            <summary>
            Gets the loading matrix. Each column is a principal component.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.Scores">
            <summary>
            Gets the score matrix.
            </summary>
            <remarks>
            The scores are the data formed by transforming the original data into
            the space of the principal components.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.Eigenvalues">
            <summary>
            Gets the eigenvalues of the covariance/correlation matrix, though the
            calculation is actually performed using the singular values of the data
            matrix.
            </summary>
            <remarks>
            The eigenvalues of the covariance/correlation matrix are equal to the squares
            of the standard deviations of the principal components. 
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.StandardDeviations">
            <summary>
            Gets the standard deviations of the principal components.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.VarianceProportions">
            <summary>
            Gets the proportion of the total variance accounted for by each 
            principal component.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.CumulativeVarianceProportions">
            <summary>
            Gets the cumulative variance proportions.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FloatPCA.Item(System.Int32)">
            <summary>
            Gets the specified principal component.
            </summary>
            <param name="index">The (zero-based) index of the principal component to return.</param>
            <returns>The specified principal component.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if <c>index</c> is less
            than zero or greater than or equal to <c>NumberOfVariables</c>.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FloatPCA.Clone">
            <summary>
            Creates a deep copy of this principal component analysis.
            </summary>
            <returns>A deep copy of this principal component analysis.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FloatPCA.Threshold(System.Double)">
            <summary>
            Gets the number of principal components required to account for the given
            proportion of the total variance.
            </summary>
            <param name="varianceProportion">A variance proportion between 0 and 1.</param>
            <returns>
            The number of the principal components whose cumulative proportion 
            of the variance is greater than or equal to the given value.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the given proportion
            of total variance is less than 0 or greater than 1.</exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.GammaDistribution">
            <summary>
            Class GammaDistribution represents the gamma probability distribution.
            </summary>
            <remarks>
            The gamma distribution is a family of curves with two free parameters: alpha and
            beta. When alpha is large, the gamma distribution closely approximates a normal
            distribution.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GammaDistribution.#ctor">
            <summary>
            Default constructor. Constructs a GammaDistribution instance with 
            alpha and beta equal to 1.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GammaDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a GammaDistribution instance with the given alpha and beta.
            </summary>
            <param name="alpha">The alpha shape parameter.</param>
            <param name="beta">The beta shape parameter.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GammaDistribution.Alpha">
            <summary>
            Gets and sets the alpha shape parameter.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if set to a non-positive value.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GammaDistribution.Beta">
            <summary>
            Gets and sets the beta shape parameter.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if set to a non-positive value.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GammaDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GammaDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <remarks>The variance of the distribution is the standard deviation squared.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GammaDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
            <remarks>
            The skewness is the third central moment divided by the cube of 
            the standard deviation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GammaDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
            <remarks>
            The kurtosis is the fourth central moment divided by the
            fouth power of the standard deviation normalized so that
            the kurtosis if the normal distribution is zero.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GammaDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GammaDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GammaDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated at a given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If <c>p</c> is greater than 1 or less than zero, returns <c>Double.NaN</c>
            (Not a Number)
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GammaDistribution.Clone">
            <summary>
            Creates a deep copy of this GammaDistribution.
            </summary>
            <returns>A deep copy of this GammaDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GammaDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.GeometricDistribution">
            <summary>
            Class GeometricDistribution represents the goemetric probability distribution.
            </summary>
            <remarks>The goemetric distribution is the probability distribution of the
            number of failures before the first success. It is supported on the
            set {0, 1, 2, 3,...}</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GeometricDistribution.#ctor(System.Double)">
            <summary>
            Constructs a GeometricDistribution instance with the given probability
            of success.
            </summary>
            <param name="p">The probability of success on each trial. Must be
            greater than zero and less than or equal to one.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if p is less
            than or equal to zero or p is greater than one.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GeometricDistribution.P">
            <summary>
            Gets and sets the probability of success. Must be greater than zero and
            less than or equal to one.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if p is less than or
            equal to zero or p is greater than one.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GeometricDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GeometricDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            <remarks>The variance of the distribution is the standard deviation squared.
            </remarks>
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GeometricDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
            <remarks>
            The kurtosis is the fourth centeral moment divided by the
            fouth power of the standard deviation normalized so that
            the kurtosis if the normal distribution is zero.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GeometricDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GeometricDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative distribution function evaluated at the given value.
            </summary>
            <param name="x">The number of failures before the first success.</param>
            <returns>The probability that the number of failures before the first 
            success is less than or equal to <code>x</code></returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if x is less than zero.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GeometricDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative distribution function evaluated at the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>
            The <c>x</c> for the cumulative distribution function corresponding to the given
            probability.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if p is less than zero or
            greater than one.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GeometricDistribution.PDF(System.Double)">
            <summary>
            Returns the probability distribution function evaluated at the given value.
            </summary>
            <param name="x">The number of failures before the first success.</param>
            <returns>The probability that there are <c>x</c> failures before the
            first success. </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the number of success is set to a negative value.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GeometricDistribution.Clone">
            <summary>
            Creates a deep copy of this GeometricDistribution.
            </summary>
            <returns>A deep copy of this GeometricDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GeometricDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GeometricDistribution.ComputeMoments">
            <summary>
            Computes the moments for this distribution.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.HypothesisType">
            <summary>
            Enumeration for specifying the form of an alternative hypothesis in a 
            hypothesis test.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.HypothesisType.Right">
            <summary>
            One-sided form to the right, <c>H1: mu &gt; mu0</c>.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.HypothesisType.Left">
            <summary>
            One-sided form to the left, <c>H1: mu &lt; mu0</c>.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.HypothesisType.TwoSided">
            <summary>
            Two-sided form, <c>H1: mu != mu0</c>.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ICrossValidationSubsets">
            <summary>
            Interface for generating subsets of data to be used in a cross validation
            process.
            </summary>
            <remarks>
            Each subset contains row indices present in the provided independent and
            dependent data. These matrices should contain the same number of rows.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ICrossValidationSubsets.GetTestingSubsets(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Get cross validation testing subsets from the given partial least squares data.
            </summary>
            <param name="independentData">The independent partial least squares data.</param>
            <param name="dependentData">The dependent partial least squares data.</param>
            <returns>Array of row index subsets.</returns>
            <remarks>The independent and dependent matrices should have the same number 
            of rows as the number of samples.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ICrossValidationSubsets.GetTestingSubsets(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Get cross validation testing subsets from the given partial least squares data.
            </summary>
            <param name="independentData">The independent partial least squares data.</param>
            <param name="dependentData">The dependent partial least squares data.</param>
            <returns>Array of row index subsets. Each subset contains row indices from the 
            input data.</returns>
            <remarks>The independent and dependent DataFrames should have the same number 
            of rows as the number of samples.</remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IDFColumn">
            <summary>
            Interface for data frame column types.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IDFColumn.ColumnType">
            <summary>
            Gets the type of the objects held by this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IDFColumn.IsNumeric">
            <summary>
            Returns <c>true</c> if the objects in this column are of type numeric;
            otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IDFColumn.Label">
            <summary>
            Gets and sets the label in the header of this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IDFColumn.MissingValue">
            <summary>
            Gets and sets the value used to represent missing values in this column.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IDFColumn.Name">
            <summary>
            Gets the name of this column.
            </summary>
            <remarks>The name of a column can only be set in a constructor. Once a column is
            constructed, the name cannot be changed. For a modifiable label, see the <c>Label</c>
            property.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IDFColumn.Item(System.Int32)">
            <summary>
            Gets and sets the objects at the given position.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.Add(System.Object)">
            <summary>
            Adds an object to this column.
            </summary>
            <param name="obj">An object.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.Clean">
            <summary>
            Returns a copy of this column without missing values.
            </summary>
            <returns>A column cleaned of missing values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.Convert(System.Object)">
            <summary>
            Converts an object to the type held by this column.
            </summary>
            <param name="obj">An object.</param>
            <returns>A converted object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.GetFactor">
            <summary>
            Creates a factor from this column. 
            </summary>
            <returns>
            A factor with levels for the sorted, unique elements in this column.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.GetFactor(System.Object[])">
            <summary>
            Creates a factor from this column. 
            </summary>
            <param name="levels">An array of factor levels.</param>
            <returns>
            A factor with the given levels.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if this column contains a value that is not in <c>levels</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an object into this column and the given position.
            </summary>
            <param name="position">An index.</param>
            <param name="obj">The object to be inserted.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.IsMissing(System.Int32)">
            <summary>
            Returns <c>true</c> if the element at the given position is missing; 
            otherwise, <c>false</c>.
            </summary>
            <param name="i">An element index.</param>
            <returns>
            Returns <c>true</c> if <c>this[i] == this.MissingValue</c>; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.RemoveAt(System.Int32)">
            <summary>
            Removes the object from this column at the given position.
            </summary>
            <param name="position">An index.</param>
            <returns>Returns the removed object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.SubColumn(CenterSpace.NMath.Core.Slice)">
            <summary>
            Gets the subcolumn specified by the given Slice.
            </summary>
            <param name="slice">A slice.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.SubColumn(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets the subcolumn specified by the given Subset.
            </summary>
            <param name="subset">A subset.</param>
            <returns>Returns an IDFColumn with the same type as this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps the position of the given elements in the column.
            </summary>
            <param name="position1">An index.</param>
            <param name="position2">An index.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.ToArray">
            <summary>
            Exports the contents of this column to an Array.
            </summary>
            <returns>An Array containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.ToStringArray">
            <summary>
            Exports the contents of this column to an array of strings.
            </summary>
            <returns>A string[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.ToDoubleArray">
            <summary>
            Exports the contents of this column to an array of doubles.
            </summary>
            <returns>A double[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.ToDoubleVector">
            <summary>
            Exports the contents of this column to a DoubleVector.
            </summary>
            <returns>A DoubleVector containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.ToIntArray">
            <summary>
            Exports the contents of this column to an array of integers.
            </summary>
            <returns>An int[] containing the contents of this column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IDFColumn.ToString(System.Int32)">
            <summary>
            Uses formatting.
            </summary>
            <param name="index"></param>
            <returns>Formatted string representation.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.BoolArray">
            <summary>
            Bool array
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Count(System.Boolean[])">
            <summary>
            Count true values in this array
            </summary>
            <param name="array">bool array</param>
            <returns>Counts of trues</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Equals(System.Boolean[],System.Boolean[])">
            <summary>
            If two bool[] are equals
            </summary>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <returns>If equals</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Compare(System.Boolean[],System.Boolean[])">
            <summary>
            Compare two objects. This will compare each element of the two 
            arrays and when one array is shorter and there is a tie, the longer 
            one is "larger".
            </summary>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <returns>Comparing result</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.New(System.Int32,System.Boolean)">
            <summary>
            Create an bool array and fill the values if necessary
            </summary>
            <param name="count">Length of the array</param>
            <param name="aBool">Value to be filled</param>
            <returns>New bool array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Convert(System.Collections.ICollection)">
            <summary>
            Convert a collection to bool[]
            </summary>
            <param name="c">ICollection</param>
            <returns>The converted bool[]. May throw exception</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Fill(System.Boolean[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Fill a bool array with a value
            </summary>
            <param name="bArray">Bool array</param>
            <param name="from">Start index</param>
            <param name="length">Length</param>
            <param name="aBool">Value to be filled</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Fill(System.Boolean[],System.Boolean)">
            <summary>
            Fill a bool array with a value
            </summary>
            <param name="bArray">Bool array</param>
            <param name="aBool">Value to be filled</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Copy(System.Boolean[])">
            <summary>
            Return an exact copy of a bool array
            </summary>
            <param name="bArray">Bool array</param>
            <returns>Copy of the bool array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.ToArray(System.Collections.ICollection)">
            <summary>
            Convert to bool array
            </summary>
            <param name="c">ICollection whose element must be bool</param>
            <returns>bool[]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Append(System.Boolean[],System.Boolean[])">
            <summary>
            Merge two arrays into on array
            </summary>
            <param name="b1">bool array 1</param>
            <param name="b2">bool array 2</param>
            <returns>Merged bool array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Truncate(System.Boolean[],System.Int32)">
            <summary>
            Truncate a bool array
            </summary>
            <param name="b1">bool array 1</param>
            <param name="length">Length to be truncated</param>
            <returns>Truncated bool array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.TruncateLeft(System.Boolean[],System.Int32)">
            <summary>
            Truncate a bool array from the beginning
            </summary>
            <param name="b1">bool array 1</param>
            <param name="length">Length to be truncated</param>
            <returns>Truncated bool array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.SubArray(System.Boolean[],CenterSpace.NMath.Stats.Subset)">
            <summary>
            Get sub array
            </summary>
            <param name="bArray">Bool array</param>
            <param name="subset">Subset</param>
            <returns>Sub bool array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.#ctor(System.Boolean[])">
            <summary>
            store a reference
            </summary>
            <param name="bArray">bool[]</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.#ctor(System.Boolean[],System.Boolean)">
            <summary>
            Construct from an existing bool array and perhaps sort
            </summary>
            <param name="bArray">bool array</param>
            <param name="sort">Sort or not</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.op_Implicit(CenterSpace.NMath.Stats.BoolArray)~System.Boolean[]">
            <summary>
            Implicit casting to bool[], just return the reference
            </summary>
            <param name="boolArray">BoolArray to be casted</param>
            <returns>bool[]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.GetHashCode">
            <summary>
            Override GetHashCode
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.Equals(System.Object)">
            <summary>
            Override equals
            </summary>
            <param name="obj">Another BoolArray</param>
            <returns>If equals</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.ToString">
            <summary>
            String representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.BoolArray.CompareTo(System.Object)">
            <summary>
            Override CompareTo
            </summary>
            <param name="obj">Another BoolArray</param>
            <returns>Comparision result</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFColumnList">
            <summary>
            TableData column list
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.ToArray">
            <summary>
            To IDFColumn array
            </summary>
            <returns>Vector array</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFColumnList.DFColumnListEnumerator">
            <summary>
            	Supports type-safe iteration over a <see cref="T:CenterSpace.NMath.Stats.DFColumnList"/>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumnList.DFColumnListEnumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.DFColumnListEnumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfuly advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.DFColumnListEnumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Synchronized(CenterSpace.NMath.Stats.DFColumnList)">
            <summary>
            Creates a synchronized (thread-safe) wrapper for a 
            <c>DFColumnList</c> instance.
            </summary>
            <returns>
            An <c>DFColumnList</c> wrapper that is synchronized (thread-safe).
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.ReadOnly(CenterSpace.NMath.Stats.DFColumnList)">
            <summary>
            Creates a read-only wrapper for a 
            <c>DFColumnList</c> instance.
            </summary>
            <returns>
            An <c>DFColumnList</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.#ctor">
            <summary>
            Initializes a new instance of the <c>DFColumnList</c> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>DFColumnList</c> class
            that has the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new <c>DFColumnList</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.#ctor(CenterSpace.NMath.Stats.DFColumnList)">
            <summary>
            Initializes a new instance of the <c>DFColumnList</c> class
            that contains elements copied from the specified <c>DFColumnList</c>.
            </summary>
            <param name="c">The <c>DFColumnList</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.#ctor(CenterSpace.NMath.Stats.DFColumn[])">
            <summary>
            Initializes a new instance of the <c>DFColumnList</c> class
            that contains elements copied from the specified <see cref="T:CenterSpace.NMath.Stats.DFColumn"/> array.
            </summary>
            <param name="a">The <see cref="T:CenterSpace.NMath.Stats.DFColumn"/> array whose elements are copied to the new list.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFColumnList.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DFColumnList.Tag.Default">
            <summary>
            default
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.#ctor(CenterSpace.NMath.Stats.DFColumnList.Tag)">
            <summary>
            Constructor
            </summary>
            <param name="t">tag</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumnList.Count">
            <summary>
            	Gets the number of elements actually contained in the <c>DFColumnList</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.CopyTo(CenterSpace.NMath.Stats.IDFColumn[])">
            <summary>
            	Copies the entire <c>DFColumnList</c> to a one-dimensional
            	<see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> array to copy to.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.CopyTo(CenterSpace.NMath.Stats.IDFColumn[],System.Int32)">
            <summary>
            	Copies the entire <c>DFColumnList</c> to a one-dimensional
            	<see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumnList.IsSynchronized">
            <summary>
            	Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumnList.SyncRoot">
            <summary>
            	Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumnList.Item(System.Int32)">
            <summary>
            	Gets or sets the <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than the count.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Add(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            	Adds a <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> to the end of the <c>IDFColumnList</c>.
            </summary>
            <param name="item">The <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> to be added to the end of the <c>IDFColumnList</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Clear">
            <summary>
            	Removes all elements from the <c>DFColumnList</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Clone">
            <summary>
            	Creates a shallow copy of the <see cref="T:CenterSpace.NMath.Stats.DFColumnList"/>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Contains(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            	Determines whether a given <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> is in the <c>DFColumnList</c>.
            </summary>
            <param name="item">The <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <c>DFColumnList</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.IndexOf(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            	Returns the zero-based index of the first occurrence of a <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/>
            	in the <c>DFColumnList</c>.
            </summary>
            <param name="item">The <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> to locate in the <c>DFColumnList</c>.</param>
            <returns>
            	The zero-based index of the first occurrence of <paramref name="item"/> 
            	in the entire <c>DFColumnList</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Insert(System.Int32,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            	Inserts an element into the <c>DFColumnList</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.DFColumnList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Remove(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            	Removes the first occurrence of a specific <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> from the <c>DFColumnList</c>.
            </summary>
            <param name="item">The <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> to remove from the <c>DFColumnList</c>.</param>
            <exception cref="T:System.ArgumentException">
            	The specified <see cref="T:CenterSpace.NMath.Stats.IDFColumn"/> was not found in the <c>DFColumnList</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.RemoveAt(System.Int32)">
            <summary>
            	Removes the element at the specified index of the <c>DFColumnList</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.DFColumnList.Count"/>.</para>
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumnList.IsFixedSize">
            <summary>
            	Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumnList.IsReadOnly">
            <summary>
            	gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>DFColumnList</c>.
            </summary>
            <returns>An <see cref="T:CenterSpace.NMath.Stats.DFColumnList.Enumerator"/> for the entire <c>DFColumnList</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumnList.Capacity">
            <summary>
            	Gets or sets the number of elements the <c>DFColumnList</c> can contain.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.AddRange(CenterSpace.NMath.Stats.DFColumnList)">
            <summary>
            	Adds the elements of another <c>DFColumnList</c> to the current <c>DFColumnList</c>.
            </summary>
            <param name="x">The <c>DFColumnList</c> whose elements should be added to the end of the current <c>DFColumnList</c>.</param>
            <returns>The new <see cref="P:CenterSpace.NMath.Stats.DFColumnList.Count"/> of the <c>DFColumnList</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.AddRange(CenterSpace.NMath.Stats.DFColumn[])">
            <summary>
            	Adds the elements of a <see cref="T:CenterSpace.NMath.Stats.DFColumn"/> array to the current <c>DFColumnList</c>.
            </summary>
            <param name="x">The <see cref="T:CenterSpace.NMath.Stats.DFColumn"/> array whose elements should be added to the end of the <c>DFColumnList</c>.</param>
            <returns>The new <see cref="P:CenterSpace.NMath.Stats.DFColumnList.Count"/> of the <c>DFColumnList</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.TrimToSize">
            <summary>
            	Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="i"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="i"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.DFColumnList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="i"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="i"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.DFColumnList.Count"/>.</para>
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DFColumnList.Enumerator">
            <summary>
            	Supports simple iteration over a <see cref="T:CenterSpace.NMath.Stats.DFColumnList"/>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Enumerator.#ctor(CenterSpace.NMath.Stats.DFColumnList)">
            <summary>
            	Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DFColumnList.Enumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfuly advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DFColumnList.Enumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Dictionary">
            <summary>
            Extends SortedList by some utilties, should be used to replace 
            SortedList sometimes. This class also provides static functions based on IDictionary.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.Index(System.Collections.ICollection)">
            <summary>
            Change to dictionary with index
            </summary>
            <param name="c">collection, not necessarily sorted</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.Load(System.String)">
            <summary>
            Load from a script
            </summary>
            <param name="script">Script</param>
            <returns>Dictionary</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Dictionary.Item(System.Object)">
            <summary>
            Safe assignment - the old value will be replaced by new value.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.Add(System.Object,System.Object)">
            <summary>
            Safe adding
            </summary>
            <param name="key">Key</param>
            <param name="val">Value</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Dictionary.StringKeys">
            <summary>
            Keys as string array
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Dictionary.IntKeys">
            <summary>
            Keys as int[]
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetValue(System.Object,System.Object)">
            <summary>
            Get the value of the key, if does not exist, return the defaultValue
            </summary>
            <param name="key">Key</param>
            <param name="defaultValue">Default value</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetIntValue(System.Object)">
            <summary>
            Get int value of the key
            </summary>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetIntValue(System.Object,System.Int32)">
            <summary>
            Get int value of the key, if does not exist, return the defaultValue
            </summary>
            <param name="key">Key</param>
            <param name="defaultValue">Default value</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetDoubleValue(System.Object)">
            <summary>
            Get double value of the key
            </summary>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetDoubleValue(System.Object,System.Double)">
            <summary>
            Get double value of the key, if does not exist, return the defaultValue
            </summary>
            <param name="key">Key</param>
            <param name="defaultValue">Default value</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetBoolValue(System.Object)">
            <summary>
            Get bool value of the key
            </summary>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetBoolValue(System.Object,System.Boolean)">
            <summary>
            Get bool value of the key, if does not exist, return the defaultValue
            </summary>
            <param name="key">Key</param>
            <param name="defaultValue">Default value</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetStringValue(System.Object)">
            <summary>
            Get string value of the key
            </summary>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetStringValue(System.Object,System.String)">
            <summary>
            Get string value of the key, if does not exist, return the defaultValue
            </summary>
            <param name="key">Key</param>
            <param name="defaultValue">Default value</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetIntArrayValue(System.Object)">
            <summary>
            Get int array value of the key
            </summary>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetDoubleArrayValue(System.Object)">
            <summary>
            Get double array value of the key
            </summary>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetStringArrayValue(System.Object)">
            <summary>
            Get string array value of the key
            </summary>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.GetDataFrame(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get table data of a key
            </summary>
            <param name="key">Key</param>
            <param name="hasHeader">If the table has column header</param>
            <param name="hasRowKey">If the table has row key column</param>
            <param name="parse">Parse the table or not</param>
            <returns>DataFrame</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.ToString">
            <summary>
            String representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.ToString(System.String,System.String)">
            <summary>
            String representation
            </summary>
            <param name="itemLinker">Item linker</param>
            <param name="keyValueLinker">Key value linker</param>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Dictionary.Clone">
            <summary>
            Deep clone
            </summary>
            <returns>Dictionary. Deep clone</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DirectionType">
            <summary>
            Top, Bottom, Left and Right are for table.Add() and table.Remove()
            Horizontal and Vertical are for table.SubMatrix();
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DirectionType.Top">
            <summary>
            Insert a row before the first row
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DirectionType.Bottom">
            <summary>
            Insert a row after the last row
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DirectionType.Left">
            <summary>
            Insert a column before the first column
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DirectionType.Right">
            <summary>
            Insert a column after the last column
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DirectionType.MiddleRow">
            <summary>
            Add in the middle of row
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DirectionType.MiddleColumn">
            <summary>
            Add in the middel of column
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DirectionType.Front">
            <summary>
            Front
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DirectionType.Back">
            <summary>
            Back
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DoubleArray">
            <summary>
            Double array
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Median(System.Double[])">
            <summary>
            Get the median of the array
            </summary>
            <param name="dArray">Double array</param>
            <returns>Median</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Append(System.Double[],System.Double)">
            <summary>
            Append a value to the array
            </summary>
            <param name="dArray">Double array</param>
            <param name="d">Appended value</param>
            <returns>Appended array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Drop(System.Double[],System.Int32)">
            <summary>
            Drop a single element from an array
            </summary>
            <param name="dArray">Double array</param>
            <param name="index">Index</param>
            <returns>Dropped array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.IsSorted(System.Double[])">
            <summary>
            Is the array sorted
            </summary>
            <param name="dArray">Double array</param>
            <returns>Is sorted</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Sort(System.Double[])">
            <summary>
            Sort this array and return the original order
            </summary>
            <returns>Original order</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Rank(System.Double[])">
            <summary>
            Get rank array (rank starts from 0). 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Order(System.Double[])">
            <summary>
            Get order array (order starts from 0). 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Rank(System.Double[],System.Double@)">
            <summary>
            Get rank array (rank starts from 1). In the case of tie, average rank will be returned.
            </summary>
            <param name="dArray">An array.</param>
            <param name="s">Tied group cofficient, = 0 if no ties</param>
            <returns>Ranks</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.HasMissingData(System.Double[])">
            <summary>
            Check if a sample has any missing data (NaN, Infinity)
            </summary>
            <param name="dArray">Sample</param>
            <returns>If has missing data</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.RemoveMissingData(System.Double[])">
            <summary>
            Remove missing data from the sample (NaN, Infinity)
            </summary>
            <param name="dArray">Sample</param>
            <returns>A new Sample with no missing data</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Random(System.Int32)">
            <summary>
            Return a random double[]
            </summary>
            <param name="size">Size of the array</param>
            <returns>Random double[]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Filter(System.Double[],System.String)">
            <summary>
            Filter double array
            </summary>
            <param name="dArray">double arrays</param>
            <param name="filter">Filter</param>
            <returns>Filtered double array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.KthLargest(System.Double[],System.Int32)">
            <summary>
            Select the Kth largest in an array. The array WILL be altered.
            </summary>
            <param name="dArray">Double array, will be altered</param>
            <param name="K">Kth</param>
            <returns>The Kth largest</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Reverse(System.Double[])">
            <summary>
            Reverse a double array
            </summary>
            <param name="dArray">Double array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToLowerTriangle(System.Double[],System.Int32)">
            <summary>
            Change to lower triangle matrix (with diagonal)
            </summary>
            <param name="dArray">Double array</param>
            <param name="dimension">Dimension of the matrix</param>
            <returns>Lower triangle with diagonal</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToString(System.Double[],System.String)">
            <summary>
            String representation
            </summary>
            <param name="dArray">double[]</param>
            <param name="linker">Linker</param>
            <returns>string</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToString(System.Double[])">
            <summary>
            String linked by comma
            </summary>
            <param name="dArray">int[]</param>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Compare(System.Double[],System.Double[])">
            <summary>
            Compare two objects. This will compare each element of the two 
            arrays and when one array is shorter and there is a tie, the longer 
            one is "larger".
            </summary>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <returns>Comparing result</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.New(System.Int32,System.Double)">
            <summary>
            Create a double array and fill the values if necessary
            </summary>
            <param name="count">Length of the array</param>
            <param name="aDouble">Value to be filled</param>
            <returns>New double array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.New(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a 2D double array
            </summary>
            <param name="xCount">Length of the first dimension</param>
            <param name="yCount">Length of the second dimension</param>
            <param name="aDouble">Value to be filled</param>
            <returns>New double array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.NewMatrix(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a double matrix
            </summary>
            <param name="xCount">Length of the first dimension</param>
            <param name="yCount">Length of the second dimension</param>
            <param name="aDouble">Value to be filled</param>
            <returns>New double matrix</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToArray(System.Int32[])">
            <summary>
            Change int array to double array
            </summary>
            <param name="iArray">int array</param>
            <returns>double array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Convert(System.Collections.ICollection)">
            <summary>
            Convert a collection to double[]
            </summary>
            <param name="c">ICollection</param>
            <returns>The converted double[]. May throw exception</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.SafeConvert(System.Collections.ICollection)">
            <summary>
            Convert a collection to double[], if not numeric, store NaN
            </summary>
            <param name="c">ICollection</param>
            <returns>The converted double[]. Won't throw exception</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Copy(System.Double[])">
            <summary>
            Return an exact copy of a double array
            </summary>
            <param name="dArray">Double array</param>
            <returns>Copy of the double array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Append(System.Double[],System.Double[])">
            <summary>
            Merge two arrays into on array
            </summary>
            <param name="d1">double array 1</param>
            <param name="d2">double array 2</param>
            <returns>Merged double array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Fill(System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Fill a double array with a value
            </summary>
            <param name="dArray">Double array</param>
            <param name="from">Start index</param>
            <param name="length">Length</param>
            <param name="aDouble">Value to be filled</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Fill(System.Double[],System.Double)">
            <summary>
            Fill a double array with a value
            </summary>
            <param name="dArray">Double array</param>
            <param name="aDouble">Value to be filled</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToArray(System.Collections.ICollection)">
            <summary>
            Convert to string array
            </summary>
            <param name="c">ICollection whose element must be double</param>
            <returns>double[]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.SubArray(System.Double[],CenterSpace.NMath.Stats.Subset)">
            <summary>
            Get sub array
            </summary>
            <param name="dArray">Double array</param>
            <param name="subset">Subset</param>
            <returns>Sub double array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToFrequency(System.Double[])">
            <summary>
            Change to frequency
            </summary>
            <param name="dArray">Double array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.RemoveMissing(System.Double[]@)">
            <summary>
            Remove missing data
            </summary>
            <param name="dArray">Double array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToFrequency(System.Double[0:,0:])">
            <summary>
            Change to frequency
            </summary>
            <param name="dMatrix">Double matrix</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToZScore(System.Double[])">
            <summary>
            To Z-Score
            </summary>
            <param name="dArray">Double array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Apply(System.Double[],CenterSpace.NMath.Stats.FO1To1)">
            <summary>
            Apply a transformation a double array
            </summary>
            <param name="dArray">double[]</param>
            <param name="fo">Function object</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Transform(System.Double[],CenterSpace.NMath.Stats.FO1To1)">
            <summary>
            Transform a double array
            </summary>
            <param name="dArray">double[]</param>
            <param name="fo">Function object</param>
            <returns>Transformed double array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.CountIf(System.Double[],CenterSpace.NMath.Stats.FOdTob)">
            <summary>
            Count the double array with a predicate
            </summary>
            <param name="dArray">double array</param>
            <param name="predicate">Predicate</param>
            <returns>Count</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.CountIf(System.Double[],CenterSpace.NMath.Stats.FOdTob,System.Int32[]@)">
            <summary>
            Apply a predication on each element and return the count
            </summary>
            <param name="dArray">Double array</param>
            <param name="fo">Function object: predicate</param>
            <param name="indices">Indices</param>
            <returns>Count</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.CountRange(System.Double[],System.Double[])">
            <summary>
            Count range
            </summary>
            <param name="dArray">double array</param>
            <param name="range">Range to be counted. Example: (0, 0.01, 0.05, 1.00)</param>
            <returns>Count for each bin</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.SumIf(System.Double[],CenterSpace.NMath.Stats.FOdTob)">
            <summary>
            Sum the double array with a predicate
            </summary>
            <param name="dArray">double array</param>
            <param name="predicate">Predicate</param>
            <returns>Sum</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Sum(System.Double[])">
            <summary>
            Sum the double array
            </summary>
            <param name="dArray">double array</param>
            <returns>Sum</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.AbsSum(System.Double[])">
            <summary>
            Absolute sum the double array
            </summary>
            <param name="dArray">double array</param>
            <returns>Absolute sum</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Sum(System.Double[0:,0:])">
            <summary>
            Sum the double matrix
            </summary>
            <param name="dMatrix">double matrix</param>
            <returns>Sum</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Combine(System.Double[],System.Double[],CenterSpace.NMath.Stats.FO2To1)">
            <summary>
            Combination of two arrays
            </summary>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <param name="fo">Function object</param>
            <returns>A new array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.InnerProduct(System.Double[],System.Double[],CenterSpace.NMath.Stats.FO2To1)">
            <summary>
            Inner products of two arrays
            </summary>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <param name="fo">Function object</param>
            <returns>Inner product</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Statistics(System.Double[],CenterSpace.NMath.Stats.FOnTo1)">
            <summary>
            Return the statistics
            </summary>
            <param name="dArray">double array</param>
            <param name="nto1">N to 1 statistics</param>
            <returns>Statistics</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Mean(System.Double[])">
            <summary>
            Return mean
            </summary>
            <param name="dArray">double array</param>
            <returns>Mean</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Entropy(System.Double[])">
            <summary>
            Return entropy of a distribution
            </summary>
            <param name="dArray">double array, must sum to 1</param>
            <returns>Entropy</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.EntropyBase2(System.Double[])">
            <summary>
            Return entropy of a distribution (use log2)
            </summary>
            <param name="dArray">double array, must sum to 1</param>
            <returns>Entropy</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Diversity(System.Double[])">
            <summary>
            Return diversity of a distribution
            </summary>
            <param name="dArray">double array, must sum to 1</param>
            <returns>Diversity</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Variance(System.Double[])">
            <summary>
            Return variance
            </summary>
            <param name="dArray">double array</param>
            <returns>Mean</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.SD(System.Double[])">
            <summary>
            Return SD
            </summary>
            <param name="dArray">double array</param>
            <returns>SD</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Covariance(System.Double[],System.Double[])">
            <summary>
            Return covariance
            </summary>
            <param name="array1">array 1</param>
            <param name="array2">array 2</param>
            <returns>Covariance</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.Correlation(System.Double[],System.Double[])">
            <summary>
            Return correlation
            </summary>
            <param name="array1">array 1</param>
            <param name="array2">array 2</param>
            <returns>Correlation</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.LeftPValue(System.Double[],System.Double,System.Boolean)">
            <summary>
            Return the left one-sided p-value 
            </summary>
            <param name="dArray">double array</param>
            <param name="dValue">double value</param>
            <param name="sort">Sort the array or not</param>
            <returns>Left one-sided pvalue</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.RightPValue(System.Double[],System.Double,System.Boolean)">
            <summary>
            Return the right one-sided p-value 
            </summary>
            <param name="dArray">double array</param>
            <param name="dValue">double value</param>
            <param name="sort">Sort the array or not</param>
            <returns>Right one-sided pvalue</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.TwoSidedPValue(System.Double[],System.Double,System.Boolean)">
            <summary>
            Return the two-sided p-value 
            </summary>
            <param name="dArray">double array</param>
            <param name="dValue">double value</param>
            <param name="sort">Sort the array or not</param>
            <returns>Two-sided pvalue</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.CI(System.Double[],System.Double,System.Boolean)">
            <summary>
            Confidence interval
            </summary>
            <param name="dArray">double array</param>
            <param name="range">Confidence interval range</param>
            <param name="sort">Sort the array or not</param>
            <returns>Confidence interval, return the whole range if range = 1</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.#ctor(System.Double[])">
            <summary>
            store a reference
            </summary>
            <param name="dArray">double[]</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.#ctor(System.Double[],System.Boolean)">
            <summary>
            Construct from an existing int array and perhaps sort
            </summary>
            <param name="dArray">double array</param>
            <param name="sort">Sort or not</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.op_Implicit(CenterSpace.NMath.Stats.DoubleArray)~System.Double[]">
            <summary>
            Implicit casting to double[], just return the reference
            </summary>
            <param name="doubleArray">DoubleArray to be casted</param>
            <returns>double[]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToString">
            <summary>
            String representation
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToString(System.String)">
            <summary>
            String representation
            </summary>
            <param name="linker">Linker</param>
            <returns>string</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.ToFormattedString(System.Double[],System.String)">
            <summary>
            String representation with a fixed precision
            </summary>
            <param name="dArray">double[]</param>
            <param name="format">Numeric format</param>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleArray.CompareTo(System.Object)">
            <summary>
            Override CompareTo
            </summary>
            <param name="obj">Another DoubleArray</param>
            <returns>Comparision result</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DoubleList">
            <summary>
            	A strongly-typed collection of <see cref="T:System.Double"/> objects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.ToArray">
            <summary>
            To double array
            </summary>
            <returns>double array</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DoubleList.IDoubleListEnumerator">
            <summary>
            	Supports type-safe iteration over a <see cref="T:CenterSpace.NMath.Stats.DoubleList"/>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleList.IDoubleListEnumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.IDoubleListEnumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfuly advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.IDoubleListEnumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Synchronized(CenterSpace.NMath.Stats.DoubleList)">
            <summary>
            	Creates a synchronized (thread-safe) wrapper for a 
                <c>DoubleList</c> instance.
            </summary>
            <returns>
                An <c>DoubleList</c> wrapper that is synchronized (thread-safe).
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.ReadOnly(CenterSpace.NMath.Stats.DoubleList)">
            <summary>
            	Creates a read-only wrapper for a 
                <c>DoubleList</c> instance.
            </summary>
            <returns>
                An <c>DoubleList</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.#ctor">
            <summary>
            	Initializes a new instance of the <c>DoubleList</c> class
            	that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.#ctor(System.Int32)">
            <summary>
            	Initializes a new instance of the <c>DoubleList</c> class
            	that has the specified initial capacity.
            </summary>
            <param name="capacity">
            	The number of elements that the new <c>DoubleList</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.#ctor(CenterSpace.NMath.Stats.DoubleList)">
            <summary>
            	Initializes a new instance of the <c>DoubleList</c> class
            	that contains elements copied from the specified <c>DoubleList</c>.
            </summary>
            <param name="c">The <c>DoubleList</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.#ctor(System.Double[])">
            <summary>
            	Initializes a new instance of the <c>DoubleList</c> class
            	that contains elements copied from the specified <see cref="T:System.Double"/> array.
            </summary>
            <param name="a">The <see cref="T:System.Double"/> array whose elements are copied to the new list.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DoubleList.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoubleList.Tag.Default">
            <summary>
            default
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.#ctor(CenterSpace.NMath.Stats.DoubleList.Tag)">
            <summary>
            Double list
            </summary>
            <param name="t">tag</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleList.Count">
            <summary>
            	Gets the number of elements actually contained in the <c>DoubleList</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.CopyTo(System.Double[])">
            <summary>
            	Copies the entire <c>DoubleList</c> to a one-dimensional
            	<see cref="T:System.Double"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Double"/> array to copy to.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.CopyTo(System.Double[],System.Int32)">
            <summary>
            	Copies the entire <c>DoubleList</c> to a one-dimensional
            	<see cref="T:System.Double"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Double"/> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleList.IsSynchronized">
            <summary>
            	Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleList.SyncRoot">
            <summary>
            	Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleList.Item(System.Int32)">
            <summary>
            	Gets or sets the <see cref="T:System.Double"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.DoubleList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Add(System.Double)">
            <summary>
            	Adds a <see cref="T:System.Double"/> to the end of the <c>DoubleList</c>.
            </summary>
            <param name="item">The <see cref="T:System.Double"/> to be added to the end of the <c>DoubleList</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Clear">
            <summary>
            	Removes all elements from the <c>DoubleList</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Clone">
            <summary>
            	Creates a shallow copy of the <see cref="T:CenterSpace.NMath.Stats.DoubleList"/>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Contains(System.Double)">
            <summary>
            	Determines whether a given <see cref="T:System.Double"/> is in the <c>DoubleList</c>.
            </summary>
            <param name="item">The <see cref="T:System.Double"/> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <c>DoubleList</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.IndexOf(System.Double)">
            <summary>
            	Returns the zero-based index of the first occurrence of a <see cref="T:System.Double"/>
            	in the <c>DoubleList</c>.
            </summary>
            <param name="item">The <see cref="T:System.Double"/> to locate in the <c>DoubleList</c>.</param>
            <returns>
            	The zero-based index of the first occurrence of <paramref name="item"/> 
            	in the entire <c>DoubleList</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Insert(System.Int32,System.Double)">
            <summary>
            	Inserts an element into the <c>DoubleList</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:System.Double"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.DoubleList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Remove(System.Double)">
            <summary>
            	Removes the first occurrence of a specific <see cref="T:System.Double"/> from the <c>DoubleList</c>.
            </summary>
            <param name="item">The <see cref="T:System.Double"/> to remove from the <c>DoubleList</c>.</param>
            <exception cref="T:System.ArgumentException">
            	The specified <see cref="T:System.Double"/> was not found in the <c>DoubleList</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.RemoveAt(System.Int32)">
            <summary>
            	Removes the element at the specified index of the <c>DoubleList</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.DoubleList.Count"/>.</para>
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleList.IsFixedSize">
            <summary>
            	Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleList.IsReadOnly">
            <summary>
            	gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.GetEnumerator">
            <summary>
            	Returns an enumerator that can iterate through the <c>DoubleList</c>.
            </summary>
            <returns>An <see cref="T:CenterSpace.NMath.Stats.DoubleList.Enumerator"/> for the entire <c>DoubleList</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleList.Capacity">
            <summary>
            	Gets or sets the number of elements the <c>DoubleList</c> can contain.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.AddRange(CenterSpace.NMath.Stats.DoubleList)">
            <summary>
            	Adds the elements of another <c>DoubleList</c> to the current <c>DoubleList</c>.
            </summary>
            <param name="x">The <c>DoubleList</c> whose elements should be added to the end of the current <c>DoubleList</c>.</param>
            <returns>The new <see cref="P:CenterSpace.NMath.Stats.DoubleList.Count"/> of the <c>DoubleList</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.AddRange(System.Double[])">
            <summary>
            	Adds the elements of a <see cref="T:System.Double"/> array to the current <c>DoubleList</c>.
            </summary>
            <param name="x">The <see cref="T:System.Double"/> array whose elements should be added to the end of the <c>DoubleList</c>.</param>
            <returns>The new <see cref="P:CenterSpace.NMath.Stats.DoubleList.Count"/> of the <c>DoubleList</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.TrimToSize">
            <summary>
            	Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="i"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="i"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.DoubleList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="i"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="i"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.DoubleList.Count"/>.</para>
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DoubleList.Enumerator">
            <summary>
            	Supports simple iteration over a <see cref="T:CenterSpace.NMath.Stats.DoubleList"/>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Enumerator.#ctor(CenterSpace.NMath.Stats.DoubleList)">
            <summary>
            	Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoubleList.Enumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfuly advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoubleList.Enumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.DoublePair">
            <summary>
            Double double pair
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePair.NaN">
            <summary>
            Get NaN
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePair.First">
            <summary>
            First member
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.DoublePair.Second">
            <summary>
            Second member
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePair.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="f">first double</param>
            <param name="s">second double</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.DoublePair.IsNaN">
            <summary>
            If two memebers are all NaN
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePair.CompareTo(System.Object)">
            <summary>
            Overrided CompareTo()
            </summary>
            <param name="obj">Compare to another object</param>
            <returns>Compare result</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.DoublePair.ToString">
            <summary>
            String representation
            </summary>
            <returns>String representation. (a,b)</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO1To1">
            <summary>
            Abstract class modeling one double to one double transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO1To1.Private1to1.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO1To1.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO1To1.Transform(System.Double)">
            <summary>
            Transform a double to another double
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO1To1.Combine(CenterSpace.NMath.Stats.FO1To1[])">
            <summary>
            Combine several transformations sequentially
            </summary>
            <param name="fos">Transformation list</param>
            <returns>Combined transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO2To1">
            <summary>
            Abstract two doubles to one double transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO2To1.Transform(System.Double,System.Double)">
            <summary>
            Transform two double to another double
            </summary>
            <param name="x">double 1 to be transformed</param>
            <param name="y">double 2 to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FOnTo1">
            <summary>
            Abstract n to one transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOnTo1.Statistics(System.Double[])">
            <summary>
            Transform a double[] to a double(statistics)
            </summary>
            <param name="dArray">The double[] to be summarized</param>
            <returns>Summarized double</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FOnTo1.Name">
            <summary>
            Return the name of the statistics
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO">
            <summary>
            Depot for different function objects
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Unchanged">
            <summary>
            No transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Unchanged.Transform(System.Double)">
            <summary>
            No transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>The untransformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Unchanged.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Negative">
            <summary>
            Negative transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Negative.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Negative.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Abs">
            <summary>
            Absolute transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Abs.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Abs.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Square">
            <summary>
            Square transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Square.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Square.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Cubic">
            <summary>
            Cubic transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Cubic.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Cubic.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Sqrt">
            <summary>
            Square root transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Sqrt.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Sqrt.ToString">
            <summary>
            Get string representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Sqrt.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Log">
            <summary>
            Log transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Log.#ctor">
            <summary>
            Natural base
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Log.#ctor(System.Double)">
            <summary>
            Customized base
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Log.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Log.ToString">
            <summary>
            Get string representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Log.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Pow">
            <summary>
            Power transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Pow.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="p">Power</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Pow.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Pow.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Exp">
            <summary>
            Exponential transformation
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Exp.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Exp.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Subtract">
            <summary>
            Subtract another double
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Subtract.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="d">The double that will be substracted</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Subtract.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Subtract.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.SubtractBy">
            <summary>
            Substracted by another double
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.SubtractBy.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="d">Minused by this double</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.SubtractBy.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.SubtractBy.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Add">
            <summary>
            Add another double
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Add.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="d">Add this double</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Add.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Add.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.DevidedBy">
            <summary>
            Add another double
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.DevidedBy.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="d">Devided by this double</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.DevidedBy.Transform(System.Double)">
            <summary>
            Transformation
            </summary>
            <param name="x">The double to be transformed</param>
            <returns>Transformed double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.DevidedBy.GetRepresentation(System.String)">
            <summary>
            Get a string representation of the transformation
            </summary>
            <param name="v">The variable to be transformed</param>
            <returns>String representation of the transformation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Sum2">
            <summary>
            Add two doubles
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Sum2.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>x+y</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Min2">
            <summary>
            Min of two doubles
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Min2.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>x+y</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Max2">
            <summary>
            Max of two doubles
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Max2.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>x+y</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Difference2">
            <summary>
            Substract y from x
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Difference2.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>x-y</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Product2">
            <summary>
            x Multiply y
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Product2.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>x*y</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Division2">
            <summary>
            x divided by y
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Division2.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>x/y</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.DifferenceSquare">
            <summary>
            Difference square
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.DifferenceSquare.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>(x-y)^2</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.DifferenceAbs">
            <summary>
            Difference absolute
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.DifferenceAbs.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>|x-y|</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.ProductSqrt">
            <summary>
            Product square root
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.ProductSqrt.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>sqrt(x*y)</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.XSquare">
            <summary>
            Special X-Square
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.XSquare.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>sqrt(x*y)</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.BothGTZero">
            <summary>
            Return 1 if both value is greater than zero, otherwise return 0. 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.BothGTZero.Transform(System.Double,System.Double)">
            <summary>
            Overrrided Transform
            </summary>
            <param name="x">double x</param>
            <param name="y">double y</param>
            <returns>Return 1 if both > 0, return 0 o.w</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Sum">
            <summary>
            Summation statistics
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Sum.Statistics(System.Double[])">
            <summary>
            Return sum of the double array
            </summary>
            <param name="dArray">double array</param>
            <returns>Sum</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FO.Sum.Name">
            <summary>
            Return "Sum"
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Mean">
            <summary>
            Mean statistics
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Mean.Statistics(System.Double[])">
            <summary>
            Return mean of the double array
            </summary>
            <param name="dArray">double array</param>
            <returns>Mean</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FO.Mean.Name">
            <summary>
            Return "Mean"
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.Variance">
            <summary>
            Variance statistics
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.Variance.Statistics(System.Double[])">
            <summary>
            Return variance of double array
            </summary>
            <param name="dArray">double array</param>
            <returns>Variance</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FO.Variance.Name">
            <summary>
            Return "Variance"
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FO.SD">
            <summary>
            Standard deviation statistics
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FO.SD.Statistics(System.Double[])">
            <summary>
            Return standard deviation of a double array
            </summary>
            <param name="dArray">double array</param>
            <returns>SD</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.FO.SD.Name">
            <summary>
            Return "SD"
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FOdTob">
            <summary>
            Double predicate
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOdTob.GetInstance(System.String)">
            <summary>
            Construct a double predicate
            </summary>
            <param name="filter">string representation</param>
            <returns>Double predicate, may throw exception</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOdTob.Predicate(System.Double)">
            <summary>
            Predicate
            </summary>
            <param name="x">The double to be predicated</param>
            <returns>Predicated true or false</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOdTob.CombineByAnd(CenterSpace.NMath.Stats.FOdTob[])">
            <summary>
            Combine the predicates by logical AND
            </summary>
            <param name="array">Predicate list</param>
            <returns>Combined predicate</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOdTob.CombineByOr(CenterSpace.NMath.Stats.FOdTob[])">
            <summary>
            Combine the predicates by logical OR
            </summary>
            <param name="array">Predicate array</param>
            <returns>Combined predicate</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FOiTob">
            <summary>
            Int predicate
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOiTob.Predicate(System.Int32)">
            <summary>
            Predicate
            </summary>
            <param name="x">The int to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOiTob.CombineByAnd(CenterSpace.NMath.Stats.FOiTob[])">
            <summary>
            Combine the predicates by logical AND
            </summary>
            <param name="array">Predicate list</param>
            <returns>Combined predicate</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOiTob.CombineByOr(CenterSpace.NMath.Stats.FOiTob[])">
            <summary>
            Combine the predicates by logical OR
            </summary>
            <param name="array">Predicate array</param>
            <returns>Combined predicate</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.FOsTob">
            <summary>
            Int predicate
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOsTob.Predicate(System.String)">
            <summary>
            Predicate
            </summary>
            <param name="x">The string to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOsTob.CombineByAnd(CenterSpace.NMath.Stats.FOsTob[])">
            <summary>
            Combine the predicates by logical AND
            </summary>
            <param name="array">Predicate list</param>
            <returns>Combined predicate</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.FOsTob.CombineByOr(CenterSpace.NMath.Stats.FOsTob[])">
            <summary>
            Combine the predicates by logical OR
            </summary>
            <param name="array">Predicate array</param>
            <returns>Combined predicate</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If">
            <summary>
            Depot for predicate function objects
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.GT">
            <summary>
            If greater than
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.GT.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="d">If greater than this double</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.GT.Predicate(System.Double)">
            <summary>
            Predicate
            </summary>
            <param name="x">The double to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.GT.ToString">
            <summary>
            String representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.GTOrEq">
            <summary>
            If Greater than or equal to
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.GTOrEq.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="d">Greater than or equal to this double</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.GTOrEq.Predicate(System.Double)">
            <summary>
            Predicate
            </summary>
            <param name="x">The double to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.GTOrEq.ToString">
            <summary>
            String representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.LT">
            <summary>
            If less than
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.LT.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="d">Less than this double</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.LT.Predicate(System.Double)">
            <summary>
            Predicate
            </summary>
            <param name="x">The double to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.LT.ToString">
            <summary>
            String representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.LTOrEq">
            <summary>
            If less than or equal to
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.LTOrEq.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="d">If less than or equal to this value</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.LTOrEq.Predicate(System.Double)">
            <summary>
            Predicate
            </summary>
            <param name="x">The double to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.LTOrEq.ToString">
            <summary>
            String representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.Eq">
            <summary>
            If equal to
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.Eq.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="d">If equal to this double</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.Eq.Predicate(System.Double)">
            <summary>
            Predicate
            </summary>
            <param name="x">The double to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.Eq.ToString">
            <summary>
            String representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.Between">
            <summary>
            If between (0,x) can be both-open, both-close, half-open
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.Between.#ctor(System.Double,System.Double,CenterSpace.NMath.Stats.If.SetOpenType)">
            <summary>
            Constructor
            </summary>
            <param name="d1">Greater than or equal to this double</param>
            <param name="d2">Less than this double</param>
            <param name="type">Set type</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.Between.Predicate(System.Double)">
            <summary>
            Predicate
            </summary>
            <param name="x">The double to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.Between.ToString">
            <summary>
            String representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.IntGT">
            <summary>
            If greater than
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntGT.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="d">If greater than this int</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntGT.Predicate(System.Int32)">
            <summary>
            Predicate
            </summary>
            <param name="x">The int to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.IntGTOrEq">
            <summary>
            If Greater than or equal to
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntGTOrEq.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="d">Greater than or equal to this int</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntGTOrEq.Predicate(System.Int32)">
            <summary>
            Predicate
            </summary>
            <param name="x">The int to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.IntLT">
            <summary>
            If less than
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntLT.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="d">Less than this int</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntLT.Predicate(System.Int32)">
            <summary>
            Predicate
            </summary>
            <param name="x">The int to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.IntLTOrEq">
            <summary>
            If less than or equal to
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntLTOrEq.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="d">If less than or equal to this value</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntLTOrEq.Predicate(System.Int32)">
            <summary>
            Predicate
            </summary>
            <param name="x">The int to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.IntEq">
            <summary>
            If equal to
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntEq.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="d">If equal to this int</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntEq.Predicate(System.Int32)">
            <summary>
            Predicate
            </summary>
            <param name="x">The int to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.SetOpenType">
            <summary>
            Open type of the set
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.If.SetOpenType.BothOpen">
            <summary>
            (a,b)
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.If.SetOpenType.BothClose">
            <summary>
            [a,b]
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.If.SetOpenType.FirstOpenLastClose">
            <summary>
            (a,b]
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.If.SetOpenType.FirstCloseLastOpen">
            <summary>
            [a,b)
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.IntBetween">
            <summary>
            If between (0,x) can be both-open, both-close, half-open
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntBetween.#ctor(System.Int32,System.Int32,CenterSpace.NMath.Stats.If.SetOpenType)">
            <summary>
            Constructor
            </summary>
            <param name="d1">Greater than or equal to this int</param>
            <param name="d2">Less than this int</param>
            <param name="type">Set type</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.IntBetween.Predicate(System.Int32)">
            <summary>
            Predicate
            </summary>
            <param name="x">The int to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.StringGT">
            <summary>
            If greater than
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringGT.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="d">If greater than this string</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringGT.Predicate(System.String)">
            <summary>
            Predicate
            </summary>
            <param name="x">The string to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.StringGTOrEq">
            <summary>
            If Greater than or equal to
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringGTOrEq.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="d">Greater than or equal to this string</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringGTOrEq.Predicate(System.String)">
            <summary>
            Predicate
            </summary>
            <param name="x">The string to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.StringLT">
            <summary>
            If less than
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringLT.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="d">Less than this string</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringLT.Predicate(System.String)">
            <summary>
            Predicate
            </summary>
            <param name="x">The string to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.StringLTOrEq">
            <summary>
            If less than or equal to
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringLTOrEq.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="d">If less than or equal to this value</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringLTOrEq.Predicate(System.String)">
            <summary>
            Predicate
            </summary>
            <param name="x">The string to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.StringEq">
            <summary>
            If equal to
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringEq.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="d">If equal to this string</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringEq.Predicate(System.String)">
            <summary>
            Predicate
            </summary>
            <param name="x">The string to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.If.StringBetween">
            <summary>
            If between (0,x) can be both-open, both-close, half-open
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringBetween.#ctor(System.String,System.String,CenterSpace.NMath.Stats.If.SetOpenType)">
            <summary>
            Constructor
            </summary>
            <param name="d1">Greater than or equal to this string</param>
            <param name="d2">Less than this string</param>
            <param name="type">Set type</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.If.StringBetween.Predicate(System.String)">
            <summary>
            Predicate
            </summary>
            <param name="x">The string to be predicated</param>
            <returns>If true</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Functions">
            <summary>
            General algorithms based on ICollection/IList/ArrayList/object
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.Drop(System.Array,System.Int32,System.Array)">
            <summary>
            Drop a single element from an array
            </summary>
            <param name="source">Source array</param>
            <param name="index">Index</param>
            <param name="target">Target array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.SubList(System.Collections.ArrayList,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Return a sub list
            </summary>
            <param name="list">ArrayList</param>
            <param name="subset">Subset</param>
            <returns>Sub list</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.ToString(System.Collections.ICollection,System.String)">
            <summary>
            Link collection to a string ignoring value part
            </summary>
            <param name="c">Collection</param>
            <param name="linker1">Linker of element</param>
            <returns>Linked string</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.ToString(System.Collections.ICollection,System.String,System.String,System.Boolean)">
            <summary>
            Link list to a string
            </summary>
            <param name="c">Collection</param>
            <param name="linker1">Linker of element</param>
            <param name="linker2">Linker of pair</param>
            <param name="linkElement">Link value part or not</param>
            <returns>Linked string</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.IndexOf(System.Collections.ICollection,System.Object)">
            <summary>
            Index of an object
            </summary>
            <param name="c">ICollection</param>
            <param name="obj">Object</param>
            <returns>Index</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.IndicesOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Indices 
            </summary>
            <param name="c">ICollection</param>
            <param name="subC">Sub collection</param>
            <returns>Indices</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.Contains(System.Collections.ICollection,System.Object)">
            <summary>
            If contains an object
            </summary>
            <param name="c">Collection</param>
            <param name="obj">object</param>
            <returns>Contains or not</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.IsUnique(System.Collections.ICollection)">
            <summary>
            Is the element of the collection unique
            </summary>
            <param name="ic">Collection</param>
            <returns>Unique or not</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.CenterData(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Centers the data in the given matrix by subtracting the column mean
            from each column of the input matrix
            </summary>
            <param name="X">Input matrix of un-centered data.</param>
            <returns>Centered data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Functions.Normalize(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Normalized the given vector to have unit length by dividing
            the vector by its length.
            </summary>
            <param name="x">On input the non-unit vector. On output 
            normalized to have unit length.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IndexSet">
            <summary>
            Fast collection for storing indices (must >= 0 and has a predefined maximal size) only
            This collection is very memory-consuming, so make sure it is immediatly GCed after using
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IndexSet.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxIndex">Maximal index</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IndexSet.Clear">
            <summary>
            Clear all indices
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IndexSet.Capacity">
            <summary>
            Capacity of the set
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IndexSet.Count">
            <summary>
            Get count
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IndexSet.Contains(System.Int32)">
            <summary>
            If contains an index
            </summary>
            <param name="index">Index</param>
            <returns>Contains or not</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IndexSet.Add(System.Int32)">
            <summary>
            Add an index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IndexSet.Remove(System.Int32)">
            <summary>
            Remove an index
            </summary>
            <param name="index">Index to be removed</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IndexSet.ToArray">
            <summary>
            Return index array
            </summary>
            <returns>Index array</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IntArray">
            <summary>
            Int array
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Merge(System.Int32[][])">
            <summary>
            Merge 2d arrays
            </summary>
            <param name="iArray">2d array</param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Append(System.Int32[],System.Int32)">
            <summary>
            Append a value to the array
            </summary>
            <param name="iArray">Int array</param>
            <param name="i">Appended value</param>
            <returns>Appended array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.DropAt(System.Int32[],System.Int32)">
            <summary>
            Drop a single element from an array
            </summary>
            <param name="iArray">Int array</param>
            <param name="index">Index</param>
            <returns>Dropped array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.ToInt32(System.Int32[])">
            <summary>
            Change to int value
            </summary>
            <param name="iArray">Int array, should be 0s and 1s</param>
            <returns>int value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Replace(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Find and replace
            </summary>
            <param name="c">Integer array</param>
            <param name="aInt">Int value to be replaced</param>
            <param name="bInt">New value</param>
            <returns>Number of replacement</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.ToArray(System.Int32,System.Int32)">
            <summary>
            Change to int array of 0s and 1s
            </summary>
            <param name="iValue">Int value</param>
            <param name="length">Length of the int array</param>
            <returns>int array of specific length</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Reverse(System.Int32[])">
            <summary>
            Reverse an int array
            </summary>
            <param name="iArray">Int array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.ToString(System.Int32[],System.String)">
            <summary>
            String representation
            </summary>
            <param name="iArray">int[]</param>
            <param name="linker">Linker</param>
            <returns>string</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.ToString(System.Int32[])">
            <summary>
            String linked by comma
            </summary>
            <param name="iArray">int[]</param>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Equals(System.Int32[],System.Int32[])">
            <summary>
            If two int[] are equals
            </summary>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <returns>If equals</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Compare(System.Int32[],System.Int32[])">
            <summary>
            Compare two objects. This will compare each element of the two 
            arrays and when one array is shorter and there is a tie, the longer 
            one is "larger".
            </summary>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <returns>Comparing result</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.New(System.Int32,System.Int32)">
            <summary>
            Create an int array and fill the values if necessary
            </summary>
            <param name="count">Length of the array</param>
            <param name="aInt">Value to be filled</param>
            <returns>New int array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.New(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a 2D int array
            </summary>
            <param name="xCount">Length of the first dimension</param>
            <param name="yCount">Length of the second dimension</param>
            <param name="aInt">Value to be filled</param>
            <returns>New int 2D array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.NewMatrix(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an integer matrix
            </summary>
            <param name="xCount">Length of the first dimension</param>
            <param name="yCount">Length of the second dimension</param>
            <param name="aInt">Value to be filled</param>
            <returns>New int matrix</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Convert(System.Collections.ICollection)">
            <summary>
            Convert a collection to doublint[]
            </summary>
            <param name="c">ICollection</param>
            <returns>The converted int[]. May throw exception</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Fill(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Fill an int array with a value
            </summary>
            <param name="iArray">Int array</param>
            <param name="from">Start index</param>
            <param name="length">Length</param>
            <param name="aInt">Value to be filled</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Fill(System.Int32[],System.Int32)">
            <summary>
            Fill an int array with a value
            </summary>
            <param name="iArray">Int array</param>
            <param name="aInt">Value to be filled</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Copy(System.Int32[])">
            <summary>
            Return an exact copy of an int array
            </summary>
            <param name="iArray">Int array</param>
            <returns>Copy of the int array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Copy(System.Int32[0:,0:])">
            <summary>
            Return an exact copy of an int matrix
            </summary>
            <param name="iMatrix">Int matrix</param>
            <returns>Copy of the int matrix</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.CountIf(System.Int32[],CenterSpace.NMath.Stats.FOiTob)">
            <summary>
            Count the int array with a predicate
            </summary>
            <param name="iArray">int array</param>
            <param name="predicate">Predicate</param>
            <returns>Count</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.CountIf(System.Int32[],CenterSpace.NMath.Stats.FOiTob,System.Int32[]@)">
            <summary>
            Apply a predication on each element and return the count
            </summary>
            <param name="iArray">Int array</param>
            <param name="fo">Function object: predicate</param>
            <param name="indices">Indices</param>
            <returns>Count</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Index(System.Int32)">
            <summary>
            Return an int array of [0...length - 1]
            </summary>
            <param name="length">length of the array</param>
            <returns>An int array of indices</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Index(System.Int32,System.Int32)">
            <summary>
            Return an int array of [startIndex...startIndex+Count-1]
            </summary>
            <param name="startIndex">Index for first element</param>
            <param name="length">length of the array</param>
            <returns>An int array of indices</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Index(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return an index array
            </summary>
            <param name="startIndex">Index for first element</param>
            <param name="length">length of the array</param>
            <param name="stepSize">Step size</param>
            <returns>An int array of indices</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.ToArray(System.Collections.ICollection)">
            <summary>
            Convert to int array
            </summary>
            <param name="c">ICollection whose element must be Int32</param>
            <returns>int[]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.ToArray(System.Double[])">
            <summary>
            Change double array to int array
            </summary>
            <param name="dArray">Double array</param>
            <returns>int array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.SubArray(System.Int32[],CenterSpace.NMath.Stats.Subset)">
            <summary>
            Get sub array
            </summary>
            <param name="iArray">Int array</param>
            <param name="subset">Subset</param>
            <returns>Sub int array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Merge(System.Int32[],System.Int32[])">
            <summary>
            Merge two arrays into on array
            </summary>
            <param name="i1">int array 1</param>
            <param name="i2">int array 2</param>
            <returns>Merged int array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Shuffle(System.Int32[])">
            <summary>
            Shuffle an int array
            </summary>
            <param name="iArray">Int array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Shuffle(System.Int32[],System.Int32)">
            <summary>
            Shuffle an int array and preserve contigous orders
            </summary>
            <param name="iArray">Int array</param>
            <param name="preserveNo">Preserve number</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Shuffle(System.Int32[],CenterSpace.NMath.Core.RandGenMTwist)">
            <summary>
            Shuffle an int array
            </summary>
            <param name="iArray">Int array</param>
            <param name="rand">Random number generator</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Shuffle(System.Int32[],System.Int32,CenterSpace.NMath.Core.RandGenMTwist)">
            <summary>
            Shuffle an int array and preserve contigous orders
            </summary>
            <param name="iArray">Int array</param>
            <param name="preserveNo">Preserve number</param>
            <param name="rand">Random number generator</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.IsPermutation(System.Int32[])">
            <summary>
            Is a permutation array(sorted vector = 0..n-1)
            </summary>
            <param name="iArray">int array</param>
            <returns>Is a permutation array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Sum(System.Int32[])">
            <summary>
            Sum the int array
            </summary>
            <param name="iArray">int array</param>
            <returns>Sum</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Sum(System.Int32[0:,0:])">
            <summary>
            Sum the int matrix
            </summary>
            <param name="iMatrix">int matrix</param>
            <returns>Sum</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.SumIf(System.Int32[])">
            <summary>
            Sum the int array
            </summary>
            <param name="iArray">int array</param>
            <returns>Sum</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.SumIf(System.Int32[],CenterSpace.NMath.Stats.FOiTob)">
            <summary>
            Sum the int array with a predicate
            </summary>
            <param name="iArray">int array</param>
            <param name="predicate">Predicate</param>
            <returns>Count</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Unique(System.Int32[])">
            <summary>
            Get unique keys
            </summary>
            <param name="iArray">Int array</param>
            <returns>Unique int array, sorted</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.ReverseSelect(System.Int32[],System.Int32[])">
            <summary>
            Get the unselected indices
            </summary>
            <param name="total">Total indices</param>
            <param name="selected">Selected indices</param>
            <returns>Unselected indices</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.ReverseSelect(System.Int32,System.Int32[])">
            <summary>
            Get the unselected indices
            </summary>
            <param name="totalNumber">Total number (0,totalNumber-1)</param>
            <param name="selected">Selected indices</param>
            <returns>Unselected indices</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Rank(System.Collections.IList,System.Boolean)">
            <summary>
            Return the ranks of ArrayList, allow for tie.
            This algorithm is stable in that the first occured key will always have small rank. 
            </summary>
            <param name="aList">IList</param>
            <param name="reverse">Reverse rank or not</param>
            <returns>Rank array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.#ctor(System.Int32[])">
            <summary>
            store a reference
            </summary>
            <param name="iArray">int[]</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.#ctor(System.Int32[],System.Boolean)">
            <summary>
            Construct from an existing int array and perhaps sort
            </summary>
            <param name="iArray">int array</param>
            <param name="sort">Sort or not</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.op_Implicit(CenterSpace.NMath.Stats.IntArray)~System.Int32[]">
            <summary>
            Implicit casting to int[], just return the reference
            </summary>
            <param name="intArray">IntArray to be casted</param>
            <returns>int[]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.GetHashCode">
            <summary>
            Override GetHashCode
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.Equals(System.Object)">
            <summary>
            Override equals
            </summary>
            <param name="obj">Another IntArray</param>
            <returns>If equals</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.ToString">
            <summary>
            String representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.CompareTo(System.Object)">
            <summary>
            Override CompareTo
            </summary>
            <param name="obj">Another IntArray</param>
            <returns>Comparision result</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntArray.GetHashCode(System.Int32[])">
            <summary>
            Get hash code of an int array. 
            To get most efficienty, elements in array are usally between (0,60)
            </summary>
            <param name="iArray">Int array</param>
            <returns>hashcode</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Integer">
            <summary>
            Wrap an int, must keep this as a class to be functional for Set class!!
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Integer.IntValue">
            <summary>
            Stored value
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.#ctor(System.Int32)">
            <summary>
            Construct from an index
            </summary>
            <param name="aInt">Index</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.SetValue(System.Int32)">
            <summary>
            Set value
            </summary>
            <param name="val">int value</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.Increment(System.Int32)">
            <summary>
            Increment
            </summary>
            <param name="count">Count</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.Increment">
            <summary>
            Increment 1
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.Reset">
            <summary>
            reset to 0
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.Decrement(System.Int32)">
            <summary>
            Decrement
            </summary>
            <param name="count">Count</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.Decrement">
            <summary>
            Decrement 1
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.ToString">
            <summary>
            String representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.CompareTo(System.Object)">
            <summary>
            Override CompareTo
            </summary>
            <param name="obj">Another object</param>
            <returns>Result</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Integer.Clone">
            <summary>
            Get a deep clone
            </summary>
            <returns>Cloned integer</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IntList">
            <summary>
            	A strongly-typed collection of <see cref="T:System.Int32"/> objects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.ToArray">
            <summary>
            To int array
            </summary>
            <returns>int array</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IntList.IIntListEnumerator">
            <summary>
            	Supports type-safe iteration over a <see cref="T:CenterSpace.NMath.Stats.IntList"/>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IntList.IIntListEnumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.IIntListEnumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfuly advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.IIntListEnumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Synchronized(CenterSpace.NMath.Stats.IntList)">
            <summary>
            	Creates a synchronized (thread-safe) wrapper for a 
                <c>IntList</c> instance.
            </summary>
            <returns>
                An <c>IntList</c> wrapper that is synchronized (thread-safe).
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.ReadOnly(CenterSpace.NMath.Stats.IntList)">
            <summary>
            	Creates a read-only wrapper for a 
                <c>IntList</c> instance.
            </summary>
            <returns>
                An <c>IntList</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.#ctor">
            <summary>
            	Initializes a new instance of the <c>IntList</c> class
            	that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.#ctor(System.Int32)">
            <summary>
            	Initializes a new instance of the <c>IntList</c> class
            	that has the specified initial capacity.
            </summary>
            <param name="capacity">
            	The number of elements that the new <c>IntList</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.#ctor(CenterSpace.NMath.Stats.IntList)">
            <summary>
            	Initializes a new instance of the <c>IntList</c> class
            	that contains elements copied from the specified <c>IntList</c>.
            </summary>
            <param name="c">The <c>IntList</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.#ctor(System.Int32[])">
            <summary>
            	Initializes a new instance of the <c>IntList</c> class
            	that contains elements copied from the specified <see cref="T:System.Int32"/> array.
            </summary>
            <param name="a">The <see cref="T:System.Int32"/> array whose elements are copied to the new list.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IntList.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.IntList.Tag.Default">
            <summary>
            default
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.#ctor(CenterSpace.NMath.Stats.IntList.Tag)">
            <summary>
            Constructor
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IntList.Count">
            <summary>
            	Gets the number of elements actually contained in the <c>IntList</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.CopyTo(System.Int32[])">
            <summary>
            	Copies the entire <c>IntList</c> to a one-dimensional
            	<see cref="T:System.Int32"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Int32"/> array to copy to.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.CopyTo(System.Int32[],System.Int32)">
            <summary>
            	Copies the entire <c>IntList</c> to a one-dimensional
            	<see cref="T:System.Int32"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Int32"/> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IntList.IsSynchronized">
            <summary>
            	Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IntList.SyncRoot">
            <summary>
            	Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IntList.Item(System.Int32)">
            <summary>
            	Gets or sets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.IntList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Add(System.Int32)">
            <summary>
            	Adds a <see cref="T:System.Int32"/> to the end of the <c>IntList</c>.
            </summary>
            <param name="item">The <see cref="T:System.Int32"/> to be added to the end of the <c>IntList</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Clear">
            <summary>
            	Removes all elements from the <c>IntList</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Clone">
            <summary>
            	Creates a shallow copy of the <see cref="T:CenterSpace.NMath.Stats.IntList"/>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Contains(System.Int32)">
            <summary>
            	Determines whether a given <see cref="T:System.Int32"/> is in the <c>IntList</c>.
            </summary>
            <param name="item">The <see cref="T:System.Int32"/> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <c>IntList</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.IndexOf(System.Int32)">
            <summary>
            	Returns the zero-based index of the first occurrence of a <see cref="T:System.Int32"/>
            	in the <c>IntList</c>.
            </summary>
            <param name="item">The <see cref="T:System.Int32"/> to locate in the <c>IntList</c>.</param>
            <returns>
            	The zero-based index of the first occurrence of <paramref name="item"/> 
            	in the entire <c>IntList</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Insert(System.Int32,System.Int32)">
            <summary>
            	Inserts an element into the <c>IntList</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:System.Int32"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.IntList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Remove(System.Int32)">
            <summary>
            	Removes the first occurrence of a specific <see cref="T:System.Int32"/> from the <c>IntList</c>.
            </summary>
            <param name="item">The <see cref="T:System.Int32"/> to remove from the <c>IntList</c>.</param>
            <exception cref="T:System.ArgumentException">
            	The specified <see cref="T:System.Int32"/> was not found in the <c>IntList</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.RemoveAt(System.Int32)">
            <summary>
            	Removes the element at the specified index of the <c>IntList</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.IntList.Count"/>.</para>
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IntList.IsFixedSize">
            <summary>
            	Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IntList.IsReadOnly">
            <summary>
            	gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.GetEnumerator">
            <summary>
            	Returns an enumerator that can iterate through the <c>IntList</c>.
            </summary>
            <returns>An <see cref="T:CenterSpace.NMath.Stats.IntList.Enumerator"/> for the entire <c>IntList</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IntList.Capacity">
            <summary>
            	Gets or sets the number of elements the <c>IntList</c> can contain.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.AddRange(CenterSpace.NMath.Stats.IntList)">
            <summary>
            	Adds the elements of another <c>IntList</c> to the current <c>IntList</c>.
            </summary>
            <param name="x">The <c>IntList</c> whose elements should be added to the end of the current <c>IntList</c>.</param>
            <returns>The new <see cref="P:CenterSpace.NMath.Stats.IntList.Count"/> of the <c>IntList</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.AddRange(System.Int32[])">
            <summary>
            	Adds the elements of a <see cref="T:System.Int32"/> array to the current <c>IntList</c>.
            </summary>
            <param name="x">The <see cref="T:System.Int32"/> array whose elements should be added to the end of the <c>IntList</c>.</param>
            <returns>The new <see cref="P:CenterSpace.NMath.Stats.IntList.Count"/> of the <c>IntList</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.TrimToSize">
            <summary>
            	Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="i"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="i"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.IntList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="i"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="i"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.IntList.Count"/>.</para>
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IntList.Enumerator">
            <summary>
            	Supports simple iteration over a <see cref="T:CenterSpace.NMath.Stats.IntList"/>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Enumerator.#ctor(CenterSpace.NMath.Stats.IntList)">
            <summary>
            	Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IntList.Enumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfuly advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IntList.Enumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ISetEnumerator">
            <summary>
            Enumerator coming from Set
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ISetEnumerator.Length">
            <summary>
            Return the length of the enumerator
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ISetEnumerator.SetEntry">
            <summary>
            Return current entry
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NMFFunctions">
            <summary>
            Utility function for Nonnegative Matrix Factorizations.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Numerics">
            <summary>
            Int/Double utilities
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Convert(System.String)">
            <summary>
            Convert a string to double, considering special strings such as NA
            </summary>
            <param name="str">String</param>
            <returns>double</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.IsMissing(System.Double)">
            <summary>
            Is a missing data (NaN or Infinity)
            </summary>
            <param name="d">Double value</param>
            <returns>Is missing</returns>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Numerics.VirtualZero">
            <summary>
            Virtual zero
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.IsVirtualZero(System.Double)">
            <summary>
            Is virtual zero
            </summary>
            <param name="d">Double</param>
            <returns>Is virtual zero</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.IsVirtuallyEqual(System.Double,System.Double)">
            <summary>
            Is virtually equal
            </summary>
            <param name="d1">Double</param>
            <param name="d2">Another double</param>
            <returns>Is virtually zero</returns>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Numerics.CloseToZero">
            <summary>
            Close to zero
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.NRSign(System.Double,System.Double)">
            <summary>
            Return NR-like sign function: if y g.t or e.q 0, return x, else
            return -x
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns>x or -x</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Hypotenuse(System.Double,System.Double)">
            <summary>
            Return Hypotenuse function
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>Function value</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Bit(System.Int32)">
            <summary>
            Get the bit number of the integer
            </summary>
            <param name="i">integer</param>
            <returns>bit number</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Kronecker(System.Int32,System.Int32)">
            <summary>
            Kronecker function
            </summary>
            <param name="i">int i</param>
            <param name="j">int j</param>
            <returns>return 1 if equal, otherwise return 0</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.BetweenZeroOne(System.Double)">
            <summary>
            Is the value between 0 and 1
            </summary>
            <param name="d">Value</param>
            <returns>If between [0,1]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.LogOfSum(System.Double[],System.Int32)">
            <summary>
            Log of sum
            </summary>
            <param name="valueList">Value list</param>
            <param name="maxIndex">Max index</param>
            <returns>Log of summation</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.LogOfSum(System.Double,System.Double)">
            <summary>
            Log of sum
            </summary>
            <param name="logA">LogA</param>
            <param name="logB">LogB</param>
            <returns>Log of sum</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.SafeDivide(System.Double,System.Double)">
            <summary>
            Consider dnom = 0
            </summary>
            <param name="nom">nom</param>
            <param name="dnom">dnom</param>
            <returns>nom/dnom, if dnom = 0 and nom = 0, return 0</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Swap(System.Int32@,System.Int32@)">
            <summary>
            Swap two ints
            </summary>
            <param name="i1">int 1</param>
            <param name="i2">int 2</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Swap(System.Double@,System.Double@)">
            <summary>
            Swap two doubles
            </summary>
            <param name="d1">double 1</param>
            <param name="d2">double 2</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Sort(System.Int32@,System.Int32@)">
            <summary>
            Sort two ints
            </summary>
            <param name="i1">int 1</param>
            <param name="i2">int 2</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Sort(System.Double@,System.Double@)">
            <summary>
            Sort two doubles
            </summary>
            <param name="d1">double 1</param>
            <param name="d2">double 2</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Square(System.Double)">
            <summary>
            Square
            </summary>
            <param name="x">x</param>
            <returns>Square</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Cubic(System.Double)">
            <summary>
            Cublic
            </summary>
            <param name="x">x</param>
            <returns>Cubic</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.FixPrecision(System.Double,System.Int32)">
            <summary>
            Fix precision of a double
            </summary>
            <param name="d">double</param>
            <param name="precision">Precision, should > 0</param>
            <returns>Another double with precision equal to or smaller than requested</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.ToString(System.Int32,System.String)">
            <summary>
            String representation
            </summary>
            <param name="i">int</param>
            <param name="format">Numeric format</param>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.ToString(System.Int32)">
            <summary>
            String representation using default integer format
            </summary>
            <param name="i">int</param>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.ToString(System.Double,System.String)">
            <summary>
            String representation
            </summary>
            <param name="d">double</param>
            <param name="format">Numeric format</param>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.ToString(System.Double)">
            <summary>
            String representation using default float precision
            </summary>
            <param name="d">double</param>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Rotate(CenterSpace.NMath.Stats.DoublePair,System.Double)">
            <summary>
            Rotate the point 
            </summary>
            <param name="dp">Axis of the point</param>
            <param name="degree">Degree to be rotated, positive value is clockwise</param>
            <returns>Axis of the rotated point</returns>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Numerics.Log2">
            <summary>
            Return Log(2)
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Numerics.EPS">
            <summary>
            Error precision = 2.220446e-16
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.LogFactorial(System.Int32)">
            <summary>
            Log factorial, will use stirling's approximation for n > 100
            </summary>
            <param name="x">int</param>
            <returns>log factorial</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.LogBinomial(System.Int32,System.Int32)">
            <summary>
            Return log value of bionomial coefficient
            </summary>
            <param name="n">n</param>
            <param name="k">k</param>
            <returns>Log bionomial coefficient</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Erfc(System.Double)">
            <summary>
            Complementary error function approximation, very precise
            </summary>
            <param name="x">x</param>
            <returns>Complementary error function</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Asinh(System.Double)">
            <summary>
            Hypoblic arc sin
            </summary>
            <param name="x">x</param>
            <returns>Asinh</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Acosh(System.Double)">
            <summary>
            Hypoblic arc cos
            </summary>
            <param name="x">x</param>
            <returns>Acosh</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Atanh(System.Double)">
            <summary>
            Hypoblic arc tan
            </summary>
            <param name="x">x</param>
            <returns>Atanh</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.SolveCubic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Solve real roots for a cubic function
            </summary>
            <param name="a3">a3</param>
            <param name="a2">a2</param>
            <param name="a1">a1</param>
            <param name="a0">a0</param>
            <returns>An array of real roots, could be 0, 1, 2, 3</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Q_KS(System.Double)">
            <summary>
            Get the K-S test utilitiy function Q(KS)
            </summary>
            <param name="lambda">Lambda value</param>
            <returns>Value of Q_KS(lambda)</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.Approximate(System.Double[],System.Double[],System.Double[])">
            <summary>
            Perform linear interpolation (x must be sorted)
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="xOut">values of x to be approximated</param>
            <returns>Approximate function values</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.GivensRotation(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Givens rotation such that
            [[c s], [-s, c]] * [x1,x2] = [y, 0]; 
            return y
            </summary>
            <param name="x1">x1</param>
            <param name="x2">x2</param>
            <param name="c">c</param>
            <param name="s">s</param>
            <returns>y</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.GivensRotation(System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Givens rotation such that
            G1*G2*G3...G(n-1) * [x1, x2, .., xn] = [y, 0...]; 
            return y
            </summary>
            <param name="x">x</param>
            <param name="c">c</param>
            <param name="s">s</param>
            <returns>y</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.GivensRotation2(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Givens rotation such that
            [[c -s], [s, c]] * [x1,x2] = [0..., y]; 
            return y
            </summary>
            <param name="x1">x1</param>
            <param name="x2">x2</param>
            <param name="c">c</param>
            <param name="s">s</param>
            <returns>y</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Numerics.GivensRotation2(System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Givens rotation such that
            G1*G2*G3...G(n-1) * [x1, x2, .., xn] = [0, y]; 
            return y
            </summary>
            <param name="x">x</param>
            <param name="c">c</param>
            <param name="s">s</param>
            <returns>y</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLSFunctions">
            <summary>
            Utility functions for Partial Least Squares.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLSFunctions.ScaleDataInPlace(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Scales each column of the input matrix by its standard deviation.
            </summary>
            <param name="X">A matrix.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLSFunctions.CenterData(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Centers the data in the given matrix by subtracting the column mean
            from each column of the input matrix
            </summary>
            <param name="X">Input matrix of un-centered data.</param>
            <returns>Centered data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLSFunctions.Decrement(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Decrements the values in A by the values in B. Upon completion
            Aij = Aij - Bij
            </summary>
            <param name="A">Matrix to decrement.</param>
            <param name="B">Matrix of decrement values.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLSFunctions.CenterData(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Centers the data in the input vector by subtracting the vector mean
            from each element of the vector
            </summary>
            <param name="v">IN: vector to center. OUT: centered vector</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLSFunctions.Normalize(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Normalized the given vector to have unit length by dividing
            the vector by its length.
            </summary>
            <param name="x">On input the non-unit vector. On output 
            normalized to have unit length.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLSFunctions.EuclideanDistance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the Euclidean distance between two vectors.
            </summary>
            <param name="v">First vector.</param>
            <param name="w">Second vector.</param>
            <returns>The Euclidean distance between the first vector and the 
            second vector.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLSFunctions.Product(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the product of the matrix A and the vector x placing the
            results in the given vector result.
            </summary>
            <param name="A">The matrix.</param>
            <param name="x">The vector.</param>
            <param name="result">The product Ax is placed in result.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PowerMethod">
            <summary>
            Class for computing the dominant eigenvalue and eigenvector of a square
            matrix using the iterative power method.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.PowerMethod.DEFAULT_TOLERANCE">
            <summary>
            The default tolerance that will be assigned to all PowerMethod
            instances when one is not specified.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.PowerMethod.DEFAULT_MAX_ITERATIONS">
            <summary>
            The default maximum number of iterations that will be assigned to 
            all PowerMethod instances when one is not specified.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PowerMethod.#ctor">
            <summary>
            Constructs a PowerMethod instance with the default tolerance and
            maximum number of iterations.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PowerMethod.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs a PowerMethod instance with the specified tolerance
            and maximum number of iterations.
            </summary>
            <param name="tolerance">The power method 
            converges if changes in the normalized eigenvector, with respect to
            the infinity norm, is less than this specified tolerance.</param>
            <param name="maxIterations">The maximum number of iterations to
            perform.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PowerMethod.#ctor(System.Double)">
            <summary>
            Constructs a PowerMethod instance with the specified tolerance and 
            default maximum number of iterations.
            </summary>
            <param name="tolerance">The power method 
            converges if changes in the normalized eigenvector, with respect to
            the infinity norm, is less than this specified tolerance.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PowerMethod.#ctor(System.Int32)">
            <summary>
            Constructs a PowerMethod instance withe the specified maximum number
            of iterations and the default tolerance.
            </summary>
            <param name="maxIterations">The maximum number of iterations to perform.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PowerMethod.Tolerance">
            <summary>
            Gets and sets the tolerance. The power method 
            converges if changes in the normalized eigenvector, with respect to
            the infinity norm, is less than this specified tolerance.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PowerMethod.MaxIterations">
            <summary>
            Gets and sets the maximum number of iterations to perform.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PowerMethod.DominantEigenvector">
            <summary>
            Gets the dominant eigenvector.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PowerMethod.DominantEigenvalue">
            <summary>
            Gets the dominant eigenvalue.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PowerMethod.IsGood">
            <summary>
            Returns true if the most recent calculation converged with respect to
            the tolerance in less than the maximum number of iterations.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PowerMethod.Message">
            <summary>
            Returns a message in the case of a failure.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PowerMethod.NumIterations">
            <summary>
            Gets the number of iterations performed in the most recent calculation.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PowerMethod.CalculateDominantEigenvector(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Calculates the dominant eigenvalue and eigenvector of the given square
            matrix.
            </summary>
            <param name="A">dominant eigenvalue and eigenvector calculated for
            this square matrix.</param>
            <returns>true if the caluculation is successful.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Rope">
            <summary>
            A string array class designed just for serialization/deserialization
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Rope.#ctor(System.String[])">
            <summary>
            Construct from string array
            </summary>
            <param name="sArray">string array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Rope.ToArray">
            <summary>
            Change back to string array
            </summary>
            <returns>string[]</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Set">
            <summary>
            Set is an adapter class which combines HashSet and SortedSet and
            provide a single interface. This class also allows for multiple keys
            storation. Store as (key, count of key).
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.#ctor(CenterSpace.NMath.Stats.SetType)">
            <summary>
            Construct from the key
            </summary>
            <param name="setType">Set type</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.#ctor(System.Collections.ICollection,CenterSpace.NMath.Stats.SetType)">
            <summary>
            Construct from IList
            </summary>
            <param name="c">Collection, can be Array or ArrayList</param>
            <param name="setType">Set type</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Set.Item(System.Int32)">
            <summary>
            Indexer, return key at the given index. Only for Sorted set.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Clone">
            <summary>
            Deep clone the counts.
            </summary>
            <returns>Deep copy of this set (count will be cloned, but not the keys)</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Set.Counts">
            <summary>
            Count for each category
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Set.Frequencies">
            <summary>
            Frequencies for each category
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Subset(System.Int32[])">
            <summary>
            Return subset
            </summary>
            <param name="iArray">index array</param>
            <returns>Subset</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.CountKey(System.Object)">
            <summary>
            Return 0 if does not exist, otherwise return count
            </summary>
            <param name="key">Key to be counted</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Set.Keys">
            <summary>
            Return keys
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.ToSortedList">
            <summary>
            Return a copy of SortedList, only for SortedSet
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.ToHashtable">
            <summary>
            Return a copy of Hashtable, only for HashedSet
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Add(System.Object)">
            <summary>
            Add a key
            </summary>
            <param name="obj">Key to be added</param>
            <returns>Numer of added key, either 1 or 0</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.AddRange(System.Collections.ICollection)">
            <summary>
            Add range of ICollection
            </summary>
            <param name="c">Collection</param>
            <returns>Count of added element</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.AddRange(CenterSpace.NMath.Stats.Set)">
            <summary>
            Add all keys from other set
            </summary>
            <param name="aSet">Another set</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Add(System.Object,System.Int32)">
            <summary>
            Add a key many times
            </summary>
            <param name="obj">Object</param>
            <param name="times">Times</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.GetEnumerator">
            <summary>
            Return ISetEnumerator of SetEntry
            </summary>
            <returns>ISetEnumerator</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.GetDictionaryEnumerator">
            <summary>
            Return IDictionaryEnumerator. Be very careful that the value is type of Integer
            </summary>
            <returns>type of IDictionaryEnumerator</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Contains(System.Object)">
            <summary>
            If contains key
            </summary>
            <param name="key">Key to be queried</param>
            <returns>Contains the key or not</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Remove(System.Object)">
            <summary>
            Remove an object
            </summary>
            <param name="key">Key to be removed</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.RemoveRange(System.Collections.ICollection)">
            <summary>
            Remove several objects
            </summary>
            <param name="c">Keys to be removed</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.RemoveAt(System.Int32)">
            <summary>
            Remove at a specific index, only for sorted set
            </summary>
            <param name="keyIndex">Key index</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.IndexOfKey(System.Object)">
            <summary>
            Get the index of a key
            </summary>
            <param name="key">Key index</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Remove(System.Object,System.Int32)">
            <summary>
            Remove an object for several times, if empty, then remove the key
            </summary>
            <param name="key">Key</param>
            <param name="times">How many times</param>
            <returns>Return true if the key was totally removed</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Clear">
            <summary>
            Clear this Set
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Set.Count">
            <summary>
            Return the count of unique keys
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Set.TotalCount">
            <summary>
            Return the total count of all keys
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.ToString(System.String,System.String)">
            <summary>
            Get the string representation
            </summary>
            <param name="linker1">Linker of element</param>
            <param name="linker2">Linker of key and value</param>
            <returns>String representation</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.ToString">
            <summary>
            Get default string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Union(CenterSpace.NMath.Stats.Set,CenterSpace.NMath.Stats.Set)">
            <summary>
            Union of two sets
            </summary>
            <param name="set1">Set 1</param>
            <param name="set2">Set 2</param>
            <returns>Union of the two sets</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.UnionSize(CenterSpace.NMath.Stats.Set,CenterSpace.NMath.Stats.Set)">
            <summary>
            Size of the union of two sets
            </summary>
            <param name="set1">Set 1</param>
            <param name="set2">Set 2</param>
            <returns>Size(Unique count) of the union of the two sets</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Intersection(CenterSpace.NMath.Stats.Set,CenterSpace.NMath.Stats.Set)">
            <summary>
            Intersection of two sets
            </summary>
            <param name="set1">Set 1</param>
            <param name="set2">Set 2</param>
            <returns>Intersection of the two sets</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.IntersectionSize(CenterSpace.NMath.Stats.Set,CenterSpace.NMath.Stats.Set)">
            <summary>
            Size of intersection of two sets
            </summary>
            <param name="set1">Set 1</param>
            <param name="set2">Set 2</param>
            <returns>Size(Unique keys) of intersection of the two sets</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.Difference(CenterSpace.NMath.Stats.Set,CenterSpace.NMath.Stats.Set)">
            <summary>
            Set 1 - Set 2
            </summary>
            <param name="set1">Set 1</param>
            <param name="set2">Set 2</param>
            <returns>Difference of the two sets</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.DifferenceSize(CenterSpace.NMath.Stats.Set,CenterSpace.NMath.Stats.Set)">
            <summary>
            Size of Set 1 - Set 2
            </summary>
            <param name="set1">Set 1</param>
            <param name="set2">Set 2</param>
            <returns>Size(Unique keys) of difference of the two sets</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.SymmetricDifference(CenterSpace.NMath.Stats.Set,CenterSpace.NMath.Stats.Set)">
            <summary>
            (Set 1 - Set 2) + (Set2 - Set1)
            </summary>
            <param name="set1">Set 1</param>
            <param name="set2">Set 2</param>
            <returns>Symmetric difference of the two sets</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Set.SymmetricDifferenceSize(CenterSpace.NMath.Stats.Set,CenterSpace.NMath.Stats.Set)">
            <summary>
            Size of (Set 1 - Set 2) + (Set2 - Set1)
            </summary>
            <param name="set1">Set 1</param>
            <param name="set2">Set 2</param>
            <returns>Size of symmetric difference of the two sets</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.SetType">
            <summary>
            Set type
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SetType.SortedSet">
            <summary>
            Sorted single set
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SetType.SortedMultiSet">
            <summary>
            Sorted multiple set
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SetType.HashSet">
            <summary>
            Hash single set
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SetType.HashMultiSet">
            <summary>
            Hash multiple set
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.SetEntry">
            <summary>
            Entry of Set enumerator
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SetEntry.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SetEntry.Count">
            <summary>
            Count of the key
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SetEntry.Frequency">
            <summary>
            Frequency of this key
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SetEntry.#ctor(System.Object,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="key">Key</param>
            <param name="count">Count</param>
            <param name="frequency">Frequency</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.StringArray">
            <summary>
            String array
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Paste(System.String,System.Collections.ICollection)">
            <summary>
            Paste a string in front of each element
            </summary>
            <param name="paste">Paste</param>
            <param name="c">Collection</param>
            <returns>string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Paste(System.Collections.ICollection,System.String)">
            <summary>
            Paste a string at the end of each element
            </summary>
            <param name="c">Collection</param>
            <param name="paste">Paste</param>
            <returns>string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Reverse(System.String[])">
            <summary>
            Reverse a string array
            </summary>
            <param name="sArray">String array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Filter(System.String[],System.String)">
            <summary>
            Filter a string array using regular expression
            </summary>
            <param name="sArray">String array</param>
            <param name="filter">Filter</param>
            <returns>Filtered string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Replace(System.String[],System.String,System.String)">
            <summary>
            Find and replace
            </summary>
            <param name="c">String array</param>
            <param name="aStr">String value to be replaced</param>
            <param name="bStr">New value</param>
            <returns>Number of replacement</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ToLower(System.String[])">
            <summary>
            To Lower case
            </summary>
            <param name="sArray">String array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ToUpper(System.String[])">
            <summary>
            To Upper case
            </summary>
            <param name="sArray">String array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ToString(System.String[],System.String)">
            <summary>
            String representation
            </summary>
            <param name="sArray">string[]</param>
            <param name="linker">Linker</param>
            <returns>string</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ToString(System.String[])">
            <summary>
            String linked by comma
            </summary>
            <param name="sArray">string[]</param>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Equals(System.String[],System.String[])">
            <summary>
            If two string[] are equals
            </summary>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <returns>If equals</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Compare(System.String[],System.String[])">
            <summary>
            Compare two objects. This will compare each element of the two 
            arrays and when one array is shorter and there is a tie, the longer 
            one is "larger".
            </summary>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <returns>Comparing result</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.New(System.Int32,System.String)">
            <summary>
            New a string array with the same initvalue
            </summary>
            <param name="count">The count of string array</param>
            <param name="initValue">The init value</param>
            <returns>string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ToArray(System.Collections.ICollection)">
            <summary>
            Change any collection to string array
            </summary>
            <param name="ic">Collection</param>
            <returns>String array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ToArray(System.Int32,System.Collections.ICollection)">
            <summary>
            Change any collection to string array
            </summary>
            <param name="ic">Collection</param>
            <param name="index">Start index</param>
            <returns>String array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ToArray(System.Int32,System.Int32,System.Collections.ICollection)">
            <summary>
            Change any collection to string array
            </summary>
            <param name="index">Start index</param>
            <param name="length">Length</param>
            <returns>String array</returns>
            <param name="ic">Collection</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ToArray(System.Double[],System.String)">
            <summary>
            String representation for each double with a fixed precision
            </summary>
            <param name="dArray">double[]</param>
            <param name="format">Numerical format</param>
            <returns>string[]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Merge(System.String[],System.String[])">
            <summary>
            Merge two arrays into on array
            </summary>
            <param name="s1">string array 1</param>
            <param name="s2">string array 2</param>
            <returns>Merged string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.TrimFront(System.String[]@)">
            <summary>
            Trim a string array from the left
            </summary>
            <param name="s1">string array 1</param>
            <returns>Trimmed string</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Trim(System.String[]@,System.Int32)">
            <summary>
            Truncate a string array
            </summary>
            <param name="s1">string array 1</param>
            <param name="length">Length to be truncated</param>
            <returns>Truncated string</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Copy(System.String[])">
            <summary>
            Return an exact copy of an string array
            </summary>
            <param name="sArray">String array</param>
            <returns>Copy of the string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Fill(System.String[],System.String)">
            <summary>
            Fill a string array with a value
            </summary>
            <param name="sArray">string array</param>
            <param name="str">Value to be filled</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.SubArray(System.String[],CenterSpace.NMath.Stats.Subset)">
            <summary>
            Get sub array
            </summary>
            <param name="sArray">String array</param>
            <param name="subset">Subset</param>
            <returns>Sub string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.CountIf(System.String[],CenterSpace.NMath.Stats.FOsTob)">
            <summary>
            Count according to a predicate
            </summary>
            <param name="sArray">String array</param>
            <param name="ap">Predicate</param>
            <returns>Count</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Unique(System.String[])">
            <summary>
            Get unique keys
            </summary>
            <param name="sArray">String array</param>
            <returns>Unique string array, sorted</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Split(System.String)">
            <summary>
            Split a string using default delims " \t,;"
            </summary>
            <param name="str">The parsed string array</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Split(System.String,System.String)">
            <summary>
            Split a string using a user defined delim
            </summary>
            <param name="str">The string to be parsed</param>
            <param name="delim">The delims</param>
            <returns>String array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ParseStatement(System.String)">
            <summary>
            Remove anything between /* and */ and parse each statement using ;
            If a statement has no =, it will be ingored
            </summary>
            <param name="str">String</param>
            <returns>Statement list</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Split2(System.String,System.String)">
            <summary>
            Parse a string and conserve the delimiters in a pair of parenthesis
            </summary>
            <param name="str">String</param>
            <param name="delim">Delimiter</param>
            <returns>String array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Split2(System.String)">
            <summary>
            Parse a string and conserve the delimiters in a pair of parenthesis
            </summary>
            <param name="str">String</param>
            <returns>String array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.FixLength(System.String[],System.Int32,System.Boolean)">
            <summary>
            Fix the length for each string. If the string is shorter than expected, it will be padded,
            if it's longer, it will be truncated or added index according to the parameter.
            </summary>
            <param name="sArray">String array</param>
            <param name="length">Fixed length</param>
            <param name="truncateOnly">If just truncate the string</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.MaxLength(System.String[])">
            <summary>
            Return the length of the longest string
            </summary>
            <param name="sArray">String array</param>
            <returns>Maximal length</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.LoadText(System.String)">
            <summary>
            Load text from a text file, each row is a string
            </summary>
            <param name="fileName">File name</param>
            <returns>String array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.LoadText(System.String,System.String)">
            <summary>
            Load text from a text file, the whole file will be read as one string and parsed by delims
            </summary>
            <param name="fileName">File name</param>
            <param name="delims">Delims</param>
            <returns>String arrays</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.SaveText(System.String,System.Collections.IList)">
            <summary>
            Save Array to a text file, each memeber is a pop
            </summary>
            <param name="fileName">File name</param>
            <param name="list">IList to be saved</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.#ctor(System.String[])">
            <summary>
            Wrap a reference
            </summary>
            <param name="sArray">string[]</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.#ctor(System.String[],System.Boolean)">
            <summary>
            Construct from an existing int array and perhaps sort
            </summary>
            <param name="sArray">string array</param>
            <param name="sort">Sort or not</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.op_Implicit(CenterSpace.NMath.Stats.StringArray)~System.String[]">
            <summary>
            Implicit casting to string[], a reference was returned!
            </summary>
            <param name="stringArray">StringArray to be casted</param>
            <returns>string[]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.GetHashCode">
            <summary>
            Override GetHashCode
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.Equals(System.Object)">
            <summary>
            Override equals
            </summary>
            <param name="obj">Another StringArray</param>
            <returns>If equals</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.ToString">
            <summary>
            String representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringArray.CompareTo(System.Object)">
            <summary>
            Override CompareTo
            </summary>
            <param name="obj">Another StringArray</param>
            <returns>Comparision result</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.StringList">
            <summary>
            	A strongly-typed collection of <see cref="T:System.String"/> objects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.ToArray">
            <summary>
            To string array
            </summary>
            <returns>string array</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.StringList.IStringListEnumerator">
            <summary>
            	Supports type-safe iteration over a <see cref="T:CenterSpace.NMath.Stats.StringList"/>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StringList.IStringListEnumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.IStringListEnumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfuly advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.IStringListEnumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Synchronized(CenterSpace.NMath.Stats.StringList)">
            <summary>
            	Creates a synchronized (thread-safe) wrapper for a 
                <c>StringList</c> instance.
            </summary>
            <returns>
                An <c>StringList</c> wrapper that is synchronized (thread-safe).
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.ReadOnly(CenterSpace.NMath.Stats.StringList)">
            <summary>
            	Creates a read-only wrapper for a 
                <c>StringList</c> instance.
            </summary>
            <returns>
                An <c>StringList</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.#ctor">
            <summary>
            	Initializes a new instance of the <c>StringList</c> class
            	that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.#ctor(System.Int32)">
            <summary>
            	Initializes a new instance of the <c>StringList</c> class
            	that has the specified initial capacity.
            </summary>
            <param name="capacity">
            	The number of elements that the new <c>StringList</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.#ctor(CenterSpace.NMath.Stats.StringList)">
            <summary>
            	Initializes a new instance of the <c>StringList</c> class
            	that contains elements copied from the specified <c>StringList</c>.
            </summary>
            <param name="c">The <c>StringList</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.#ctor(System.String[])">
            <summary>
            	Initializes a new instance of the <c>StringList</c> class
            	that contains elements copied from the specified <see cref="T:System.String"/> array.
            </summary>
            <param name="a">The <see cref="T:System.String"/> array whose elements are copied to the new list.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.StringList.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StringList.Tag.Default">
            <summary>
            tag
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.#ctor(CenterSpace.NMath.Stats.StringList.Tag)">
            <summary>
            String list
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StringList.Count">
            <summary>
            	Gets the number of elements actually contained in the <c>StringList</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.CopyTo(System.String[])">
            <summary>
            	Copies the entire <c>StringList</c> to a one-dimensional
            	<see cref="T:System.String"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.String"/> array to copy to.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.CopyTo(System.String[],System.Int32)">
            <summary>
            	Copies the entire <c>StringList</c> to a one-dimensional
            	<see cref="T:System.String"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.String"/> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StringList.IsSynchronized">
            <summary>
            	Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StringList.SyncRoot">
            <summary>
            	Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StringList.Item(System.Int32)">
            <summary>
            	Gets or sets the <see cref="T:System.String"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.StringList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Add(System.String)">
            <summary>
            	Adds a <see cref="T:System.String"/> to the end of the <c>StringList</c>.
            </summary>
            <param name="item">The <see cref="T:System.String"/> to be added to the end of the <c>StringList</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Clear">
            <summary>
            	Removes all elements from the <c>StringList</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Clone">
            <summary>
            	Creates a shallow copy of the <see cref="T:CenterSpace.NMath.Stats.StringList"/>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Contains(System.String)">
            <summary>
            	Determines whether a given <see cref="T:System.String"/> is in the <c>StringList</c>.
            </summary>
            <param name="item">The <see cref="T:System.String"/> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <c>StringList</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.IndexOf(System.String)">
            <summary>
            	Returns the zero-based index of the first occurrence of a <see cref="T:System.String"/>
            	in the <c>StringList</c>.
            </summary>
            <param name="item">The <see cref="T:System.String"/> to locate in the <c>StringList</c>.</param>
            <returns>
            	The zero-based index of the first occurrence of <paramref name="item"/> 
            	in the entire <c>StringList</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Insert(System.Int32,System.String)">
            <summary>
            	Inserts an element into the <c>StringList</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:System.String"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.StringList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Remove(System.String)">
            <summary>
            	Removes the first occurrence of a specific <see cref="T:System.String"/> from the <c>StringList</c>.
            </summary>
            <param name="item">The <see cref="T:System.String"/> to remove from the <c>StringList</c>.</param>
            <exception cref="T:System.ArgumentException">
            	The specified <see cref="T:System.String"/> was not found in the <c>StringList</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.RemoveAt(System.Int32)">
            <summary>
            	Removes the element at the specified index of the <c>StringList</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.StringList.Count"/>.</para>
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StringList.IsFixedSize">
            <summary>
            	Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StringList.IsReadOnly">
            <summary>
            	gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.GetEnumerator">
            <summary>
            	Returns an enumerator that can iterate through the <c>StringList</c>.
            </summary>
            <returns>An <see cref="T:CenterSpace.NMath.Stats.StringList.Enumerator"/> for the entire <c>StringList</c>.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StringList.Capacity">
            <summary>
            	Gets or sets the number of elements the <c>StringList</c> can contain.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.AddRange(CenterSpace.NMath.Stats.StringList)">
            <summary>
            	Adds the elements of another <c>StringList</c> to the current <c>StringList</c>.
            </summary>
            <param name="x">The <c>StringList</c> whose elements should be added to the end of the current <c>StringList</c>.</param>
            <returns>The new <see cref="P:CenterSpace.NMath.Stats.StringList.Count"/> of the <c>StringList</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.AddRange(System.String[])">
            <summary>
            	Adds the elements of a <see cref="T:System.String"/> array to the current <c>StringList</c>.
            </summary>
            <param name="x">The <see cref="T:System.String"/> array whose elements should be added to the end of the <c>StringList</c>.</param>
            <returns>The new <see cref="P:CenterSpace.NMath.Stats.StringList.Count"/> of the <c>StringList</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.TrimToSize">
            <summary>
            	Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="i"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="i"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.StringList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="i"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="i"/> is equal to or greater than <see cref="P:CenterSpace.NMath.Stats.StringList.Count"/>.</para>
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.StringList.Enumerator">
            <summary>
            	Supports simple iteration over a <see cref="T:CenterSpace.NMath.Stats.StringList"/>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Enumerator.#ctor(CenterSpace.NMath.Stats.StringList)">
            <summary>
            	Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StringList.Enumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfuly advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StringList.Enumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Table">
            <summary>
            Generic table. 
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Table.rows">
            <summary>
            Store ArrayList of rows
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.#ctor(System.String[],System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strs">String array</param>
            <param name="delims">delim for each string</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.#ctor(System.String,System.String)">
            <summary>
            Parse string, Lines must be separated by Environment.NewLine
            </summary>
            <param name="str">string to be parsed</param>
            <param name="delims">Delims</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Init the table with the same value
            </summary>
            <param name="xSize">Row number</param>
            <param name="ySize">Column number</param>
            <param name="obj">Init value</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.#ctor(System.Int32,System.Int32)">
            <summary>
            Init the table with null value
            </summary>
            <param name="xSize">Row number</param>
            <param name="ySize">Column number</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Table.Item(System.Int32,System.Int32)">
            <summary>
            Indexer that return an element
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Fill(System.Object)">
            <summary>
            Fill all cells
            </summary>
            <param name="val">Value</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Table.RowCount">
            <summary>
            Row count
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Table.ColumnCount">
            <summary>
            Column count
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Table.IsSquare">
            <summary>
            Is a square table
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Table.IsSymmetric">
            <summary>
            Is a symmetric table
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Row(System.Int32)">
            <summary>
            Return row
            </summary>
            <param name="rowIndex">Row index</param>
            <returns>ICollection</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.StringRow(System.Int32)">
            <summary>
            Return string row
            </summary>
            <param name="rowIndex">Row index</param>
            <returns>string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Column(System.Int32)">
            <summary>
            Return column
            </summary>
            <param name="colIndex">Column index</param>
            <returns>ICollection</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.StringColumn(System.Int32)">
            <summary>
            Return string column
            </summary>
            <param name="colIndex">Column index</param>
            <returns>string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Add(CenterSpace.NMath.Stats.DirectionType,System.Collections.ICollection)">
            <summary>
            Add a row or column
            </summary>
            <param name="direction">Adding direction</param>
            <param name="c">ICollection</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Remove(CenterSpace.NMath.Stats.DirectionType)">
            <summary>
            Remove a row or column
            </summary>
            <param name="direction">Removing direction</param>
            <returns>Removed row or column</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.InsertAt(CenterSpace.NMath.Stats.DirectionType,System.Int32,System.Collections.ICollection)">
            <summary>
            Insert in the middle
            </summary>
            <param name="direction">Either MiddleRow or MiddleColumn</param>
            <param name="index">Index of row or col</param>
            <param name="c">ICollection</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.RemoveAt(CenterSpace.NMath.Stats.DirectionType,System.Int32)">
            <summary>
            Remove a row or column in the middle
            </summary>
            <param name="direction">Removing direction</param>
            <param name="index">Index or row or col</param>
            <returns>Removed row or column</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Replace(System.Object,System.Object)">
            <summary>
            Find and replace
            </summary>
            <param name="obj1">Orignal object</param>
            <param name="obj2">New object</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Transpose">
            <summary>
            Get the transposed Table
            </summary>
            <returns>Transposed Table</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Load(System.IO.StreamReader,System.String)">
            <summary>
            Load table from StreamReader
            </summary>
            <param name="sr">You are responsible to close StreamReader</param>
            <param name="colDelim">Delims</param>
            <returns>Table</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Load(System.String,System.String)">
            <summary>
            Load table from a text file
            </summary>
            <param name="fileName">File name</param>
            <param name="colDelim">Delims to separate strings in string array</param>
            <returns>Table</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Load(System.String,System.Char)">
            <summary>
            Load table from a single char delimited file
            </summary>
            <param name="fileName">File name</param>
            <param name="delimChar">delimiter character</param>
            <returns>Table</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Save(System.String,System.String)">
            <summary>
            Save Table to a text file
            </summary>
            <param name="fileName">File name</param>
            <param name="colDelim">Column delim</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Save(System.IO.StreamWriter,System.String)">
            <summary>
            Save table to StreamWriter - you are resonsible to close this streams
            </summary>
            <param name="colDelim">Column delim</param>
            <param name="sw">StreamWriter</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.ToInt">
            <summary>
            Cast to an int[][]
            </summary>
            <returns>Cast int[][]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.ParseInt">
            <summary>
            Parse to an int[][]
            </summary>
            <returns>Parsed int[][]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.ToDouble">
            <summary>
            Cast to a double[][]
            </summary>
            <returns>Casted double[][]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.ParseDouble">
            <summary>
            Parse to a double[][]
            </summary>
            <returns>Parsed double[][]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.ToBool">
            <summary>
            Cast to a bool[][]
            </summary>
            <returns>Casted bool[][]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.ParseBool">
            <summary>
            Parse to a bool[][]
            </summary>
            <returns>Parsed bool[][]</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.op_Implicit(CenterSpace.NMath.Stats.Table)~System.String[][]">
            <summary>
            Implicit casting to string columns
            </summary>
            <param name="table">Table</param>
            <returns>string columns</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.ToString(System.String,System.String)">
            <summary>
            String representation
            </summary>
            <param name="rDelim">Row delim</param>
            <param name="cDelim">Column delim</param>
            <returns>String representation</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.ToString">
            <summary>
            Overrided ToString()
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.ToStringArray(System.String)">
            <summary>
            Link each row to a string
            </summary>
            <param name="linker">Linker of columns</param>
            <returns>string array</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Table.Clone">
            <summary>
            Deep clone
            </summary>
            <returns>Deep copy</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IPLS1Calc">
            <summary>
            Interface for performing a Partial Least Squares (PLS) calculation.
            </summary>
            <remarks>This is a PLS1 algorithm.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IPLS1Calc.IsGood">
            <summary>
            Indicates whether the most recent calculation was successful or not.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IPLS1Calc.Message">
            <summary>
            Gets any message that may have been generated by the algorithm. For 
            example, if the calculation is unsuccessful, the message should 
            indicate the reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IPLS1Calc.Scores">
            <summary>
            Gets a matrix whow columns are the score vectors.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IPLS1Calc.Loadings">
            <summary>
            Gets a matrix whow columns are the loading vectors.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS1Calc.Calculate(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Performs a PLS1 calculation on the given data.
            </summary>
            <param name="predictorMatrix">Independent data values. Matrix should be number of 
            samples rows by number of independent variables columns.</param>
            <param name="responseVector">response data values. Vector should have length
            equal to the number of samples.</param>
            <param name="numComponents">Number of components, or latent vectors, to
            use for the calculation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS1Calc.Predict(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Use the calculated model to predict the response value, <c>y</c>, from the given
            value of the predictor variable.
            </summary>
            <param name="z">Predictor variable value.</param>
            <returns>Predicted response value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS1Calc.Predict(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Use the calculated model to predict the response values, <c>ResponseVector</c>
            , from the given set of predictor variables.
            </summary>
            <param name="Z">Matrix of predictor variable values, one per row.</param>
            <returns>Predicted response variable values. The ith element is the predicted
            response for predictor variable in the ith row of <c>Z</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS1Calc.Clone">
            <summary>
            A deep copy of self.
            </summary>
            <returns>Deep copy of self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS1Calc.QResiduals">
            <summary>
            Calculates the Q residuals for in sample in the model. The Q residual 
            for a given sample is the distance between the sample and its projection
            in the subspace of the model.
            </summary>
            <returns>Vector of Q residuals. The ith element of vector is the residual
            for the ith sample.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS1Calc.HotellingsT2">
            <summary>
            Calculaties Hotelling's T2 statistic for each sample. T2 can be viewed as the 
            squared distance from a samples projection into the subspace to the centroid
            of the subspace, or, more simply, the variation of the sample point within
            the model.
            </summary>
            <returns>Vector of T2 statistics for the samples. The ith element of the
            T2 vector is the T2 statistic for the ith sample.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IPLS2Calc">
            <summary>
            Interface for performing a Partial Least Squares (PLS) calculation.
            </summary>
            <remarks>
            Implementations must be able to handle dependent, or 
            <c>ResponseVector</c>, data with multiple columns (variables). That 
            is, the algorithm must be a PLS2 algorithm.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IPLS2Calc.IsGood">
            <summary>
            Indicates whether the most recent calculation was successful.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IPLS2Calc.Message">
            <summary>
            Gets any message that may have been generated by the algorithm. For example,
            if the calculation is unsuccessful, the message should indicate the
            reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IPLS2Calc.PredictorScores">
            <summary>
            Gets a matrix whow columns are the predictor score vectors.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IPLS2Calc.PredictorLoadings">
            <summary>
            Gets a matrix whow columns are the predictor loading vectors.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IPLS2Calc.Coefficients">
            <summary>
            Gets the matrix of coefficients used for making predictions.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS2Calc.Calculate(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Perform a PLS2 calculation on the given data.
            </summary>
            <param name="X">Predictor data values. Matrix should be number of 
            sample rows by number of predictor variable columns.</param>
            <param name="Y">Response data values. Matrix should be number of 
            sample rows by number of response variable columns.</param>
            <param name="numComponents">Number of components, or latent vectors, to
            use for the calculation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS2Calc.Predict(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Use the calculated model to predict the response value, <c>y</c>, from 
            the given value of the predictor variable.
            </summary>
            <param name="z">Predictor variable value.</param>
            <returns>Predicted dependent value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS2Calc.Predict(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Use the calculated model to predict the response value for each of
            of the given predictor values.
            </summary>
            <param name="X">Matrix of predictor values. Each row contains a value
            for the predictor variable.</param>
            <returns>Matrix of predicted response values. Each row of the returned
            matrix contains the predicted value for the corresponding row of the
            input response variable matrix <c>PredictorMatrix</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS2Calc.Clone">
            <summary>
            A deep copy of self.
            </summary>
            <returns>Deep copy of self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS2Calc.QResiduals(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Calculates the Q residuals for in sample in the model. The Q residual 
            for a given sample is the distance between the sample and its projection
            in the subspace of the model.
            </summary>
            <param name="X">Matrix of samples. Each row is a sample.</param>
            <returns>Vector of Q residuals. The ith element of vector is the residual
            for the ith sample.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IPLS2Calc.HotellingsT2">
            <summary>
            Calculaties Hotelling's T2 statistic for each sample. T2 can be viewed as the 
            squared distance from a samples projection into the subspace to the centroid
            of the subspace, or, more simply, the variation of the sample point within
            the model.
            </summary>
            <returns>Vector of T2 statistics for the samples. The ith element of the
            T2 vector is the T2 statistic for the ith sample.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IRandomVariableMoments">
            <summary>
            Interface implemented by probablility distributions.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IRandomVariableMoments.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IRandomVariableMoments.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IRandomVariableMoments.Kurtosis">
            <summary>
            Gets the kurtosis of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IRandomVariableMoments.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.GoodnessOfFit">
            <summary>
            Class GoodnessOfFit tests goodness of fit for least squares model-fitting classes, such as LinearRegression,
            PolynomialLeastSquares, and OneVariableFunctionFitter.
            </summary>
            <remarks>
            Available statistics include the residual standard error, the coefficient of determination (R2 and "adjusted" R2),
            the F-statistic for the overall model with its numerator and denominator degrees of freedom, and
            standard errors, t-statistics, and corresponding (two-sided) p-values for the model parameters.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFit.GetGoodnessOfFit``1(CenterSpace.NMath.Analysis.OneVariableFunctionFitter{``0},CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a GoodnessOfFit instance from the given OneVariableFunctionFitter.
            </summary>
            <param name="fitter">A one variable function fitter.</param>
            <param name="x">The x data used to fit the model.</param>
            <param name="y">The y data used to fit the model.</param>
            <param name="solution">The solution found by the fitter.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if x and y are not the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFit.#ctor(CenterSpace.NMath.Analysis.PolynomialLeastSquares,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a GoodnessOfFit instance from the given PolynomialLeastSquares.
            </summary>
            <param name="fit">A polynomial least squares fit.</param>
            <param name="x">The x data used to fit the model.</param>
            <param name="y">The y data used to fit the model.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if x and y are not the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFit.#ctor(CenterSpace.NMath.Analysis.OneVariableFunctionFitter{CenterSpace.NMath.Analysis.TrustRegionMinimizer},CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a GoodnessOfFit instance from the given <c>OneVariableFunctionFitter</c>
            which uses the <c>TrustRegionMinimizer</c>.
            </summary>
            <param name="fitter">A one variable function fitter.</param>
            <param name="x">The x data used to fit the model.</param>
            <param name="y">The y data used to fit the model.</param>
            <param name="solution">The solution found by the fitter.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if x and y are not the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFit.#ctor(CenterSpace.NMath.Analysis.OneVariableFunctionFitter{CenterSpace.NMath.Analysis.LevenbergMarquardtMinimizer},CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a GoodnessOfFit instance from the given <c>OneVariableFunctionFitter</c>
            which uses the <c>LevenbergMarquardtMinimizer</c>.
            </summary>
            <param name="fitter">A one variable function fitter.</param>
            <param name="x">The x data used to fit the model.</param>
            <param name="y">The y data used to fit the model.</param>
            <param name="solution">The solution found by the fitter.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if x and y are not the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFit.#ctor(CenterSpace.NMath.Stats.LinearRegression)">
            <summary>
            Constructs a GoodnessOfFit instance from the given LinearRegression.
            </summary>
            <param name="lr">A linear regression object.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.RegressionSumOfSquares">
            <summary>
            Gets the regression sum of squares.
            </summary>
            <remarks>
            This quantity indicates the amount of variability explained by the
            model. It is the sum of the squares of the difference between the
            values predicted by the model and the mean.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.ResidualSumOfSquares">
            <summary>
            Gets the residual sum of squares.
            </summary>
            <remarks>
            This is the sum of the squares of the differences between the predicted and
            actual observations.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.ModelDegreesOfFreedom">
            <summary>
            Gets the number of degrees of freedom for the model.
            </summary>
            <remarks>
            This equal to the number of predictors in the model.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.ErrorDegreesOfFreedom">
            <summary>
            Gets the number of degrees of freedom for the model error.
            </summary>
            <remarks>
            This is equal to the number of observations minus the number of model 
            parameters.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.RSquared">
            <summary>
            Gets the coefficient of determination.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.AdjustedRsquared">
            <summary>
            Gets the adjusted coefficient of determination.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.MeanSquaredResidual">
            <summary>
            Gets the mean squared residual.
            </summary>
            <remarks>
            This is the equal to the residual sum of squares divided by the
            error degrees of freedom.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.MeanSquaredRegression">
            <summary>
            Gets the mean squared for the regression.
            </summary>
            <remarks>
            This is equal to the regresssion sum of squares divided by the
            model degrees of freedom.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.ResidualStandardError">
            <summary>
            Gets the residual standard error.
            </summary>
            <remarks>
            This is equal to the square root of the mean squared residual.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.FStatistic">
            <summary>
            Gets the overall F-statistic for the model.
            </summary>
            <remarks>
            This is equal to the ratio of the mean squared for the regression to the
            mean squared residual.
            <br/>
            This is the statistic for a hypothesis test where the null hypothesis is
            that all the parameters are equal to 0 and the alternative hypothesis is
            that at least one parameter is nonzero.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.FStatisticPValue">
            <summary>
            Gets the p-value for the F-statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFit.Parameters">
            <summary>
            Gets an array of parameter objects which may be used to perform hypothesis tests on
            individual parameters in the model.
            </summary>
            <remarks>
            Parameter objects contain the value, standard error, t-statistic, and corresponding
            (two-sided) p-value for each model parameters.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFit.FStatisticCriticalValue(System.Double)">
            <summary>
            Computes the critical value for the F-statistic at the given
            signicance level.
            </summary>
            <param name="alpha">A signicance level.</param>
            <returns>The critical value.</returns>
            <remarks>
            If the observed F-statistic is greater than the critical value,
            we may reject the null hypothesis that all the model parameters are equal
            to zero at a significance level of <c>alpha</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFit.Clone">
            <summary>
            Creates a deep copy of this GoodnessOfFit.
            </summary>
            <returns>A deep copy of this GoodnessOfFit.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFit.ToString">
            <summary>
            String representation of a GoodnessOfFit object.
            </summary>
            <returns>A string representation of this GoodnessOfFit object.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.GoodnessOfFitParameter">
            <summary>
            Class GoodnessOfFitParameter tests statistical hypotheses about
            estimated parameters in regression models.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFitParameter.#ctor">
            <summary>
            Used by Clone method.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFitParameter.#ctor(System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
            Construct a GoodnessOfFitParameter instance for the specified parameter in the model.
            </summary>
            <param name="index">The index of the parameter (zero-based).</param>
            <param name="value">The value of the paramters.</param>
            <param name="degreesOfFreedom">The degrees of freedom.</param>
            <param name="standardError">The standard error of the parameter.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFitParameter.Index">
            <summary>
            Gets the index of this parameter in the model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFitParameter.Value">
            <summary>
            Gets the value of this parameter.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFitParameter.StandardError">
            <summary>
            Gets the standard error of this parameter.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.GoodnessOfFitParameter.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFitParameter.ConfidenceInterval(System.Double)">
            <summary>
            Returns the <c>1 - alpha</c> confidence interval for this parameter.
            </summary>
            <param name="alpha">A significance level.</param>
            <returns>The <c>1 - alpha</c> confidence interval.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFitParameter.TStatistic(System.Double)">
            <summary>
            Returns the t-statistic for the null hypothesis that this parameter is equal to
            the given test value.
            </summary>
            <param name="b">A test value.</param>
            <returns>The t-statistic.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFitParameter.TStatisticPValue(System.Double)">
            <summary>
            Returns the p-value for a t-test with the null hypothesis
            that this parameter is equal to the given test value versus the
            alternative hypothesis that it is not.
            </summary>
            <param name="b">A test value.</param>
            <returns>The p-value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFitParameter.TStatisticCriticalValue(System.Double)">
            <summary>
            Gets the critical value of the t-statistic for the specified
            alpha level.
            </summary>
            <param name="alpha">The significance level.</param>
            <returns>The critical value for the significance level.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFitParameter.Clone">
            <summary>
            Creates a deep copy of this GoodnessOfFitParameter.
            </summary>
            <returns>A deep copy of this GoodnessOfFitParameter.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.GoodnessOfFitParameter.ToString">
            <summary>
            Returns a formatted string representation of this parameter.
            </summary>
            <returns>A formatted string representation of this parameter.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ILogisticRegressionCalc">
            <summary>
            Interface class for calculating the parameters of a logistic regression
            model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ILogisticRegressionCalc.InformationMatrix">
            <summary>
            The information matrix is the matrix of negated second partial derivations of
            the log likelihood function. It is the inverse of the variance/covariance
            matrix for the parameter estimates.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ILogisticRegressionCalc.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculate the parameters for the logistic model.
            </summary>
            <param name="X">Matrix of subject data. Rows correspond to 
            subjects.</param>
            <param name="observations">Vector of zeros and ones containing the 
            observed values of the outcomes. A zero entry
            indicates a negative outcome and a one indicates a positive outcome.
            </param>
            <returns>The calculated model parameters.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ILogisticRegressionCalc.IsGood">
            <summary>
            Gets a boolean indicating success of failure of the calculation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.ILogisticRegressionCalc.CalculationMessage">
            <summary>
            Anything you want to tell the user? Useful for indicating the source
            of failed calculation.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.IRegressionCalculation">
            <summary>
            Interface for classes used by class LinearRegression to calculate regression
            parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IRegressionCalculation.RankAvailable">
            <summary>
            Returns <c>true</c> if the rank was calculated as a byproduct of the parameter
            calculation; otherwise, <c>false</c>.
            </summary>
            <remarks>
            If <c>true</c>, the rank is available using the <c>Rank</c> property.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IRegressionCalculation.Rank">
            <summary>
            Returns the rank if it was calculated as a byproduct of the parameter
            calculation.
            </summary>
            <remarks>
            If the <c>RankAvailable</c> property is <c>false</c>, this get should
            throw an exception.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IRegressionCalculation.XTXInvAvailable">
            <summary>
            Gets a boolean value indicating whether or not the matrix formed by taking
            the inverse of the product of the transpose of the regression matrix
            with itself is available. 
            </summary>
            <remarks>If <c>X</c> is the regression matrix and <c>'</c>
            denotes matrix transposition, then this property is <c>true</c> if this
            calculation object can return the inverse of the matrix <c>X'X</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.IRegressionCalculation.XTXInv">
            <summary>
            Gets the matrix formed by taking the inverse of the product of the 
            transpose of the regression matrix with itself, if available.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if this object does not
            implement this calculation. This may be checked with the
            <c>XTXInvAvailable</c> property.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IRegressionCalculation.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the regression parameters for the given matrix of independent values and
            the given vector of dependent values.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.IRegressionCalculation.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Calculates the regression parameters for the given matrix of independent values and
            the given vector of dependent values.
            </summary>
            <param name="dataCleansed">If true, the predictor matrix is guaranteed to contain only numerical values (no NaN or Infinity values). </param>
            <param name="observations">Observations vector</param>
            <param name="predictorMatrix">Predictor matrix</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LeaveOneOutSubsets">
            <summary>
            Class LeaveOneOutSubsets generates the index subsets for a leave-one-out cross validations
            calculation.
            </summary>
            <remarks>
            Specifically, given a set of <c>n</c> indices, instance of this 
            class will generate <c>n</c> different subsets with each subset containing 
            <c>n-1</c> indices. Each index appears in all but one of the subsets (left 
            out of exactly one subset).
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LeaveOneOutSubsets.#ctor">
            <summary>
            Constructs a LeaveOneOutSubsets instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LeaveOneOutSubsets.Clone">
            <summary>
            Creates a deep copy of this LeaveOneOutSubsets.
            </summary>
            <returns>A deep copy of this LeaveOneOutSubsets.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LeaveOneOutSubsets.GetTestingSubsets(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Generates the leave-one-out subsets for use in cross validation.
            </summary>
            <param name="predictorData">Matrix of independent data.</param>
            <param name="responseData">Matrix of dependent data.</param>
            <returns>If the data contains <c>n</c> rows, <c>n</c> subsets are 
            returned. Each row index is left out of exactly one subset.</returns>
            <remarks>Independent and dependent matrices should contain the same
            number of rows (each row represents a sample value for the variables).</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LeaveOneOutSubsets.GetTestingSubsets(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Generates the leave-one-out subsets for use in cross validation.
            </summary>
            <param name="predictorData">DataFrame of independent data.</param>
            <param name="responseData">DataFrame of dependent data.</param>
            <returns>If the data contains <c>n</c> rows, <c>n</c> subsets are returned. 
            Each row index is left out of exactly one subset.</returns>
            <remarks>Independent and dependent matrices should contain the same
            number of rows (each row represents a sample value for the variables).</remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.KruskalWallisTable">
            <summary>
            Class KruskalWallisTable summarizes the information of Kruskal-Wallis rank sum test.
            </summary>
            <remarks>
            Instances of KruskalWallisTable are obtained from a KruskalWallisTest object using the
            <c>Table</c> property, and cannot be constructed independently. 
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KruskalWallisTable.BetweenGroupsRowKey">
            <summary>
            The key used to access the <c>Between groups</c> row in the table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KruskalWallisTable.WithinGroupsRowKey">
            <summary>
            The key used to access the <c>Within groups</c> row in the table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KruskalWallisTable.TotalRowKey">
            <summary>
            The key used to access the <c>Total</c> row in the table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KruskalWallisTable.DegressOfFreedomColName">
            <summary>
            The name of the degrees of freedom column in the table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KruskalWallisTable.SumOfSquaresColName">
            <summary>
            The name of the sum of squares column in the table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KruskalWallisTable.MeanSquareColName">
            <summary>
            The name of the mean square column in the table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KruskalWallisTable.StatisticColName">
            <summary>
            The name of the test statistic column in the table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.KruskalWallisTable.PvalueColName">
            <summary>
            The name of the p-value column in the table.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTable.#ctor">
            <summary>
            Constructs an empty table.
            </summary>
            <remarks>All values are set to <c>StatsSettings.NumericMissingValue</c>.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.SumOfSquaresBetween">
            <summary>
            Gets the between-groups sum of squares.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.SumOfSquaresWithin">
            <summary>
            Gets the within-groups sum of squares.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.SumOfSquaresTotal">
            <summary>
            Gets the total sum of squares.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.DegreesOfFreedomBetween">
            <summary>
            Gets the between-groups degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.DegreesOfFreedomWithin">
            <summary>
            Gets the within-groups degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.DegreesOfFreedomTotal">
            <summary>
            Gets the total degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.MeanSquareBetween">
            <summary>
            Gets the between-groups mean square.
            </summary>
            <remarks>
            The between-groups mean square is the between-groups sum of squares divided by
            the between-groups degrees of freedom.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.MeanSquareWithin">
            <summary>
            Gets the within-group mean square.
            </summary>
            <remarks>
            The within-groups mean square is the within-group sum of squares divided by
            the within-group degrees of freedom.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.MeanSquareTotal">
            <summary>
            Gets the total mean square.
            </summary>
            <remarks>
            The total mean square is the total sum of squares divided by the total
            degrees of freedom.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.Statistic">
            <summary>
            Gets the test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTable.PValue">
            <summary>
            Gets the p-value for the test statistic.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTable.Clone">
            <summary>
            Creates a deep copy of this KruskalWallisTable.
            </summary>
            <returns>A deep copy of this KruskalWallisTable.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.KruskalWallisTest">
            <summary>
            Class KruskalWallisTest performs a Kruskal-Wallis rank sum test.
            </summary>
            <remarks>
            The Kruskal-Wallis test is a non-parametric test for equality of population medians among groups. 
            It is a non-parametric version of the classical one-way ANOVA.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.#ctor">
            <summary>
            Default constructor. Constructs an empty KruskalWallisTest instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.#ctor(CenterSpace.NMath.Core.DoubleVector[])">
            <summary>
            Constructs a KruskalWallisTest instance from data in the given array of vectors.
            </summary>
            <param name="data">An array of vectors. Each vector in the array contains
            the data for a group.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.#ctor(CenterSpace.NMath.Core.DoubleVector[],System.Boolean)">
            <summary>
            Constructs a KruskalWallisTest instance from data in the given array of vectors.
            </summary>
            <param name="data">An array of vectors. Each vector in the array contains
            the data for a group.</param>
            <param name="correct_for_ties">If true, a standard correction for ties is applied. This
            correction usually makes little difference in the value of the test statistic unless
            there are a large number of ties.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a KruskalWallisTest instance from data in the given matrix.
            </summary>
            <param name="data">A matrix of data. Each column in the matrix contains the data
            for a group.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Boolean)">
            <summary>
            Constructs a KruskalWallisTest instance from data in the given matrix.
            </summary>
            <param name="data">A matrix of data. Each column in the matrix contains the data
            for a group.</param>
            <param name="correct_for_ties">If true, a standard correction for ties is applied. This
            correction usually makes little difference in the value of the test statistic unless
            there are a large number of ties.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32)">
            <summary>
            Construct a KruskalWallisTest instance from data in the given data frame.
            </summary>
            <param name="data">A DataFrame containing the data.</param>
            <param name="groupColumn">The index of the DataFrame column containing
            the group values.</param>
            <param name="dataColumn">
            The index of the DataFrame column containing the numeric data. The
            specified column must be numeric.
            </param>
            <remarks>
            A Factor is constructed from the group column using the DataFrame method
            <c>GetFactor()</c>, which creates a sorted array of the unique values. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Construct a KruskalWallisTest instance from data in the given data frame.
            </summary>
            <param name="data">A DataFrame containing the data.</param>
            <param name="groupColumn">The index of the DataFrame column containing
            the group values.</param>
            <param name="dataColumn">
            The index of the DataFrame column containing the numeric data. The
            specified column must be numeric.
            </param>
            <param name="correct_for_ties">If true, a standard correction for ties is applied. This
            correction usually makes little difference in the value of the test statistic unless
            there are a large number of ties.</param>
            <remarks>
            A Factor is constructed from the group column using the DataFrame method
            <c>GetFactor()</c>, which creates a sorted array of the unique values. 
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.Table">
            <summary>
            Gets a table summarizing the result of the last-performed Kruskal-Wallis test.
            <seealso cref="T:CenterSpace.NMath.Stats.KruskalWallisTable"/>
            </summary>
            <remarks>Returns a reference to a <c>KruskalWallisTable</c>
            that will be overwritten if the <c>SetData()</c> method
            is invoked on this <c>KruskalWallisTest</c> instance. If you want an independent
            copy of the table invoke <c>Clone()</c> on the reference returned
            by this property.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.Ranks">
            <summary>
            Gets an array of vectors containing the ranks of the data.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.GrandMeanRank">
            <summary>
            Gets the grand mean rank of the data.
            </summary>
            <remarks>The grand mean is the mean rank of all of the data.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.GroupMeanRanks">
            <summary>
            Gets a vector of group mean ranks.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.N">
            <summary>
            Gets the total sample size.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.GroupSizes">
            <summary>
            Gets an array of group sizes.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.GroupNames">
            <summary>
            Gets an array of group names.
            </summary>
            <remarks>
            If this test object was constructed from a data frame using a grouping column, the
            group names are the sorted, unique Factor levels created from the column values. 
            If this test object was constructed from a matrix or an array of vectors, the group names
            are the strings <c>"Group_0"</c>, <c>"Group_1"</c>...<c>"Group_n"</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.Statistic">
            <summary>
            Gets the test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.PValue">
            <summary>
            Gets the p-value for the test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.KruskalWallisTest.IsTieCorrected">
            <summary>
            Returns true if the standard correction for ties was applied in the
            computation of the test statistic.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.SetData(CenterSpace.NMath.Core.DoubleVector[])">
            <summary>
            Performs a Kruskal-Wallis test on data in the given array of vectors.
            </summary>
            <param name="data">An array of vectors. Each vector in the array contains
            the data for a group.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.SetData(CenterSpace.NMath.Core.DoubleVector[],System.Boolean)">
            <summary>
            Performs a Kruskal-Wallis test on data in the given array of vectors.
            </summary>
            <param name="data">An array of vectors. Each vector in the array contains
            the data for a group.</param>
            <param name="correct_for_ties">If true, a standard correction for ties is applied. This
            correction usually makes little difference in the value of the test statistic unless
            there are a large number of ties.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.SetData(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Performs a Kruskal-Wallis test on data in the given matrix.
            </summary>
            <param name="data">A matrix of data. Each column in the matrix contains the data
            for a group.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.SetData(CenterSpace.NMath.Core.DoubleMatrix,System.Boolean)">
            <summary>
            Performs a Kruskal-Wallis test on data in the given matrix.
            </summary>
            <param name="data">A matrix of data. Each column in the matrix contains the data
            for a group.</param>
            <param name="correct_for_ties">If true, a standard correction for ties is applied. This
            correction usually makes little difference in the value of the test statistic unless
            there are a large number of ties.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.SetData(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32)">
            <summary>
            Performs a Kruskal-Wallis test on data in the given data frame.
            </summary>
            <param name="data">A DataFrame containing the data.</param>
            <param name="groupColumn">The index of the DataFrame column containing
            the group values.</param>
            <param name="dataColumn">
            The index of the DataFrame column containing the numeric data. The
            specified column must be of type DFNumericColumn.
            </param>
            <remarks>
            The DataFrame method <c>GetGroupings()</c> is applied to the specified
            group column, producing a sorted list of unique group values. </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.SetData(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Performs a Kruskal-Wallis test on data in the given data frame.
            </summary>
            <param name="data">A DataFrame containing the data.</param>
            <param name="groupColumn">The index of the DataFrame column containing
            the group values.</param>
            <param name="dataColumn">
            The index of the DataFrame column containing the numeric data. The
            specified column must be of type DFNumericColumn.
            </param>
            <param name="correct_for_ties">If true, a standard correction for ties is applied. This
            correction usually makes little difference in the value of the test statistic unless
            there are a large number of ties.</param>
            <remarks>
            The DataFrame method <c>GetGroupings()</c> is applied to the specified
            group column, producing a sorted list of unique group values. </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.GetGroupRanks(System.Int32)">
            <summary>
            Returns the ranks for the specified group.
            </summary>
            <param name="groupNum">A group index (zero-based).</param>
            <returns>The overall ranks for the observations in group <c>groupNum</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.GetGroupRanks(System.Object)">
            <summary>
            Returns the ranks for the specified group.
            </summary>
            <param name="groupName">A group name.</param>
            <returns>The overall ranks for the observations in group <c>groupName</c>.</returns>
            <remarks>The array of group names can be accessed using the <c>GroupNames</c>
            property. If this test object was constructed from a data frame using a grouping column, the
            group names are the sorted, unique Factor levels created from the column values. 
            If this test object was constructed from a matrix or an array of vectors, the group names
            are simply <c>Group_0</c>, <c>Group_1</c>...<c>Group_n</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.GetGroupMeanRank(System.Int32)">
            <summary>
            Returns the mean rank for the specified group.
            </summary>
            <param name="groupNum">A group index (zero-based).</param>
            <returns>The mean rank for the observations in group <c>groupNum</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.GetGroupMeanRank(System.Object)">
            <summary>
            Returns the mean rank for the specified group.
            </summary>
            <param name="groupName">A group name.</param>
            <returns>The mean rank for the observations in group <c>groupName</c>.</returns>
            <remarks>The array of group names can be accessed using the <c>GroupNames</c>
            property. If this test object was constructed from a data frame using a grouping column, the
            group names are the sorted, unique Factor levels created from the column values. 
            If this test object was constructed from a matrix or an array of vectors, the group names
            are simply <c>Group_0</c>, <c>Group_1</c>...<c>Group_n</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.GetGroupSize(System.Int32)">
            <summary>
            Returns the size of the specified group.
            </summary>
            <param name="groupNum">A group index (zero-based).</param>
            <returns>The number of observations in group <c>groupNum</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.GetGroupSize(System.Object)">
            <summary>
            Returns the size of the specified group.
            </summary>
            <param name="groupName">A group name.</param>
            <returns>The number of observations in group <c>groupName</c>.</returns>
            <remarks>The array of group names can be accessed using the <c>GroupNames</c>
            property. If this test object was constructed from a data frame using a grouping column, the
            group names are the sorted, unique Factor levels created from the column values. 
            If this test object was constructed from a matrix or an array of vectors, the group names
            are simply <c>Group_0</c>, <c>Group_1</c>...<c>Group_n</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.StatisticCriticalValue(System.Double)">
            <summary>
            Computes the critical value for the test statistic at the given significance level.
            </summary>
            <param name="alpha">A significance level.</param>
            <returns>The critical value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.Clone">
            <summary>
            Creates a deep copy of this KruskalWallisTest.
            </summary>
            <returns>A deep copy of this KruskalWallisTest.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.KruskalWallisTest.ToString">
            <summary>
            String representation of a Kruskal-Wallis test.
            </summary>
            <returns>String representation of a Kruskal-Wallis test.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LinearRegression">
            <summary>
            Class LinearRegression computes a multiple linear regression from an input
            matrix of independent variable values and vector of dependent variable
            values.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LinearRegression.DEFAULT_REGRESSION_CALCULATION">
            <summary>
            Default regression calculation is QRRegressionCalculation.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor">
            <summary>
            Default constructor. Constructs a LinearRegression instance with
            all sizes equal to zero.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion data
            and an index to the observation column. By default, the model parameter 
            values are computed using a QR factorization.
            </summary>
            <param name="data">Regression data.</param>
            <param name="observationIndex">Index to column of observations.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Boolean)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion data
            and an index to the observation column, optionally adding an intercept 
            parameter. By default, the model parameter values are computed using a 
            QR factorization.
            </summary>
            <param name="data">Regression data.</param>
            <param name="observationIndex">Index to column of observations.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression data <c>data</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression data is used as given.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,CenterSpace.NMath.Stats.IRegressionCalculation)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion data
            and an index to the observation column.  Model parameter values are computed 
            using the specified regression calculator.
            </summary>
            <param name="data">Regression data.</param>
            <param name="observationIndex">Index to column of observations.</param>
            <param name="regressionCalculator">A regression calculation object. Must
            implement the IRegressionCalculation interface.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Boolean,CenterSpace.NMath.Stats.IRegressionCalculation)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion data
            and an index to the observation column, optionally adding an intercept 
            parameter. The model parameter values are computed using the specified 
            regression calculator.
            </summary>
            <param name="data">Regression data.</param>
            <param name="observationIndex">Index of column of observations.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression data <c>data</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression data is used as given.</param>
            <param name="regressionCalculator">A regression calculation object. Must
            implement the IRegressionCalculation interface.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion data
            and observation column. By default, the model parameter values are computed
            using a QR factorization.
            </summary>
            <param name="data">Regression data.</param>
            <param name="observations">Column of observations.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression data is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.IDFColumn,System.Boolean)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion data
            and observation column, optionally adding an intercept parameter. By default, 
            the model parameter values are computed using a QR factorization.
            </summary>
            <param name="data">Regression data.</param>
            <param name="observations">Column of observations.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression data <c>data</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression data is used as given.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IRegressionCalculation)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion data
            and observation column.  Model parameter values are computed using the
            specified regression calculator.
            </summary>
            <param name="data">Regression data.</param>
            <param name="observations">Column of observations.</param>
            <param name="regressionCalculator">A regression calculation object. Must
            implement the IRegressionCalculation interface.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.IDFColumn,System.Boolean,CenterSpace.NMath.Stats.IRegressionCalculation)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion data
            and observation column, optionally adding an intercept parameter. The
            model parameter values are computed using the specified regression calculator.
            </summary>
            <param name="data">Regression data.</param>
            <param name="observations">Column of observations.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression data <c>data</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression data is used as given.</param>
            <param name="regressionCalculator">A regression calculation object. Must
            implement the IRegressionCalculation interface.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion matrix
            and observation vector. By default, the model parameter values are computed
            using a QR factorization.
            </summary>
            <param name="A">A regression matrix.</param>
            <param name="obs">A vector of observations.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.IRegressionCalculation)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion matrix
            and observation vector. Model parameter values are computed using the
            specified regression calculator.
            </summary>
            <param name="A">A regression matrix.</param>
            <param name="obs">A vector of observations.</param>
            <param name="regressionCalculator">A regression calculation object. Must
            implement the IRegressionCalculation interface.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion matrix
            and observation vector, optionally adding an intercept parameter. By default, 
            the model parameter values are computed using a QR factorization.
            </summary>
            <param name="A">A regression matrix.</param>
            <param name="obs">A vector of observations.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression matrix <c>A</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression matrix is used as given.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Boolean,CenterSpace.NMath.Stats.IRegressionCalculation)">
            <summary>
            Constructs a LinearRegression instance with the specifed regresssion matrix
            and observation vector, optionally adding an intercept parameter. The
            model parameter values are computed using the specified regression calculator.
            </summary>
            <param name="A">A regression matrix.</param>
            <param name="obs">A vector of observations.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression matrix <c>A</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression matrix is used as given.</param>
            <param name="regressionCalculator">A regression calculation object. Must
            implement the IRegressionCalculation interface.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegression.CheckData">
            <summary>
            Gets and sets a boolean indicating whether or not to check input data
            for non-numeric values. If input data is large checking all values for
            NaN's and infinities can be a performance consideration.
            </summary>
            <remarks>
            This variable is checked in the <c>SetRegressionData</c> methods.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegression.RegressionCalculator">
            <summary>
            Gets and sets the regression calculation object used for computing
            the model parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegression.CovarianceMatrix">
            <summary>
            Gets the covariance matrix.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.SingularMatrixException">Thrown if the pseudo-inverse of
            the regression matrix is singular. This can happen if the regression matrix
            does not have full rank.</exception>
            <remarks>The covariance matrix is sometimes called the dispersion matrix or
            variance-covariance matrix.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegression.Residuals">
            <summary>
            Get the vector of residuals.
            </summary>
            <remarks>
            This is the difference between the vector of observed values and the values
            predicted by the model.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegression.Variance">
            <summary>
            Gets an estimate of the variance.
            </summary>
            <remarks>
            This is the residual sum of squares divided by the degrees of freedom
            for the model. The degrees of freedom for the model is equal to the 
            difference between the number of observations and the number
            of parameters.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegression.ParameterEstimates">
            <summary>
            Gets an array of parameter objects which may be used to perform hypothesis tests on
            individual parameters in the model.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.GetStudentizedResiduals">
            <summary>
            Returns the (externally) studentized residuals.
            </summary>
            <remarks>
            Renormalizes the residuals to have unit variance using a leave-one-out measure of error variance,
            that is a vector of estimates of the residual variance obtained when the i-th case is dropped from
            the regression.
            </remarks>
            <returns>A vector of normalized residuals, or null if <c>!IsGood</c>.</returns>
            <seealso cref="M:CenterSpace.NMath.Stats.LinearRegression.GetStandardizedResiduals"/>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.GetStandardizedResiduals">
            <summary>
            Returns the standardized residuals (also known as the internally studentized residuals).
            </summary>
            <remarks>
            Renormalizes the residuals to have unit variance using an overall measure of error variance.
            </remarks>
            <returns>A vector of normalized residuals, or null if <c>!IsGood</c>.</returns>
            <seealso cref="M:CenterSpace.NMath.Stats.LinearRegression.GetStudentizedResiduals"/>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.RecalculateParameters">
            <summary>
            Recalculates the model parameters.
            </summary>
            <remarks>
            The <c>IsGood</c> property should be checked after calling this method
            to determine if the calculation was successful.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.SetRegressionData(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.IDFColumn,System.Boolean)">
            <summary>
            Sets the regression matrix, observation vector, and intercept option to the
            specified values, and recalculates the model parameters.
            </summary>
            <param name="data">Regression data.</param>
            <param name="observations">Column of observations.</param>
            <param name="addIntercept">Intercept option. Set to <c>true</c> if you want
            the model to contain an intercept parameter that is not accounted for in the
            input regression data (in the form of a leading column of ones).</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.SetRegressionData(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Sets the regression matrix, observation vector, and intercept option to the
            specified values, and recalculates the model parameters.
            </summary>
            <param name="A">A regression matrix.</param>
            <param name="obs">A vector of observations.</param>
            <param name="addIntercept">Intercept option. Set to <c>true</c> if you want
            the model to contain an intercept parameter that is not accounted for in the
            input regression matrix (in the form of a leading column of ones).</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows in the
            regression matrix is not equal to the length of the observation vector.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.VarianceInflationFactors">
            <summary>
            An index which measures how much the variance of a coefficient (square of the standard deviation) 
            is increased because of collinearity.
            </summary>
            <returns>The inflation factors for all coefficients.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.VarianceInflationFactor(System.Int32)">
            <summary>
            An index which measures how much the variance of a coefficient (square of the standard deviation) 
            is increased because of collinearity.
            </summary>
            <param name="i">A coefficient.</param>
            <returns>The ith inflation factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.PredictedObservations(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Returns the values of the dependent variable predicted by the model for the given 
            sets of predictor values.
            </summary>
            <param name="A">A matrix of predictor values. Each row of <c>A</c> is a set
            of predictor values.</param>
            <returns>A vector of predicted responses. The <i>i</i>th element of the
            vector is the predicted response for the set of predictor values in the <i>i</i>th
            row of the input matrix <c>A</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number
            of columns in the given matrix is not equal to the number of parameters
            in the model.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.PredictedObservation(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns the value of the dependent variable predicted by the model for the given 
            set of predictor values.
            </summary>
            <param name="x">A set of predictor values.</param>
            <returns>The value of the dependent variable predicted by the model.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length
            of the given vector is not equal to the number of parameters
            in the model.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.PredictionInterval(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Returns a confidence interval for the value of the dependent variable
            predicted by the model for the given set of predictor values.
            </summary>
            <param name="x">A set of predictor values.</param>
            <param name="confidenceLevel">The confidence level for the interval
            expressed as a decimal. For example, if a 95% confidence level is 
            desired, pass in a value of 0.95 for this paramter.</param>
            <returns>A confidence interval for the predicted value at the 
            specified confidence level.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegression.Clone">
            <summary>
            Creates a deep copy of this LinearRegression.
            </summary>
            <returns>A deep copy of this LinearRegression.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LinearRegressionAnova">
            <summary>
            Class LinearRegressionAnova tests overall model significance for linear
            regressions computed by class LinearRegression.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionAnova.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Construct a linear model ANOVA from the data, calculated parameters and optional
            weights.
            </summary>
            <param name="regressionMatrix">Regression data.</param>
            <param name="parameters">The calculated model parameters.</param>
            <param name="observations">The observations.</param>
            <param name="weights">The weights. If provided, and non-null, it is assumed
            that the parameters minimize the weighted least squares problem:
            <c>||(D^1/2)*(Ax - b)||</c>
            where A is the regression matrix, b is the vector of observations, and D is a 
            diagonal matrix whose diagonal consists of the <c>weights</c>.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionAnova.#ctor(CenterSpace.NMath.Stats.LinearRegression)">
            <summary>
            Constructs a LinearRegressionAnova instance for the given linear regression.
            </summary>
            <param name="lr">A linear regression.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.RegressionSumOfSquares">
            <summary>
            Gets the regression sum of squares.
            </summary>
            <remarks>
            This quantity indicates the amount of variability explained by the
            model. It is the sum of the squares of the difference between the
            values predicted by the model and the mean.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.ResidualSumOfSquares">
            <summary>
            Gets the residual sum of squares.
            </summary>
            <remarks>
            This is the sum of the squares of the differences between the predicted and
            actual observations.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.ModelDegreesOfFreedom">
            <summary>
            Gets the number of degrees of freedom for the model.
            </summary>
            <remarks>
            This equal to the number of predictors in the model.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.ErrorDegreesOfFreedom">
            <summary>
            Gets the number of degrees of freedom for the model error.
            </summary>
            <remarks>
            This is equal to the number of observations minus the number of model 
            parameters.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.RSquared">
            <summary>
            Gets the coefficient of determination.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.AdjustedRsquared">
            <summary>
            Gets the adjusted coefficient of determination.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.MeanSquaredResidual">
            <summary>
            Gets the mean squared residual.
            </summary>
            <remarks>
            This is the equal to the residual sum of squares divided by the
            error degrees of freedom (equals the number of observations
            minus the number of model parameters).
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.MeanSquaredRegression">
            <summary>
            Gets the mean squared for the regression.
            </summary>
            <remarks>
            This is equal to the regresssion sum of squares divided by the
            model degrees of freedom (equals number of predictors in the model).
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.FStatistic">
            <summary>
            Gets the overall <i>F</i> statistic for the model.
            </summary>
            <remarks>
            This is equal to the ratio of the mean squared for the regression to the
            mean squared residual.
            <br/>
            This is the statistic for a hypothesis test where the null hypothesis is
            that all the parameters are equal to 0 and the alternative hypothesis is
            that at least one parameter is nonzero.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionAnova.FStatisticPValue">
            <summary>
            Gets the p-value for the <i>F</i> statistic.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionAnova.FStatisticCriticalValue(System.Double)">
            <summary>
            Computes the critical value for the <i>F</i> statistic at the given
            signicance level.
            </summary>
            <param name="alpha">A signicance level.</param>
            <returns>The critical value.</returns>
            <remarks>
            If the observed <i>F</i> statistic is greater than the critical value,
            we may reject the null hypothesis that all the model parameters are equal
            to zero at a significance level of <c>alpha</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionAnova.Clone">
            <summary>
            Creates a deep copy of this LinearRegressionAnova.
            </summary>
            <returns>A deep copy of this LinearRegressionAnova.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LinearRegressionParameter">
            <summary>
            Class LinearRegressionParameter tests statistical hypotheses about
            estimated parameters in linear regressions computed by class
            LinearRegression.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LinearRegressionParameter.paramIndex_">
            <summary>
            Parameter index field.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LinearRegressionParameter.parameterValue_">
            <summary>
            Parameter value field.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LinearRegressionParameter.degreesOfFreedom_">
            <summary>
            Degrees of freedom field.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LinearRegressionParameter.modelVariance_">
            <summary>
             Model variance field.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LinearRegressionParameter.parameterVariance_">
            <summary>
            Parameter variance field.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LinearRegressionParameter.beta_">
            <summary>
            Beta field.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.#ctor">
            <summary>
            Used by Clone method.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.#ctor(CenterSpace.NMath.Stats.LinearRegression,System.Int32)">
            <summary>
            Construct a LinearRegressionParameter instance for the parameter at the
            given index in the given LinearRegression.
            </summary>
            <param name="lr">A linear regression.</param>
            <param name="paramIndex">The index of the parameter (zero-based).</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Construct a <c>LinearRegressionParameter</c> with the values.
            </summary>
            <param name="parameterIndex">Index of this parameter in the linear regresssion</param>
            <param name="parameterValue">Parameter value.</param>
            <param name="parameterVariance">Parameter variance.</param>
            <param name="modelVariance">Model variance.</param>
            <param name="degreesOfFreedom">Degrees of freedom.</param>
            <param name="beta">Beta value for the parameter.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionParameter.Beta">
            <summary>
            Gets the standardized beta coefficient.
            </summary>
            <remarks>
            Beta coefficients are weighted by the ratio of the standard deviation of
            the independent variable over the standard deviation of the dependent variable.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionParameter.Value">
            <summary>
            Gets the value of this parameter.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionParameter.StandardError">
            <summary>
            Gets the standard error of this parameter.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LinearRegressionParameter.ParameterIndex">
            <summary>
            Gets the index of this parameter in the linear regresssion.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.SetRegression(CenterSpace.NMath.Stats.LinearRegression,System.Int32)">
            <summary>
            Sets the regression object and the parameter index for this
            regression parameter.
            </summary>
            <param name="lr">A linear regression.</param>
            <param name="paramIndex">The index of a parameter (zero-based).</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.SetParameterValues(System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Set the linear regression paramater values.
            </summary>
            <param name="parameterIndex">Index of this parameter in the linear regresssion</param>
            <param name="parameterValue">Parameter value.</param>
            <param name="parameterVariance">Parameter variance.</param>
            <param name="modelVariance">Model variance.</param>
            <param name="degreesOfFreedom">Degrees of freedom.</param>
            <param name="beta">Beta value for the parameter.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.ConfidenceInterval(System.Double)">
            <summary>
            Returns the <c>1 - alpha</c> confidence interval for this parameter.
            </summary>
            <param name="alpha">A significance level.</param>
            <returns>The <c>1 - alpha</c> confidence interval.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.TStatistic(System.Double)">
            <summary>
            Returns the t-statistic for the null hypothesis that this parameter is equal to
            the given test value.
            </summary>
            <param name="b">A test value.</param>
            <returns>The t-statistic.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.TStatisticPValue(System.Double)">
            <summary>
            Returns the p-value for a t-test with the null hypothesis
            that this parameter is equal to the given test value versus the
            alternative hypothesis that it is not.
            </summary>
            <param name="b">A test value.</param>
            <returns>The p-value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.TStatisticCriticalValue(System.Double)">
            <summary>
            Gets the critical value of the t-statistic for the specified
            alpha level.
            </summary>
            <param name="alpha">The significance level.</param>
            <returns>The critical value for the significance level.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.Clone">
            <summary>
            Creates a deep copy of this LinearRegressionParameter.
            </summary>
            <returns>A deep copy of this LinearRegressionParameter.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LinearRegressionParameter.ToString">
            <summary>
            Returns a formatted string representation of this parameter.
            </summary>
            <returns>A formatted string representation of this parameter.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Linkage">
            <summary>
            Class Linkage provides functions for computing the distance between clusters
            of objects.
            </summary>
            <remarks>
            Instances of delegate type Linkage.Function are used by class ClusterAnalysis
            to compute the distance between clusters of objects. Delegates are provided
            as static variables for single, complete, unweighted average, weighted average,
            centroid, median, and Ward's linkage functions. 
            </remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Linkage.Function">
            <summary>
            Functor that computes the linkage (similarity) between two groups. 
            </summary>
            <remarks>
            During cluster analysis when two groups P and Q are united, a
            Linkage.Function computes the distance between the new group P + Q and
            another group R. The parameters to the Linkage.Function--which may not
            necessarily all be used to calculate the result--are the distance between
            R and P, the distance between R and Q, the distance between P and Q, and
            the sizes (n) of all three groups.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Linkage.SingleFunction">
            <summary>
            Single (nearest-neighbor) linkage function. Encapsulates <c>Linkage.SingleLinkage</c>
            as a Linkage.Function delegate.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Linkage.CompleteFunction">
            <summary>
            Complete (farthest-neighbor) linkage function. Encapsulates <c>Linkage.CompleteLinkage</c>
            as a Linkage.Function delegate.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Linkage.UnweightedAverageFunction">
            <summary>
            Unweighted average linkage function. Encapsulates <c>Linkage.UnweightedAverageLinkage</c>
            as a Linkage.Function delegate.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Linkage.WeightedAverageFunction">
            <summary>
            Weighted average linkage function. Encapsulates <c>Linkage.WeightedAverageLinkage</c>
            as a Linkage.Function delegate.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Linkage.MedianFunction">
            <summary>
            Median linkage function. Encapsulates <c>Linkage.MedianLinkage</c> as a
            Linkage.Function delegate.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Linkage.CentroidFunction">
            <summary>
            Centroid linkage function. Encapsulates <c>Linkage.CentroidLinkage</c> as a
            Linkage.Function delegate.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Linkage.WardFunction">
            <summary>
            Ward linkage function. Encapsulates <c>Linkage.WardLinkage</c> as a Linkage.Function
            delegate.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Linkage.SingleLinkage(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the distance between two clusters as the distance of the
            two closest objects (nearest neighbors) in the clusters.
            </summary>
            <remarks>
            During cluster analysis when two groups P and Q are united, a linkage function
            computes the distance between the new group P + Q and another group R.
            <br/>
            Adopting a friends-of-friends clustering strategy closely related
            to the minimal spanning tree, the single linkage method tends to
            result in long "chains" of clusters. 
            </remarks>
            <param name="Drp">The distance between R and P.</param>
            <param name="Drq">The distance between R and Q.</param>
            <param name="Dpq">The distance between P and Q.</param>
            <param name="Nr">The number of objects in R.</param>
            <param name="Np">The number of objects in P.</param>
            <param name="Nq">The number of objects in Q.</param>
            <returns>The distance between R and P + Q.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Linkage.CompleteLinkage(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the distance between two clusters as the greatest distance
            between any two objects in the different clusters (furthest neighbors). 
            </summary>
            <remarks>
            During cluster analysis when two groups P and Q are united, a linkage function
            computes the distance between the new group P + Q and another group R.
            <br/>
            The complete linkage method tends to work well in cases where objects
            form naturally distinct "clumps."  
            </remarks>
            <param name="Drp">The distance between R and P.</param>
            <param name="Drq">The distance between R and Q.</param>
            <param name="Dpq">The distance between P and Q.</param>
            <param name="Nr">The number of objects in R.</param>
            <param name="Np">The number of objects in P.</param>
            <param name="Nq">The number of objects in Q.</param>
            <returns>The distance between R and P + Q.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Linkage.UnweightedAverageLinkage(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the distance between two clusters as the average distance between
            all pairs of objects in the two different clusters. 
            </summary>
            <remarks>
            During cluster analysis when two groups P and Q are united, a linkage function
            computes the distance between the new group P + Q and another group R.
            <br/>
            This method is sometimes referred to as "unweighted pair-group method using
            arithmetic averages," and abbreviated UPGMA. 
            </remarks>
            <param name="Drp">The distance between R and P.</param>
            <param name="Drq">The distance between R and Q.</param>
            <param name="Dpq">The distance between P and Q.</param>
            <param name="Nr">The number of objects in R.</param>
            <param name="Np">The number of objects in P.</param>
            <param name="Nq">The number of objects in Q.</param>
            <returns>The distance between R and P + Q.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Linkage.WeightedAverageLinkage(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the distance between two clusters as the average distance between
            all pairs of objects in the two different clusters, using the size of each
            cluster as a weighting factor. 
            </summary>
            <remarks>
            During cluster analysis when two groups P and Q are united, a linkage function
            computes the distance between the new group P + Q and another group R.
            <br/>
            This method is sometimes referred to as "weighted pair-group method using
            arithmetic averages," and abbreviated WPGMA. 
            </remarks>
            <param name="Drp">The distance between R and P.</param>
            <param name="Drq">The distance between R and Q.</param>
            <param name="Dpq">The distance between P and Q.</param>
            <param name="Nr">The number of objects in R.</param>
            <param name="Np">The number of objects in P.</param>
            <param name="Nq">The number of objects in Q.</param>
            <returns>The distance between R and P + Q.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Linkage.CentroidLinkage(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the distance between two clusters as the difference between centroids. 
            </summary>
            <remarks>
            During cluster analysis when two groups P and Q are united, a linkage function
            computes the distance between the new group P + Q and another group R.
            <br/>
            The centroid of a cluster is the average point in the multidimensional space. 
            The centroid method is sometimes referred to as "unweighted pair-group method
            using the centroid average," and abbreviated UPGMC. 
            </remarks>
            <param name="Drp">The distance between R and P.</param>
            <param name="Drq">The distance between R and Q.</param>
            <param name="Dpq">The distance between P and Q.</param>
            <param name="Nr">The number of objects in R.</param>
            <param name="Np">The number of objects in P.</param>
            <param name="Nq">The number of objects in Q.</param>
            <returns>The distance between R and P + Q.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Linkage.MedianLinkage(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the distance between two clusters as the difference between centroids,
            using the size of each cluster as a weighting factor.  
            </summary>
            <remarks>
            During cluster analysis when two groups P and Q are united, a linkage function
            computes the distance between the new group P + Q and another group R.
            <br/>
            This is sometimes referred to as "weighted pair-group method using the centroid
            average," and abbreviated WPGMC. 
            </remarks>
            <param name="Drp">The distance between R and P.</param>
            <param name="Drq">The distance between R and Q.</param>
            <param name="Dpq">The distance between P and Q.</param>
            <param name="Nr">The number of objects in R.</param>
            <param name="Np">The number of objects in P.</param>
            <param name="Nq">The number of objects in Q.</param>
            <returns>The distance between R and P + Q.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Linkage.WardLinkage(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the distance between two clusters using Ward's method.  
            </summary>
            <remarks>
            During cluster analysis when two groups P and Q are united, a linkage
            function computes the distance between the new group P + Q and
            another group R.
            <br/>
            Ward's method uses an analysis of variance approach to evaluate
            the distances between clusters. The smaller the increase in the total
            within-group sum of squares as a result of joining two clusters, the "closer"
            they are. The within-group sum of squares of a cluster is defined as the sum
            of the squares of the distance between all objects in the cluster and the
            centroid of the cluster. Ward's method tends to produce compact groups of
            well-distributed size. 
            </remarks>
            <param name="Drp">The distance between R and P.</param>
            <param name="Drq">The distance between R and Q.</param>
            <param name="Dpq">The distance between P and Q.</param>
            <param name="Nr">The number of objects in R.</param>
            <param name="Np">The number of objects in P.</param>
            <param name="Nq">The number of objects in Q.</param>
            <returns>The distance between R and P + Q.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LogisticDistribution">
            <summary>
            Class LogisticDistribution represents the logistic probability distribution
            with a specifed location (mean) and scale.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a LogisticDistribution instance with the given location and scale.
            </summary>
            <param name="location">The location of the density.</param>
            <param name="scale">The scale of the density. Must be positive.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the scale is less 
            than or equal to zero.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticDistribution.#ctor">
            <summary>
            Default constructor. Constructs a LogisticDistribution with location <c>0</c>
            and scale <c>1</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticDistribution.Location">
            <summary>
            Gets and sets the location of the density.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticDistribution.Scale">
            <summary>
            Gets and sets the scale of the density.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the scale is less 
            than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <remarks>
            Because the logistic distribution is symmetric, the mean is the same as the location.
            To set the mean, see the <c>Location</c> property.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this density. 
            </summary>
            <remarks>The skewness of the logistic distribution is <c>0</c>.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            density.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated at the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If <c>p</c> is greater than 1 or less than zero, <c>Double.NaN</c>
            (Not-a-Number) is returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticDistribution.Clone">
            <summary>
            Creates a deep copy of this PoissonDistribution.
            </summary>
            <returns>A deep copy of this PoissonDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LognormalDistribution">
            <summary>
            Class LognormalDistribution represents the lognormal probability distribution.
            </summary>
            <remarks>
            The lognormal distribution is the distribution of a random variable
            whose logarithm is normally distributed. If Y is a random variable with a
            normal distribution, then the random variable X = exp(Y) has a lognormal
            distribution. Likewise if the random variable X has a lognormal distribution
            then the random variable Y = log(X) is normally distributed.
            NOTE: When specifying the paramters that describe an instance of LognormalDistribution
            we do so by specifying the mean and standard deviation of its logarithm which, by
            definition, is normally distributed.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LognormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Creates a LognormalDistribution instance whose associated normal 
            distrubution has the specified mean and standard deviation. That
            is, the logarithm of the distribution will have the specified 
            mean and standard deviation.
            </summary>
            <param name="mu">Mean of the logarithm of self.</param>
            <param name="sigma">Standard deviation of the logarithm of self.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if sigma is 
            negative.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LognormalDistribution.#ctor">
            <summary>
            Default constructor. Constructs a LognormalDistribution distribution whose 
            logarithm have mean 0 and standard deviation 1.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LognormalDistribution.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a LognormalDistribution instance from serialization information.
            </summary>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LognormalDistribution.Mu">
            <summary>
            Gets and sets the mean of the logarithm of self which, by definition, 
            is normally distributed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LognormalDistribution.Sigma">
            <summary>
            Gets and sets the standard deviation of the logarithm of self which, by definition, 
            is normally distributed.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if setting sigma to a 
            negative value</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LognormalDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LognormalDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LognormalDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
            <remarks>
            The skewness is the third central moment divided by the cube of 
            the standard deviation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LognormalDistribution.Variance">
            b <summary>
             Gets the variance of the distribution.
             <remarks>The variance of the distribution is the standard deviation squared.
             </remarks>
             </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LognormalDistribution.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the mean and standard deviation of the logarithm of self (which
            is normally distributed) to the specified values.
            </summary>
            <param name="mu">The mean of the logarithm of self.</param>
            <param name="sigma">The standard deviation of the logarithm of
            self.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if sigm is negative.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LognormalDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this lognormal density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LognormalDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated a the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If the input probability, p, is less than 0 or greater than 1 the 
            NaN value is returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LognormalDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis greater than or equal to 0.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the input value x is negative.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LognormalDistribution.Clone">
            <summary>
            Creates a deep copy of this LognormalDistribution.
            </summary>
            <returns>A deep copy of this LognormalDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LognormalDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NegativeBinomialDistribution">
            <summary>
            Class NegativeBinomialDistribution represents the discrete probability distribution 
            of obtaining <c>N</c> successes in a series of <c>x</c> trials, where the probability of
            success on each trial is <c>P</c>.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NegativeBinomialDistribution.#ctor">
            <summary>
            Default constructor. Constructs a NegativeBinomialDistribution instance
            with 2 successes, and a 0.5 probability of success.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NegativeBinomialDistribution.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a NegativeBinomialDistribution instance with the given number of
            sucesses and the given probability of success on each trial.
            </summary>
            <param name="n">The number of sucesses.</param>
            <param name="p">The probability of success on each trial.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the number of sucesses is &lt;0, or the probability of success
            is &lt;0.0 or &gt;1.0.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NegativeBinomialDistribution.N">
            <summary>
            Gets and sets number of successes.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if set to a negative value.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NegativeBinomialDistribution.P">
            <summary>
            Gets and sets the probability of success on each trial.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if set to a value less than 0, or greater than 1.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NegativeBinomialDistribution.Mean">
            <summary>
            Gets the mean of this distribution.
            </summary>
            <remarks>
            The mean of the negative binomial distribution with parameters <c>N</c> and <c>P</c>
            is <c>N(1-P)/P</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NegativeBinomialDistribution.Variance">
            <summary>
            Gets the variance of this distribution.
            </summary>
            The variance of the negative binomial distribution with parameters <c>N</c> and <c>P</c>
            is <c>N(1-P)/P^2</c>.
        </member>
        <member name="P:CenterSpace.NMath.Stats.NegativeBinomialDistribution.Skewness">
            <summary>
            Gets the skewness coefficient, a measure of the degree of asymmetry of 
            this distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NegativeBinomialDistribution.Kurtosis">
            <summary>
            Gets the kurtosis coefficient, a measure of the degree of peakedness of
            this distribution.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NegativeBinomialDistribution.PDF(System.Double)">
            <summary>
            Returns the probability distribution function evaluated at the given value.
            </summary>
            <param name="x">The number of trials</param>
            <returns>
            The probability of obtaining <c>this.N</c> successes in <c>x</c> trials,
            where <c>this.P</c> is the probability of success on each trial.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the number of trials is set to a negative value.
            </exception>
            <remarks>
            Returns zero for <c>x &lt; N</c>. It's impossible to have more successes than
            trials.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NegativeBinomialDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative distribution function evaluated at the given value.
            </summary>
            <param name="x">The number of trials.</param>
            <returns>
            The probability of obtaining <c>this.N</c> successes in <c>x</c> or fewer
            trials.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the number of trials is set to a negative value.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NegativeBinomialDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative distribution function evaluated at the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>
            The <c>x</c> for the cumulative distribution function corresponding to the given
            probability.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given probability is &lt;0.0 or &gt;1.0.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NegativeBinomialDistribution.Clone">
            <summary>
            Creates a deep copy of this NegativeBinomialDistribution.
            </summary>
            <returns>A deep copy of this NegativeBinomialDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NegativeBinomialDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NormalDistribution">
            <summary>
            Class NormalDistribution represents the normal (Gaussian) probability distribution
            with a specifed mean and variance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a NormalDistribution instance with the given mean and variance.
            </summary>
            <param name="mean">The mean of the density.</param>
            <param name="var">The variance of the density. Must be positive.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the variance is less 
            than or equal to zero.</exception>
            <remarks>The variance of the distribution is the standard deviation squared.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NormalDistribution.#ctor">
            <summary>
            Default constructor. Constructs a NormalDistribution with mean <c>0</c>
            and variance <c>1</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NormalDistribution.Mean">
            <summary>
            Gets and sets the mean of the density.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NormalDistribution.Variance">
            <summary>
            Gets and sets the variance of the density.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the variance is less 
            than or equal to zero.</exception>
            <remarks>The variance of the density is the standard deviation squared.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NormalDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this density. 
            </summary>
            <remarks>
            The skewness is the third central moment divided by the cube of 
            the standard deviation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NormalDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            density.
            </summary>
            <remarks>
            The kurtosis is the fourth centeral moment divided by the
            fouth power of the standard deviation, normalized so that
            the kurtosis if the normal density is zero. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NormalDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NormalDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this normal density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NormalDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated at the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If <c>p</c> is greater than 1 or less than zero, <c>Double.NaN</c>
            (Not-a-Number) is returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NormalDistribution.Clone">
            <summary>
            Creates a deep copy of this PoissonDistribution.
            </summary>
            <returns>A deep copy of this PoissonDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NormalDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OneSampleKSTest">
            <summary>
            Class OneSampleKSTest performs a Kolmogorov-Smirnov test of the distribution of
            one sample.
            </summary>
            <remarks>
            Class OneSampleKSTest compares the distribution of a given sample to the
            hypothesized distribution defined by a specified cumulative distribution function
            (CDF). For each potential value <c>x</c>, the Kolmogorov-Smirnov test compares the
            proportion of values less than <c>x</c> with the expected number predicted by
            the specified CDF. The null hypothesis is that the given sample data follow the
            specified distribution. The alternative hypothesis that the data do not have
            that distribution.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor">
            <summary>
            Default constructor. Constructs an empty OneSampleKSTest instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Double})">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            cumulative distribution function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.ProbabilityDistribution)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>.
            </remarks>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after missing values are 
            ignored.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(System.Int32[],System.Func{System.Double,System.Double})">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            cumulative distribution function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType. 
            </remarks>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(System.Int32[],CenterSpace.NMath.Stats.ProbabilityDistribution)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>.
            </remarks>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType. 
            </remarks>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(System.Double[],System.Func{System.Double,System.Double})">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            cumulative distribution function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(System.Double[],CenterSpace.NMath.Stats.ProbabilityDistribution)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>.
            </remarks>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Double})">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            cumulative distribution function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero, after 
            missing values are ignored.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.ProbabilityDistribution)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>.
            </remarks>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero, after 
            missing values are ignored.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            cumulative distribution function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.ProbabilityDistribution,System.Double)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(System.Int32[],System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            cumulative distribution function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(System.Int32[],CenterSpace.NMath.Stats.ProbabilityDistribution,System.Double)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(System.Double[],System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            cumulative distribution function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(System.Double[],CenterSpace.NMath.Stats.ProbabilityDistribution,System.Double)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            cumulative distribution function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero, after 
            missing values are ignored.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.ProbabilityDistribution,System.Double)">
            <summary>
            Constructs a OneSampleKSTest from the given sample data and specified
            distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>.  Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero, after 
            missing values are ignored.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleKSTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleKSTest.CriticalValue">
            <summary>
            Gets the critical value based on the current alpha level associated
            with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleKSTest.N">
            <summary>
            Gets the sample size.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleKSTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleKSTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected, using the current 
            alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleKSTest.Statistic">
            <summary>
            Gets the value of the test statistic associated with this hypothesis
            test.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.Update(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Double})">
            <summary>
            Updates this test with new sample data and a new cumulative distribution
            function (CDF). 
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.Update(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.ProbabilityDistribution)">
            <summary>
            Updates this test with new sample data and a new distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.Update(System.Int32[],System.Func{System.Double,System.Double})">
            <summary>
            Updates this test with new sample data and a new cumulative distribution
            function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.Update(System.Int32[],CenterSpace.NMath.Stats.ProbabilityDistribution)">
            <summary>
            Updates this test with new sample data and a new distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.Update(System.Double[],System.Func{System.Double,System.Double})">
            <summary>
            Updates this test with new sample data and a new cumulative distribution
            function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after missing values are 
            ignored.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.Update(System.Double[],CenterSpace.NMath.Stats.ProbabilityDistribution)">
            <summary>
            Updates this test with new sample data and a new distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero, after missing values are 
            ignored.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.Update(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Double})">
            <summary>
            Updates this test with new sample data and a new cumulative distribution
            function (CDF).
            </summary>
            <param name="data">The sample data.</param>
            <param name="cdf">A functor that takes a double-precision floating point
            number and returns a double-precision floating point number that 
            encapsulates the hypothesized cumulative distribution function (CDF).</param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero, after 
            missing values are ignored.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.Update(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.ProbabilityDistribution)">
            <summary>
            Updates this test with new sample data and a new distribution.
            </summary>
            <param name="data">The sample data.</param>
            <param name="dist">The hypothesized distribution.</param>
            <remarks>
            The distribution of <c>data</c> is compared to the hypothesized
            distribution defined by <c>dist.CDF</c>. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero, after 
            missing values are ignored.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleKSTest.Clone">
            <summary>
            Creates a deep copy of this OneSampleKSTest.
            </summary>
            <returns>A deep copy of this OneSampleKSTest.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleKSTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with OneSampleKSTests.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OneSampleTTest">
            <summary>
            Class OneSampleTTest compares a single sample mean to an expected mean
            from a normal distribution with an unknown standard deviation.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor">
            <summary>
            Default constructor. Constructs a OneSampleTTest instance with default
            sample parameters, population mean, alpha level, and hypothesis type.
            </summary>
            <remarks>
            Constructs a OneSampleTTest instance with a sample mean of 0.0, sample
            standard deviation of 1.0, sample size of 2, and population mean of 0.0.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Constructs a OneSampleTTest instance with the given sample and population parameters.
            </summary>
            <param name="xbar">The sample mean.</param>
            <param name="s">The sample standard deviation.</param>
            <param name="n">The sample size.</param>
            <param name="mu0">The population mean.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleTTest instance with the given sample, population,
            and hypothesis parameters.
            </summary>
            <param name="xbar">The sample mean.</param>
            <param name="s">The sample standard deviation.</param>
            <param name="n">The sample size.</param>
            <param name="mu0">The population mean.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Constructs a OneSampleTTest instance using the given vector of sample data, and
            the given population mean.
            </summary>
            <param name="data">A vector of observed values.</param>
            <param name="mu0">The population mean.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed from
            the given vector. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleTTest instance using the given vector of sample data, and
            the given population and hypothesis parameters.
            </summary>
            <param name="data">A vector of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed from
            the given vector. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(System.Double[],System.Double)">
            <summary>
            Constructs a OneSampleTTest instance using the given array of sample data, and
            the given population mean.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed from
            the given array. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(System.Double[],System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleTTest instance using the given array of sample data, and
            the given population and hypothesis parameters.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed from
            the given array. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(System.Int32[],System.Double)">
            <summary>
            Constructs a OneSampleTTest instance using the given array of sample data, and
            the given population mean.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed from
            the given array.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(System.Int32[],System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleTTest instance using the given array of sample data, and
            the given population and hypothesis parameters.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed from
            the given array.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,System.Double)">
            <summary>
            Constructs a OneSampleTTest instance using the given column of sample data, and
            the given population mean.
            </summary>
            <param name="data">A column of observed values.</param>
            <param name="mu0">The population mean.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed from
            the given column. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero after removing missing
            values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleTTest instance using the given vector of sample data, and
            the given population and hypothesis parameters.
            </summary>
            <param name="data">A vector of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed from
            the given vector. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero after removing missing
            values.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.Distribution">
            <summary>
            Gets the distribution of the test statistic associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.Type">
            <summary>
            Gets and sets the form of the alternative hypothesis associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.Xbar">
            <summary>
            Gets the sample mean.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.S">
            <summary>
            Gets the sample standard deviation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.N">
            <summary>
            Gets the sample size.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.Mu0">
            <summary>
            Gets the population mean.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.Statistic">
            <summary>
            Gets the value of the test statistic associated with this hypothesis
            test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.SEM">
            <summary>
            Gets the standard error of the mean.
            </summary>
            <remarks><code>
            SEM = sigma / sqrt( n )
            </code></remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.LeftCriticalValue">
            <summary>
            Gets the left critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.RightCriticalValue">
            <summary>
            Gets the right critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.LowerConfidenceLimit">
            <summary>
            Gets the 1 - alpha lower confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.NegativeInfinity</c> for one-sided tests to the left.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.UpperConfidenceLimit">
            <summary>
            Gets the 1 - alpha upper confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.PositiveInfinity</c> for one-sided tests to the right.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.LeftProbability">
            <summary>
            Gets the area under the probability distribution to the left of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.RightProbability">
            <summary>
            Gets the area under the probability distribution to the right of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
            <remarks>
            Returns LeftProbability for one-sided tests to the left, 
            RightProbability for one-sided tests to the right, and twice
            the smaller of LeftProbability and RightProbability for two-sided
            tests.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected, using the current 
            hypothesis type and alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with OneSampleTTests.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleTTest.DefaultType">
            <summary>
            Gets and sets the default form of the alternative hypothesis associated with
            OneSampleTTests.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(System.Double,System.Double,System.Int32)">
            <summary>
            Updates the test statistic with new sample parameters.
            </summary>
            <param name="xbar">The sample mean.</param>
            <param name="s">The sample standard deviation.</param>
            <param name="n">The sample size.</param>
            <remarks>
            The population mean is not changed.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(System.Double)">
            <summary>
            Updates the test statistic with a new population mean.
            </summary>
            <param name="mu0">The population mean.</param>
            <remarks>
            Sample parameters are not changed.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Updates the test statistic with new sample and population parameters.
            </summary>
            <param name="xbar">The sample mean.</param>
            <param name="s">The sample standard deviation.</param>
            <param name="n">The sample size.</param>
            <param name="mu0">The population mean.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(System.Double[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">An array of observed values.</param>
            <remarks>
            The new sample mean, sample standard deviation, and sample size
            are computed from the given data array. Missing values are ignored.
            The population mean is not changed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(System.Double[],System.Double)">
            <summary>
            Updates the test statistic with new sample data and population 
            mean.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed
            from the given data array. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(System.Int32[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">An array of observed values.</param>
            <remarks>
            The new sample mean, sample standard deviation, and sample size
            are computed from the given data array. The population mean is 
            not changed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(System.Int32[],System.Double)">
            <summary>
            Updates the test statistic with new sample data and population 
            mean.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed
            from the given data array. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">A vector of observed values.</param>
            <remarks>
            The new sample mean, sample standard deviation, and sample size
            are computed from the given data vector. Missing values are ignored.
            The population mean is not changed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Updates the test statistic with new sample data and population 
            mean.
            </summary>
            <param name="data">A vector of observed values.</param>
            <param name="mu0">The population mean.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed
            from the given data vector. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">A column of observed values.</param>
            <remarks>
            The new sample mean, sample standard deviation, and sample size
            are computed from the given data column. Missing values are ignored.
            The population mean is not changed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero after removing
            missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Update(CenterSpace.NMath.Stats.IDFColumn,System.Double)">
            <summary>
            Updates the test statistic with new sample data and population 
            mean.
            </summary>
            <param name="data">A column of observed values.</param>
            <param name="mu0">The population mean.</param>
            <remarks>
            The sample mean, sample standard deviation, and sample size are computed
            from the given data column. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero after removing
            missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.Clone">
            <summary>
            Creates a deep copy of this OneSampleTTest.
            </summary>
            <returns>A deep copy of this OneSampleTTest.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleTTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OneSampleZTest">
            <summary>
            Class OneSampleZTest compares a single sample mean to an expected mean
            from a normal distribution with known standard deviation.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor">
            <summary>
            Default constructor. Constructs a OneSampleZTest instance with default
            sample, population, and hypothesis parameters.
            </summary>
            <remarks>
            Constructs a OneSampleZTest instance with a sample mean of 0.0, sample size
            of 1, population mean of 0.0, and population standard deviation of 1.0.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Constructs a OneSampleZTest instance with the given sample and population parameters.
            </summary>
            <param name="xbar">The sample mean.</param>
            <param name="n">The sample size.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(System.Double,System.Int32,System.Double,System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleZTest instance with the given sample, population,
            and hypothesis parameters.
            </summary>
            <param name="xbar">The sample mean.</param>
            <param name="n">The sample size.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double)">
            <summary>
            Constructs a OneSampleZTest instance using the given vector of sample data, and
            the given population parameters.
            </summary>
            <param name="data">A vector of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            The sample mean and sample size are computed from the given vector.
            Missing values are ignored.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleZTest instance using the given vector of sample data, and
            the given population and hypothesis parameters.
            </summary>
            <param name="data">A vector of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample mean and sample size are computed from the given vector.
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(System.Double[],System.Double,System.Double)">
            <summary>
            Constructs a OneSampleZTest instance using the given array of sample data, and
            the given population parameters.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            The sample mean and sample size are computed from the given array.
            Missing values are ignored.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(System.Double[],System.Double,System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleZTest instance using the given array of sample data, and
            the given population and hypothesis parameters.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample mean and sample size are computed from the given vector.
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(System.Int32[],System.Double,System.Double)">
            <summary>
            Constructs a OneSampleZTest instance using the given array of sample data, and
            the given population parameters.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            The sample mean and sample size are computed from the given array.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(System.Int32[],System.Double,System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleZTest instance using the given array of sample data, and
            the given population and hypothesis parameters.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample mean and sample size are computed from the given vector.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,System.Double,System.Double)">
            <summary>
            Constructs a OneSampleZTest instance using the given column of sample data, and
            the given population parameters.
            </summary>
            <param name="data">A column of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            The sample mean and sample size are computed from the given column.
            Missing values are ignored.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> does not contain numeric data, or has length of
            zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,System.Double,System.Double,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a OneSampleZTest instance using the given column of sample data, and
            the given population and hypothesis parameters.
            </summary>
            <param name="data">A column of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample mean and sample size are computed from the given column.
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> does not contain numeric data, or has length of
            zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Compute values following deserialization
            </summary>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.Distribution">
            <summary>
            Gets the distribution of the test statistic associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.Type">
            <summary>
            Gets and sets the form of the alternative hypothesis associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.Xbar">
            <summary>
            Gets the sample mean.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.N">
            <summary>
            Gets the sample size.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.Mu0">
            <summary>
            Gets the population mean.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.Sigma">
            <summary>
            Gets the population standard deviation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.Statistic">
            <summary>
            Gets the value of the test statistic associated with this hypothesis
            test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.SEM">
            <summary>
            Gets the standard error of the mean.
            </summary>
            <remarks><code>
            SEM = sigma / sqrt( n )
            </code></remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.LeftCriticalValue">
            <summary>
            Gets the one-sided to the left critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.RightCriticalValue">
            <summary>
            Gets the one-sided to the right critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.LowerConfidenceLimit">
            <summary>
            Gets the 1 - alpha lower confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.NegativeInfinity</c> for one-sided tests to the left.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.UpperConfidenceLimit">
            <summary>
            Gets the 1 - alpha upper confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.PositiveInfinity</c> for one-sided tests to the right.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.LeftProbability">
            <summary>
            Gets the area under the probability distribution to the left of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.RightProbability">
            <summary>
            Gets the area under the probability distribution to the right of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
            <remarks>
            Returns LeftProbability for one-sided tests to the left, 
            RightProbability for one-sided tests to the right, and twice
            the smaller of LeftProbability and RightProbability for two-sided
            tests.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected, using the current 
            hypothesis type and alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with OneSampleZTests.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneSampleZTest.DefaultType">
            <summary>
            Gets and sets the default form of the alternative hypothesis associated with
            OneSampleZTests.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(System.Double,System.Int32)">
            <summary>
            Updates the test statistic with new sample parameters.
            </summary>
            <param name="xbar">The sample mean.</param>
            <param name="n">The sample size.</param>
            <remarks>
            Population parameters are not changed.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">A vector of observed values.</param>
            <remarks>
            The new sample mean and sample size are computed from the given data vector.
            Missing values are ignored.
            Population parameters are not changed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(System.Double[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">An array of observed values.</param>
            <remarks>
            The new sample mean and sample size are computed from the given array.
            Missing values are ignored.
            Population parameters are not changed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(System.Int32[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">An array of observed values.</param>
            <remarks>
            The new sample mean and sample size are computed from the given array.
            Population parameters are not changed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data">A column of observed values.</param>
            <remarks>
            The new sample mean and sample size are computed from the given data column.
            Missing values are ignored.
            Population parameters are not changed.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> does not contain numeric data, or has length of
            zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(System.Double,System.Double)">
            <summary>
            Updates the test statistic with new population parameters.
            </summary>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            Sample parameters are not changed.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Updates the test statistic with new sample and population parameters.
            </summary>
            <param name="xbar">The sample mean.</param>
            <param name="n">The sample size.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double)">
            <summary>
            Updates the test statistic with new sample data and population 
            parameters.
            </summary>
            <param name="data">A vector of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            The sample mean and sample size are computed from the given data vector.
            Missing values are ignored.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(System.Double[],System.Double,System.Double)">
            <summary>
            Updates the test statistic with new sample data and population 
            parameters.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            The sample mean and sample size are computed from the given data array.
            Missing values are ignored.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(System.Int32[],System.Double,System.Double)">
            <summary>
            Updates the test statistic with new sample data and population 
            parameters.
            </summary>
            <param name="data">An array of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            The sample mean and sample size are computed from the given data array.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Update(CenterSpace.NMath.Stats.IDFColumn,System.Double,System.Double)">
            <summary>
            Updates the test statistic with new sample data and population 
            parameters.
            </summary>
            <param name="data">A column of observed values.</param>
            <param name="mu0">The population mean.</param>
            <param name="sigma">The population standard deviation.</param>
            <remarks>
            The sample mean and sample size are computed from the given data column.
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.Clone">
            <summary>
            Creates a deep copy of this OneSampleZTest.
            </summary>
            <returns>A deep copy of this OneSampleZTest.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneSampleZTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LogisticRegression`1">
             <summary>
             Class for performing a binomial logistic regression. 
             </summary>
             <typeparam name="ParameterCalc">Class for model parameter calculation.</typeparam>
             <remarks>Logistic regression is used to model the relationship between a binary 
             response variable and one or more predictor variables, which may be either discrete
             or continuous. Binary outcome data is common in medical applications. For example,
             the binary response variable might be whether or not a patient is alive five years
             after treatment for cancer or whether the patient has an adverse reaction to a new 
             drug. As in multiple regression, we are interested in finding an appropriate 
             combination of predictor variables to help explain the binary outcome.
             Let Y be a dichotomous random variable denoting the outcome of some experiment, 
             and let X = (x1, x2, ... , xp – 1) be a collection of predictor variables.
             Denote the conditional probability that the outcome is present
             by P(Y = 1|x) = π(x), where π(x) has the form:
             exp(B0 + B1*x1 + B2*x2 + ... + Bp-1*xp-1) / (1 + exp(B0 + B1*x1 + B2*x2 + ... + Bp-1*xp-1))
             If the xj are varied and the n values Y1,Y2, ... , Yn of Y are observed, we write:
              πi = exp(B0 + B1*xi1 + B2*xi2 + ... + Bp-1*xip-1) / (1 + exp(B0 + B1*xi1 + B2*xi2 + ... + Bp-1*xip-1))
             The logistic regression problem is then to obtain an estimate of the vector:
             B = (B0, B1,..., Bp-1)
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.#ctor">
            <summary>
            Default constructor. Constructs a LogisticRegression instance with
            all sizes equal to zero.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Collections.Generic.IList{System.Boolean},System.Boolean,`0)">
            <summary>
            Constructs a LogisticRegression instance with the specifed regresssion matrix
            and observation vector, optionally adding an intercept parameter. The
            model parameter values are computed using the specified regression calculator.
            </summary>
            <param name="A">A regression matrix.</param>
            <param name="obs">A vector of observations.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression matrix <c>A</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression matrix is used as given.</param>
            <param name="parameterCalculator">A regression calculation object. Must
            implement the IRegressionCalculation interface.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Collections.Generic.IList{System.Boolean},System.Boolean)">
            <summary>
            Constructs a LogisticRegression instance with the specifed regresssion matrix
            and observation vector, optionally adding an intercept parameter. The
            model parameter values are computed using the specified regression calculator.
            </summary>
            <param name="A">A regression matrix.</param>
            <param name="obs">A vector of observations.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression matrix <c>A</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression matrix is used as given.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Predicate{System.Double},System.Boolean,`0)">
            <summary>
            Constructs a LogisticRegression instance with the specifed regresssion matrix
            and observation vector, optionally adding an intercept parameter. The vector
            of floating point observations is converted to a vector of booleans by applying
            the give predicate function.
            </summary>
            <param name="A">A regression matrix, a row for each set of predictor variable
            values.</param>
            <param name="obs">A vector of observations as floating point values. This
            vector is converted to dichotomous values using the supplied predicate
            function.</param>
            <param name="obsPred">Rule for converting the floating point values in the
            vector of observations to dichotomous value.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression matrix <c>A</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression matrix is used as given.</param>
            <param name="parameterCalculator">Parameter calculation object to use.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Predicate{System.Double},System.Boolean)">
            <summary>
            Constructs a LogisticRegression instance with the specifed regresssion matrix
            and observation vector, optionally adding an intercept parameter. The vector
            of floating point observations is converted to a vector of booleans by applying
            the give predicate function.
            </summary>
            <param name="A">A regression matrix, a row for each set of predictor variable
            values.</param>
            <param name="obs">A vector of observations as floating point values. This
            vector is converted to dichotomous values using the supplied predicate
            function.</param>
            <param name="obsPred">Rule for converting the floating point values in the
            vector of observations to dichotomous value.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression matrix <c>A</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression matrix is used as given.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows
            in the regression matrix is not equal to the length of the observation 
            vector.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Int32,System.Predicate{System.Double},System.Boolean,`0)">
            <summary>
            Constructs a LogisticRegression instance optionally adding an intercept
            parameter. The provided matrix of values contains the observation values 
            as one of its columns. The rest of the columns of the matrix forms the
            regression matrix. The floating point observation value in the matrix are
            converted to a vector of dichotomous values by applying the give predicate 
            function.
            </summary>
            <param name="A">A regression matrix with a column of observations values.</param>
            <param name="observationColIndex">Zero based index of the column in the 
            input matrix <c>A</c> which contains the observation values.</param>
            <param name="obsPredicate">Rule for converting the floating point values in the
            vector of observations to dichotomous value.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression matrix <c>A</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression matrix is used as given.</param>
            <param name="parameterCalculator">Parameter calculation object to use.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Int32,System.Predicate{System.Double},System.Boolean)">
            <summary>
            Constructs a LogisticRegression instance optionally adding an intercept
            parameter. The provided matrix of values contains the observation values 
            as one of its columns. The rest of the columns of the matrix forms the
            regression matrix. The floating point observation value in the matrix are
            converted to a vector of dichotomous values by applying the give predicate 
            function.
            </summary>
            <param name="A">A regression matrix with a column of observations values.</param>
            <param name="observationColIndex">Zero based index of the column in the 
            input matrix <c>A</c> which contains the observation values.</param>
            <param name="obsPredicate">Rule for converting the floating point values in the
            vector of observations to dichotomous value.</param>
            <param name="addIntercept">If <c>true</c>, a column of ones is prepended onto
            the data in the regression matrix <c>A</c>, thus adding an intercept to 
            the model. If <c>false</c>, the data in the regression matrix is used as given.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.#ctor(CenterSpace.NMath.Stats.LogisticRegression{`0})">
            <summary>
            Constructor for copying another logistic regression. Useful for cloneing.
            </summary>
            <param name="other">Another logistic regression object.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegression`1.ParameterEstimates">
            <summary>
            Gets the array of parameter estimate objects.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegression`1.ParameterCovarianceMatrix">
            <summary>
            Gets the covariance matrix for the parameters. The entry at column i,
            row j is the covariance between the ith and jth parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegression`1.ParameterCalculator">
            <summary>
            Gets the parameter calculation object.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.RecalculateParameters">
            <summary>
            Recalculates the model parameters.
            </summary>
            <remarks>
            The <c>IsGood</c> property should be checked after calling this method
            to determine if the calculation was successful.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.SetRegressionData(CenterSpace.NMath.Core.DoubleMatrix,System.Collections.Generic.IList{System.Boolean},System.Boolean)">
            <summary>
            Sets the regression matrix, observation vector, and intercept option to the
            specified values, and recalculates the model parameters.
            </summary>
            <param name="A">A regression matrix.</param>
            <param name="obs">A vector of observations.</param>
            <param name="addIntercept">Intercept option. Set to <c>true</c> if you want
            the model to contain an intercept parameter that is not accounted for in the
            input regression matrix (in the form of a leading column of ones).</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows in the
            regression matrix is not equal to the length of the observation vector.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.PredictedProbabilities(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Returns a vector of predicted probabilities of a positive outcome for the
            predictor variable values contained in the rows of the input matrix <c>A</c>.
            </summary>
            <param name="A">A matrix of predictor values. Each row of <c>A</c> is a set
            of predictor values.</param>
            <returns>A vector of predicted probabilities of a positive outcome. The <i>i</i>th element of the
            vector is the predicted probability for the set of predictor values in the <i>i</i>th
            row of the input matrix <c>A</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number
            of columns in the given matrix is not equal to the number of parameters
            in the model.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.ObservationVarianceEstimates">
            <summary>
            Computes the variance estimate for each observation. if pi is the probability
            of success predicted by the model for the ith observation, then the 
            estimated variance for the ith observation is pi*(1.0 - pi).
            </summary>
            <returns>A vector whose ith entry is the variance estimate of the ith
            observation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.PredictedProbability(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns the probability of a positve outcome predicted by the model for the given 
            set of predictor values.
            </summary>
            <param name="x">A set of predictor values.</param>
            <returns>The probability of a positive outcome predicted by the model.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length
            of the given vector is not equal to the number of parameters
            in the model.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.Clone">
            <summary>
            Creates a deep copy of this LogisticRegression.
            </summary>
            <returns>A deep copy of this LogisticRegression.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.PredictedProbabilities(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Returns a vector of predicted probabilities of a positive outcome for the
            predictor variable values contained in the rows of the input matrix <c>A</c>.
            </summary>
            <param name="A">A matrix of predictor values. Each row of <c>A</c> is a set
            of predictor values.</param>
            <param name="parameters">Vector of paramter values for the model.</param>
            <param name="hasIntercept">If <c>true</c> the model contains an intercept parameter
            (the default). In this case the length of the vector <c>x</c> must be one less
            than the length of the <c>parameters</c> vector. If <c>false</c> the length
            of <c>x</c> must be equal to the length of the <c>parameters</c> vector.</param>
            <returns>A vector of predicted probabilities of a positive outcome. The <i>i</i>th element of the
            vector is the predicted probability for the set of predictor values in the <i>i</i>th
            row of the input matrix <c>A</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number
            of columns in the given matrix is not equal to the number of parameters
            in the model.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.PredictedProbability(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Returns the probability of a positve outcome predicted by the model for the given 
            set of predictor values.
            </summary>
            <param name="x">A set of predictor values.</param>
            <param name="parameters">The model parameters.</param>
            <param name="hasIntercept">If <c>true</c> the model contains an intercept parameter
            (the default). In this case the length of the vector <c>x</c> must be one less
            than the length of the <c>parameters</c> vector. If <c>false</c> the length
            of <c>x</c> must be equal to the length of the <c>parameters</c> vector.</param>
            <returns>The probability of a positive outcome predicted by the model.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length
            of the given vector is not equal to the number of parameters
            in the model.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.LogLikelihood(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the value of the log likelihood function for a binomial logistic
            regression model with the given predictor variable values, probabilities
            and observed dichotomous outcomes.
            </summary>
            <param name="X">Matrix of predictor variables. Each row represents a 
            subject.</param>
            <param name="p">Probability of success for each subject. ith element 
            corresponds to the ith row of the matrix <c>X</c>.</param>
            <param name="y">Observed vector of dichotomous outcomes. The values in 
            <c>y</c> must be 1.0 for a postive outcome and 0.0 for a negative outcome.</param>
            <returns>The value of the log likelihood function.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.DesignVariables(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Convenience method for generating design, or dummy, variables which 
            replace independent variables in a logistic model that take on discrete,
            nominal scaled values. The encoding method used is "reference cell coding". 
            where the group with the SMALLEST code serves as the reference group. The
            method is described in the remark below. 
            </summary>
            <param name="catagoricalDataCol">A column containaing the nominally scaled
            variable values.</param>
            <returns><c>DataFrame</c> containing the design variables encoded using "reference
            cell encoding". The group with the SMALLEST code serves as the reference
            group. If the input column name is X, and the variable X has k possible values,
            the output <c>DataFrame</c> will contain k - 1 columns with names:
            X_0, X_1,...,X_(k-1)
            </returns>
            <remarks> If a nominal scaled variable has k possible values, then k - 1 design variables
            will be created, each with a value of zero or one. The design variable values
            are encoded by setting all design variables to zero for the reference group, and then
            setting a single design variable equal to one for each of the other groups.
            The design variables replace the nominally scaled variable in the model.
            Suppose that the jth independent variable, xj has k levels. Denote by Dju, 
            the design variables and denote the coefficients for these design variables by
            Bju, u = 1, 2,...,k-1. Then the logit for the model with p variables and the 
            jth variable being discrete would be
            
            g(x) = B0 + B1*x1 +...+ (Bj1*Dj1 + Bj2*Dj2 +...+Bj(k-1)*Dj(k-1) +...+ Bp*xp
            
            For example, suppose that Race is an independent variable in a model with
            three possible values: white, black and other. Suppose further that these values
            have been encoded in the data as white = 1, black = 2, and other = 3. The input
            to the <c>DesignVariables</c> function would be a data frame column with name = Race
            and the numerical values for each subject.
            This function would then generate a data frame containing 3 - 1 = 2 columns for
            the two design variables with names Race_0 and Race_1.
            
            Sample input/output -
            
            Input Column:
            Race
            ----
            1
            1
            2
            1
            1
            3
            3
            2
            1
            
            
            Output DataFrame:
            Race_0  Race_1
            ------  ------
            0       0
            0       0
            1       0
            0       0
            0       0
            0       1
            0       1
            1       0
            0       0
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegression`1.DesignVariables(CenterSpace.NMath.Stats.IDFColumn,System.IComparable)">
            <summary>
            Convenience method for generating design, or dummy, variables which 
            replace independent variables in a logistic model that take on discrete,
            nominal scaled values. The encoding method used is "reference cell coding" 
            with the group with the speficied code serves as the reference group. The
            method is described in the remark below. 
            </summary>
            <param name="catagoricalDataCol">A column containaing the nominally scaled
            variable values.</param>
            <param name="referenceCode">The group with this level will be the reference
            group. Must have the same type as the elements of <c>catagoricalDataCol</c></param>
            <returns><c>DataFrame</c> containing the design variables encoded using "reference
            cell encoding". The group with the specified code serves as the reference
            group. If the input column name is X, and the variable X has k possible values,
            the output <c>DataFrame</c> will contain k - 1 columns with names:
            X_0, X_1,...,X_(k-1)
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the <c>referenceCode</c>
            paramter does not have the same type as the type of the elements of the
            the categorical column.</exception>
            <remarks> If a nominal scaled variable has k possible values, then k - 1 design variables
            will be created, each with a value of zero or one. The design variable values
            are encoded by setting all design variables to zero for the reference group, and then
            setting a single design variable equal to one for each of the other groups.
            The design variables replace the nominally scaled variable in the model.
            Suppose that the jth independent variable, xj has k levels. Denote by Dju, 
            the design variables and denote the coefficients for these design variables by
            Bju, u = 1, 2,...,k-1. Then the logit for the model with p variables and the 
            jth variable being discrete would be
            
            g(x) = B0 + B1*x1 +...+ (Bj1*Dj1 + Bj2*Dj2 +...+Bj(k-1)*Dj(k-1) +...+ Bp*xp
            
            For example, suppose that Race is an independent variable in a model with
            three possible values: white, black and other. Suppose further that these values
            have been encoded in the data as white = 1, black = 2, and other = 3 and that
            other = 3 is specified as the reference group. The input
            to the <c>DesignVariables</c> function would be a data frame column with name = Race
            and the numerical values for each subject.
            This function would then generate a data frame containing 3 - 1 = 2 columns for
            the two design variables with names Race_0 and Race_1.
            
            Sample input/output -
            
            Input Column:
            Race
            ----
            1
            1
            2
            1
            1
            3
            3
            2
            1
            
            
            Output DataFrame:
            Race_0  Race_1
            ------  ------
            1       0
            1       0
            0       1
            1       0
            1       0
            0       0
            0       0
            0       1
            0       1
            </remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LikelihoodRatioStatistic">
            <summary>
            Class LikelihoodRatioStatistic computes the Likelihood Ratio Statistic values for a 
            logistic regression.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LikelihoodRatioStatistic.ChiSquareStatistic">
            <summary>
            Gets the likelihood ration chi square statistic, defined
            as
            <c>ChiSqr = -2*ln[(likelihood without the variables)/(likelihood with the variables)]</c>
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LikelihoodRatioStatistic.DegressOfFreedom">
            <summary>
            Gets the degrees of freedom for the <c>ChiSquareStatistic</c>
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LikelihoodRatioStatistic.RightTailProbability">
            <summary>
            Gets the right tail probability (P-value) for the chi square statistic.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LikelihoodRatioStatistic.Clone">
            <summary>
            Creates a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LogisticRegressionAuxiliaryStats`1">
            <summary>
            Class LogisticRegressionAuxiliaryStats computes pseudo R-squared metrics for a logistic regression,
            and odds ratios for the computed coefficients.
            </summary>
            <typeparam name="ParameterCalc">Class for model parameter calculation.</typeparam>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionAuxiliaryStats`1.#ctor(CenterSpace.NMath.Stats.LogisticRegression{`0})">
            <summary>
            Constructs a <c>LogisticRegressionAuxiliaryStats</c> object from
            a logistic regression object.
            </summary>
            <param name="regressionObject">A logistic regression object.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionAuxiliaryStats`1.CoxSnell">
            <summary>
            Gets the Cox and Snell pseudo R-squared statistic for the model.
            </summary>
            <remarks>
            The Cox and Snell pseudo R-squared statistic is computed as
            <c>[1 - (Likelihood-interceptOnly/Likelihood-fullModel)^(2/N)]/[(1 - Likelihood-interceptOnly)^(2/N)]</c>
            where N is the number of observations.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionAuxiliaryStats`1.Nagelkerke">
            <summary>
            Gets the Nagelkerke pseudo R-squared statistic for the model.
            </summary>
            <remarks>
            The Nagelkerke pseudo R-squared statistic is computed as
            <c>1 - (Likelihood-interceptOnly/Likelihood-fullModel)^(2/N)</c>
            where N is the number of observations.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionAuxiliaryStats`1.LogLikelihoodFullModel">
            <summary>
            Gets the log of the value of the likelihood function for the 
            full model (estimated coefficients).
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionAuxiliaryStats`1.LogLikelihoodInterceptOnly">
            <summary>
            Gets the log of the value of the likelihood function for the 
            intercept only model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionAuxiliaryStats`1.LikelihoodRatioStat">
            <summary>
            Gets the likelihood ratio statistic and related values for the logistic
            regression.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionAuxiliaryStats`1.OddsRatios">
            <summary>
            Gets the odds ratio values for the computed coefficients. The
            odds ratio for the intercept parameter, if there is one, is 
            not computed.
            </summary>
            <remarks>
            The ordering of the odds ratios in the returned
            vector corresponds to the ordering of the columns of the 
            logistic regressions regression matrix.
            <code>
                                | lr.RegressionMatrx.Col(i+1), if model has intercept
            OddsRatios[i]  -->  |
                                | lr.RegressionMatrix.Col(i), if model does not have intercept
            
            </code>
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionAuxiliaryStats`1.Clone">
            <summary>
            Creates a deep copy of self.
            </summary>
            <returns>Deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1">
            <summary>
            Class for for calculating "goodness of fit" statistics for a logistic
            regression model.
            </summary>
            <typeparam name="ParameterCalc">The model parameter calculation class.</typeparam>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonResidual">
            <summary>
            Class containing Pearson Residual attributes. The Pearson Residual
            is calculated for each covariate pattern.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonResidual.NumberPositiveOutcomes">
            <summary>
            Gets the number of positive outcomes for this covariate pattern.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonResidual.NumberWithCovariatePattern">
            <summary>
            Gets the number of outcomes with this covariate pattern.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonResidual.EstimatedProbability">
            <summary>
            Gets the estimated, or predicted, probablility for this covariate
            pattern.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonResidual.Residual">
            <summary>
            Gets the Pearson residual for this covariate pattern.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonResidual.CovariatePattern">
            <summary>
            Gets the covariate pattern.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonResidual.ToString">
            <summary>
            String representation for the Pearson residual.
            </summary>
            <returns>String representation for the Pearson residual.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonResidual.Clone">
            <summary>
            Returns a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonChiSqrStatistic">
            <summary>
            Class containing the attributes of the Pearson chi-square statistic
            associated with a logistic regression model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonChiSqrStatistic.Value">
            <summary>
            Gets the value of the Pearson chi-square statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonChiSqrStatistic.Residuals">
            <summary>
            Gets the Pearson residuals used in the Pearson chi-square statistics 
            computation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonChiSqrStatistic.PValue">
            <summary>
            Gets the p-value for the Pearson chi-square statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonChiSqrStatistic.NumberCovariatePatterns">
            <summary>
            Gets the number of distinct covariate patterns for the logistic
            regression model.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonChiSqrStatistic.ToString">
            <summary>
            String representation containing Pearson chi-square statistic
            attributes.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonChiSqrStatistic.Clone">
            <summary>
            Creates a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowStatistic">
            <summary>
            Class containing the attributes of the Hosmer Lemeshow statistic for 
            a logistic regression model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowStatistic.Value">
            <summary>
            Gets the value of the Hosmer Lemeshow statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowStatistic.Groups">
            <summary>
            Gets the groups used for computing the Hosmer Lemeshow statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowStatistic.PValue">
            <summary>
            Gets the p-value for the Hosmer Lemeshow statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowStatistic.CovariatesEqualityComparer">
            <summary>
            Gets the comparer obect used in determining when covariate patterns
            are equal.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowStatistic.NumberOfGroups">
            <summary>
            Gets the number of groups used in computing the Hosmer Lemeshow statistic.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowStatistic.ToString">
            <summary>
            String representation of the attributes of the Hosmer Lemeshow statistic.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowStatistic.Clone">
            <summary>
            Creates a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowGroup">
            <summary>
            Class representing a group used in computing the Hosmer Lemeshow 
            statistic for a logistic regression model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowGroup.AverageEstimatedProbability">
            <summary>
            Gets the average estimated probability for the group.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowGroup.NumberPositiveOutcomes">
            <summary>
            Gets the number of positive outcomes for the group.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowGroup.MemberIndices">
            <summary>
            Gets the indices in the regression model data of the covariates 
            in this group. If <c>lr</c> is the corresponding logistic 
            regression model object, then the covariates in this group
            are
            <c>lr.PredictorMatrix.Row(MemberIndices[i])</c>, for
            i = 0, 1,..., <c>MemeberIndices.Count - 1</c>
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowGroup.GroupSize">
            <summary>
            Gets the number of covariates in this group.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowGroup.PredictedNumberOfPositiveOutcomes">
            <summary>
            Gets the predicted number of outcomes for this group.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowGroup.ToString">
            <summary>
            String representation for the group.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HosmerLemeshowGroup.Clone">
            <summary>
            Creates a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.#ctor(CenterSpace.NMath.Stats.LogisticRegression{`0})">
            <summary>
            Constructs a <c>LogisticRegressionFitAnalysis</c> instance for the
            give logistic regression.
            </summary>
            <param name="logisticRegression">A logistic regression.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.GStatistic">
            <summary>
            Gets the G statistic for the model. The G statistic is
            <c>G = -2*ln[(likelihood without the variables)/(likelihood with the variables)]</c>
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.GStatisticPValue">
            <summary>
            Gets the p-value for the G statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.LogLikelihood">
            <summary>
            Gets the log likelihood for the model.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonStatistic">
            <summary>
            Computes the Pearson chi-square statistic and related quantities from 
            the Pearson residuals. To determine if two observations are the same 
            (share the same covariate pattern) thier variable values are compared 
            using a relative compare with a tolerance of 1e-6.
            </summary>
            <returns>A Pearson chi-square object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.PearsonStatistic(System.Collections.Generic.IEqualityComparer{CenterSpace.NMath.Core.DoubleVector})">
            <summary>
            Computes the Pearson chi-square statistic and related quantities from 
            the Pearson residuals. To determine if two observations are the same 
            (share the same covariate pattern) thier variable values are compared 
            using the given comparer object.
            </summary>
            <param name="covariatesEqualityComparer">Object used to test equality
            between covariate patterns.</param>
            <returns>A Pearson chi-square object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HLStatistic(System.Int32)">
            <summary>
            Gets the Hosmer Lemeshow statistic for the model using a specified number of groups.
            The default is 10 groups.
            </summary>
            <param name="g">The number of groups. Default value is 10.</param>
            <returns>The Hosmer Lemeshow static for the model.</returns>
            <remarks>
            The HL statistic is computed by first grouping the observations as follows:
            First, the observations are sorted in increasing order of their estimated probability.
            The observations are then organized into blocks, where each block constists of
            observations with the same covariate pattern.
            The observations are then divided into approximately <c>g</c> groups according to 
            the following scheme. Let N be the total number of subjects. Let M be the target
            number of subjects for each group given by
            M = [(1/g) * N + 0.5],
            where [x] represents the integral value of x.
            Denote by nj the number of
            observations in the jth block and suppose that observations of the (j - 1)th
            block have been placed in the kth group. Let c be the total number of subjects 
            currently in the kth group. Subjects for the jth block (containing nj subjects)
            are also placed in the kth group if
            c is less than M and c + [0.5 * nj] is less than or equal to M 	 
            Otherwise, the nj subjects are put into the next group. In addition, if the number
            of subjects in the last group does not exceed [0.5 * N] (half the target group size),
            the last two groups are collapsed to form only one group.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HLStatistic(System.Int32,System.Collections.Generic.IEqualityComparer{CenterSpace.NMath.Core.DoubleVector})">
            <summary>
            Calculates the Hosmer Lemeshow statistic for the model using the specified number
            of groups and the given comparer to determine equality of covariate patterns.
            </summary>
            <param name="g">The number of groups.</param>
            <param name="covariatesEqualityComparer">Comparer to use for determining when
            two covariate patterns are equal.</param>
            <returns>The Hosmer Lemeshow statistic for the model.</returns>
            <remarks>
            The HL statistic is computed by first grouping the observations as follows:
            First, the observations are sorted in increasing order of their estimated probability.
            The observations are then organized into blocks, where each block constists of
            observations with the same covariate pattern.
            The observations are then divided into approximately <c>g</c> groups according to 
            the following scheme. Let N be the total number of subjects. Let M be the target
            number of subjects for each group given by
            M = [(1/g) * N + 0.5],
            where [x] represents the integral value of x.
            Denote by nj the number of
            observations in the jth block and suppose that observations of the (j - 1)th
            block have been placed in the kth group. Let c be the total number of subjects 
            currently in the kth group. Subjects for the jth block (containing nj subjects)
            are also placed in the kth group if
            c is less than M and c + [0.5 * nj] is less than or equal to M 	 
            Otherwise, the nj subjects are put into the next group. In addition, if the number
            of subjects in the last group does not exceed [0.5 * N] (half the target group size),
            the last two groups are collapsed to form only one group.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.HLStatistic(System.Func{CenterSpace.NMath.Stats.LogisticRegression{`0},System.Int32[]})">
            <summary>
            Computes the Hosmer Lemeshow statistic using the given functor to determine the 
            number of groups and the number of observations in each group. The groups will
            be determined as follows:
            First, the observations are sorted in increasing order of their estimated probability.
            The first group will contain the first <c>groups[0]</c> observations from this
            sequence, the second group will contain the next <c>groups[1]</c> observations, 
            and so forth.
            </summary>
            <param name="groups">A functor which, given the logistic regression, returns
            any a array of group counts. The HL statistic will be computed using 
            <c>groups.Length</c> groups with the number of observations in the 
            ith group equal to <c>groups[i]</c>.</param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionFitAnalysis`1.Clone">
            <summary>
            Creates a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LogisticRegressionParameter`1">
            <summary>
            Class LogisticRegressionParameter tests statistical hypotheses about
            estimated parameters in linear regressions computed by class
            LogisticRegression.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.paramIndex_">
            <summary>
            Parameter index field.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.parameterValue_">
            <summary>
            Parameter value field.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.parameterVariance_">
            <summary>
            Parameter variance field.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.#ctor">
            <summary>
            Used by Clone method.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.#ctor(CenterSpace.NMath.Stats.LogisticRegression{`0},System.Int32)">
            <summary>
            Construct a LogisticRegressionParameter instance for the parameter at the
            given index in the given LogisticRegression.
            </summary>
            <param name="lr">A logistic regression.</param>
            <param name="paramIndex">The index of the parameter (zero-based).</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.Value">
            <summary>
            Gets the value of this parameter.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.StandardError">
            <summary>
            Gets the standard error of this parameter.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.ParameterIndex">
            <summary>
            Gets the index of this parameter in the linear regresssion.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.WaldChiSquareStatistic">
            <summary>
            Gets the Wald chi square statistic. This is defined as the
            parameter value squared divided by the parameter variance.
            </summary>
            <returns>The WaldStatistic.</returns>
        </member>
        <member name="P:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.WaldChiSqStatisticPValue">
            <summary>
            Gets the p-value for a t-test with the null hypothesis
            that this parameter is equal to the given test value versus the
            alternative hypothesis that it is not.
            </summary>
            <returns>The p-value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.ConfidenceInterval(System.Double)">
            <summary>
            Returns the <c>1 - alpha</c> confidence interval for this parameter.
            </summary>
            <param name="alpha">A significance level.</param>
            <returns>The <c>1 - alpha</c> confidence interval.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.Clone">
            <summary>
            Creates a deep copy of this LogisticRegressionParameter.
            </summary>
            <returns>A deep copy of this LogisticRegressionParameter.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.LogisticRegressionParameter`1.ToString">
            <summary>
            Returns a formatted string representation of this parameter.
            </summary>
            <returns>A formatted string representation of this parameter.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc">
            <summary>
            Parameter calculation for a logistic regression model. The parameters are
            computed to maximize the log likelihood function for the model, using
            the Newton Raphson algorithm to compute the zeros of the first order
            partial derivaties of the log likelihood function.
            </summary>
            <remarks>This algorithm is equivalent to, and sometimes refered to,
            as an iteratively reweighted least squares. Each iteration involves
            solving a linear system of the form X'WX = b, where X is the regression
            matrix, X' is its transpose and W is a diagonal matrix of weights. The
            matrix X'WX will be singular if the matrix X does not have full rank.
            The <c>NewtonRaphsonParameterCalc</c> has a property called 
            <c>FailIfNotFullRank</c> which if <c>true</c> will fail in this case.
            if the property <c>FailIfNotFullRank</c> is <c>false</c> the linear
            system will be solved using a pseudo-inverse and the calculation
            will not fail.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.Tolerance">
            <summary>
            Gets and sets the tolerance used to determine convergence of the algorithm.
            The algorithm is judged converged when the norm of the solution change is
            less than <c>Tolerance * max(B)</c>, where <c>max(B)</c> is the magnitude
            of the largest solution component.
            Default value is 1e-8.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.MaxIterations">
            <summary>
            Gets the sets the maximum number of iterations performed by the algorithm.
            Default is 1000.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.Iterations">
            <summary>
            Gets the number of iterations performed by the algorithm.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.SolutionChange">
            <summary>
            Gets the change in the solution value on the last iteration of the 
            algorithm.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.IsGood">
            <summary>
            Gets a boolean indicating success of failure of the calculation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.Converged">
            <summary>
            Gets a boolean value indicating whether or not the algorithm
            converged.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.FailIfNotFullRank">
            <summary>
            Gets and sets a boolean value indicating whether or not parameter
            calculation should fail if the input matrix of observed values, the
            regression matrix does not have full rank. The default value is
            <c>false</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.CalculationMessage">
            <summary>
            This string will contain information about algorithm failure, or
            if the regression matrix is rank deficient and pseudo inverses 
            were used. Otherwise it will be empty.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.InformationMatrix">
            <summary>
            The information matrix is the matrix of negated second partial derivations of
            the log likelihood function. It is the inverse of the variance/covariance
            matrix for the parameter estimates.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.#ctor(System.Int32,System.Double,System.Boolean)">
            <summary>
            Constructs a <c>NewtonRaphsonParameterCalc</c> object with the given
            maximum number of iterations and tolerance.
            </summary>
            <param name="maxIterations">The maximum number of iterations to perform.</param>
            <param name="tolerance">Tolerance used to determine convergence.
            The algorithm is judged converged when the norm of the solution change is
            less than <c>Tolerance * max(B)</c>, where <c>max(B)</c> is the magnitude
            of the largest solution component.</param>
            <param name="failIfNotFullRank">If <c>true</c> paramter calculation will
            fail if the matrix of subject data, <c>X</c>, input to the 
            <c>CalculateParameters</c> method does not have full rank. If <c>false</c>
            parameter calculation will succeed if <c>X</c> is rank deficient, however
            the solution will not be unique and some paramter statistics may be undefined.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a <c>NewtonRaphsonParameterCalc</c> object with the given
            maximum number of iterations and tolerance.
            </summary>
            <param name="maxIterations">The maximum number of iterations to perform.</param>
            <param name="tolerance">Tolerance used to determine convergence.
            The algorithm is judged converged when the norm of the solution change is
            less than <c>Tolerance * max(B)</c>, where <c>max(B)</c> is the magnitude
            of the largest solution component.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.#ctor(System.Int32)">
            <summary>
            Constructs a <c>NewtonRaphsonParameterCalc</c> object with the given
            maximum number of iterations. A default value of 1e-8 is used for the
            tolerance.
            </summary>
            <param name="maxIterations">The maximum number of iterations to perform.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.#ctor(System.Double)">
            <summary>
            Constructs a <c>NewtonRaphsonParameterCalc</c> object with the given
            tolerance. A default value of 1000 is used for the maximum number of
            iterations.
            </summary>
            <param name="tolerance">Tolerance used to determine convergence.
            The algorithm is judged converged when the norm of the solution change is
            less than <c>Tolerance * max(B)</c>, where <c>max(B)</c> is the magnitude
            of the largest solution component.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.#ctor">
            <summary>
            Constructs a <c>NewtonRaphsonParameterCalc</c> object with a default
            tolerance of 1e-8, and a default value of 1000 for the maximum number of
            iterations.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculate the parameters for the logistic model.
            </summary>
            <param name="X">Matrix of subject data. Rows correspond to 
            subjects.</param>
            <param name="observations">Vector of zeros and ones containing the 
            observed values of the outcomes. A zero entry
            indicates a negative outcome and a one indicates a positive outcome.
            </param>
            <returns>The calculated model parameters.</returns>
            <remarks>If the <c>FailIfNotFullRank</c> is <c>true</c> and the input
            matrix <c>X</c> does not have full rank the calculation will fail,
            the <c>IsGood</c> property will be <c>false</c> and a vector of NaN's
            will be returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.Clone">
            <summary>
            Creates a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.NewtonRaphsonParameterCalc.Solve(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector@)">
            <summary>
            Solve the linear system Ax = rhs. An LU decompositon is used to solve
            the system. If the matrix A is singular the pseudo inverse of A is used
            to solve the system.
            </summary>
            <param name="A">The matrix.</param>
            <param name="rhs">Right hand side.</param>
            <param name="Ainv">Space to place the LU decomposition, or the pseudo inverse.
            Must have same dimensions as A.</param>
            <param name="x">Constains the solution on output.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OneWayAnova">
            <summary>
            Class OneWayAnova computes and summarizes a traditional one-way (single
            factor) Analysis of Variance (ANOVA).
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.#ctor">
            <summary>
            Default constructor. Constructs an empty one-way OneWayAnova instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Int32[])">
            <summary>
            Constructs a <c>OneWayAnova</c> object from summarized data.
            </summary>
            <param name="groupMeans">Vector containing the mean for each group.</param>
            <param name="groupSSE">Vector of error sum of squares for each group.</param>
            <param name="groupCounts">An array containing the number of subjects in each group,</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.#ctor(CenterSpace.NMath.Core.DoubleVector[])">
            <summary>
            Constructs a OneWayAnova instance from data in the given array of vectors.
            </summary>
            <param name="data">An array of vectors. Each vector in the array contains
            the data for a group.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a OneWayAnova instance from data in the given matrix.
            </summary>
            <param name="data">A matrix of data. Each column in the matrix contains the data
            for a group.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32)">
            <summary>
            Construct a OneWayAnova instance from data in the given data frame.
            </summary>
            <param name="data">A DataFrame containing the data.</param>
            <param name="groupColumn">The index of the DataFrame column containing
            the group values.</param>
            <param name="dataColumn">
            The index of the DataFrame column containing the numeric data. The
            specified column must be numeric.
            </param>
            <remarks>
            A Factor is constructed from the group column using the DataFrame method
            <c>GetFactor()</c>, which creates a sorted array of the unique values. 
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnova.AnovaTable">
            <summary>
            Gets a traditional ANOVA table.
            <seealso cref="T:CenterSpace.NMath.Stats.OneWayAnovaTable"/>
            </summary>
            <remarks>Returns a reference to a <c>OneWayAnovaTable</c>
            that will be overwritten if the <c>SetData()</c> method
            is invoked on this <c>OneWayAnova</c> instance. If you want an independent
            copy of the table invoke <c>Clone()</c> on the reference returned
            by this property.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnova.GrandMean">
            <summary>
            Gets the grand mean of the data.
            </summary>
            <remarks>The grand mean is the mean of all of the data.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnova.GroupMeans">
            <summary>
            Gets a vector of group means.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnova.GroupSizes">
            <summary>
            Gets an array of group sizes.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnova.GroupNames">
            <summary>
            Gets an array of group names.
            </summary>
            <remarks>
            If this anova object was constructed from a data frame using a grouping column, the
            group names are the sorted, unique Factor levels created from the column values. 
            If this anova object was constructed from a matrix or an array of vectors, the group names
            are the strings <c>"Group_0"</c>, <c>"Group_1"</c>...<c>"Group_n"</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.SetData(CenterSpace.NMath.Core.DoubleVector[])">
            <summary>
            Performs a one-way ANOVA from data in the given array of vectors.
            </summary>
            <param name="data">An array of vectors. Each vector in the array contains
            the data for a group.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.SetData(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Performs a one way ANOVA from data in the given matrix.
            </summary>
            <param name="data">A matrix of data. Each column in the matrix contains the data
            for a group.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.SetData(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32)">
            <summary>
            Performs a one way ANOVA from data in the given data frame.
            </summary>
            <param name="data">A DataFrame containing the data.</param>
            <param name="groupColumn">The index of the DataFrame column containing
            the group values.</param>
            <param name="dataColumn">
            The index of the DataFrame column containing the numeric data. The
            specified column must be of type DFNumericColumn.
            </param>
            <remarks>
            The DataFrame method <c>GetGroupings()</c> is applied to the specified
            group column, producing a sorted list of unique group values. </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.GetGroupMean(System.Int32)">
            <summary>
            Returns the mean for the specified group.
            </summary>
            <param name="groupNum">A group index (zero-based).</param>
            <returns>The mean for the observations in group <c>groupNum</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.GetGroupMean(System.Object)">
            <summary>
            Returns the mean for the specified group.
            </summary>
            <param name="groupName">A group name.</param>
            <returns>The mean for the observations in group <c>groupName</c>.</returns>
            <remarks>The array of group names can be accessed using the <c>GroupNames</c>
            property. If this anova object was constructed from a data frame using a grouping column, the
            group names are the sorted, unique Factor levels created from the column values. 
            If this anova object was constructed from a matrix or an array of vectors, the group names
            are simply <c>Group_0</c>, <c>Group_1</c>...<c>Group_n</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.GetGroupSize(System.Int32)">
            <summary>
            Returns the size of the specified group.
            </summary>
            <param name="groupNum">A group index (zero-based).</param>
            <returns>The number of observations in group <c>groupNum</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.GetGroupSize(System.Object)">
            <summary>
            Returns the size of the specified group.
            </summary>
            <param name="groupName">A group name.</param>
            <returns>The number of observations in group <c>groupName</c>.</returns>
            <remarks>The array of group names can be accessed using the <c>GroupNames</c>
            property. If this anova object was constructed from a data frame using a grouping column, the
            group names are the sorted, unique Factor levels created from the column values. 
            If this anova object was constructed from a matrix or an array of vectors, the group names
            are simply <c>Group_0</c>, <c>Group_1</c>...<c>Group_n</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.FStatisticCriticalValue(System.Double)">
            <summary>
            Computes the critical value for the ANOVA F statistic at the given
            significance level.
            </summary>
            <param name="alpha">A significance level.</param>
            <returns>The critical value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.Clone">
            <summary>
            Creates a deep copy of this OneWayAnova.
            </summary>
            <returns>A deep copy of this OneWayAnova.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnova.ToString">
            <summary>
            String representation of a traditional one way ANOVA table.
            </summary>
            <returns>String representation of a one way ANOVA.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OneWayAnovaTable">
            <summary>
            Class OneWayAnovaTable summarizes the information of a traditional one-way
            Analysis of Variance (ANOVA) table.
            </summary>
            <remarks>
            A one-way ANOVA table contains 3 rows and 5 columns.
            The rows contain information for each of the following sources: between-groups,
            within-groups, and total. The columns contain the following quantities
            for each source: degrees of freedom, sum of squares, mean square, F statistic
            and p-value (only for between-groups).
            <br/>
            Instances of OneWayAnovaTable are obtained from a OneWayAnova object using the
            <c>AnovaTable</c> property, and cannot be constructed independently. 
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayAnovaTable.BetweenGroupsRowKey">
            <summary>
            The key used to access the <c>Between groups</c> row in the one-way ANOVA
            table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayAnovaTable.WithinGroupsRowKey">
            <summary>
            The key used to access the <c>Within groups</c> row in the one-way ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayAnovaTable.TotalRowKey">
            <summary>
            The key used to access the <c>Total</c> row in the one-way ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayAnovaTable.DegressOfFreedomColName">
            <summary>
            The name of the degrees of freedom column in the one-way ANOVA
            table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayAnovaTable.SumOfSquaresColName">
            <summary>
            The name of the sum of squares column in the one-way ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayAnovaTable.MeanSquareColName">
            <summary>
            The name of the mean square column in the one-way ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayAnovaTable.FstatisticColName">
            <summary>
            The name of the F statistic column in the one-way ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayAnovaTable.PvalueColName">
            <summary>
            The name of the p-value column in the one-way ANOVA table.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnovaTable.#ctor">
            <summary>
            Constructs an empty one way ANOVA table.
            </summary>
            <remarks>All values are set to <c>StatsSettings.NumericMissingValue</c>.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.SumOfSquaresBetween">
            <summary>
            Gets the between-groups sum of squares.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.SumOfSquaresWithin">
            <summary>
            Gets the within-groups sum of squares.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.SumOfSquaresTotal">
            <summary>
            Gets the total sum of squares.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.DegreesOfFreedomBetween">
            <summary>
            Gets the between-groups degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.DegreesOfFreedomWithin">
            <summary>
            Gets the within-groups degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.DegreesOfFreedomTotal">
            <summary>
            Gets the total degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.MeanSquareBetween">
            <summary>
            Gets the between-groups mean square.
            </summary>
            <remarks>
            The between-groups mean square is the between-groups sum of squares divided by
            the between-groups degrees of freedom.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.MeanSquareWithin">
            <summary>
            Gets the within-group mean square.
            </summary>
            <remarks>
            The within-groups mean square is the within-group sum of squares divided by
            the within-group degrees of freedom.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.MeanSquareTotal">
            <summary>
            Gets the total mean square.
            </summary>
            <remarks>
            The total mean square is the total sum of squares divided by the total
            degrees of freedom.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.FStatistic">
            <summary>
            Gets the F statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayAnovaTable.FStatisticPValue">
            <summary>
            Gets the p-value for the F statistic.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayAnovaTable.Clone">
            <summary>
            Creates a deep copy of this OneWayAnovaTable.
            </summary>
            <returns>A deep copy of this OneWayAnova.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OneWayRanova">
            <summary>
            Class OneWayRanova summarizes the information of a
            one-way repeated measures Analysis of Variance (RANOVA).
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayRanova.#ctor">
            <summary>
            Default constructor. Constructs an empty OneWayRanova instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayRanova.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a OneWayRanova instance from data in the given matrix.
            </summary>
            <param name="data">A matrix. Each row of the matrix contains the data for
            an individual subject. There should be one column for each treatment.</param>
            <remarks>Rows with missing values (NaNs) are ignored.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayRanova.#ctor(CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Constructs a OneWayRanova instance from data in the given data frame.
            </summary>
            <param name="data">A data frame. Each row in the 
            DataFrame contains the data for an individual subject. There should
            be one column for each treatment. All numeric columns in the given DataFrame 
            are interpreted as treatments; non-numeric columns are ignored.</param>
            <remarks>Rows with missing values (NaNs) are ignored.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanova.RanovaTable">
            <summary>
            Gets a traditional RANOVA table.
            <seealso cref="T:CenterSpace.NMath.Stats.OneWayRanovaTable"/>
            </summary>
            <remarks>Returns a reference to a <c>OneWayRanovaTable</c>
            that will be overwritten if the <c>SetData()</c> method
            is invoked on this <c>OneWayRanova</c> instance. If you want an independent
            copy of the table invoke <c>Clone()</c> on the reference returned
            by this property.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanova.GrandMean">
            <summary>
            Gets the grand mean of the data.
            </summary>
            <remarks>The grand mean is the mean of all of the data.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanova.SubjectMeans">
            <summary>
            Gets a vector of means for each subject.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayRanova.SetData(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Recalculates the RANOVA with data from the given matrix.
            </summary>
            <param name="data">A matrix. Each row of the matrix contains the data for
            an individual subject. There should be one column for each treatment.</param>
            <remarks>Rows with missing values (NaNs) are ignored.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayRanova.SetData(CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Recalculates the RANOVA with from data the given data frame.
            </summary>
            <param name="data">A data frame. Each row in the 
            DataFrame contains the data for an individual subject. There should
            be one column for each treatment. All numeric columns in the given DataFrame 
            are interpreted as treatments; non-numeric columns are ignored.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayRanova.FStatisticCriticalValue(System.Double)">
            <summary>
            Computes the critical value for the RANOVA F statistic at the given
            significance level.
            </summary>
            <param name="alpha">A significance level.</param>
            <returns>The critical value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayRanova.Clone">
            <summary>
            Creates a deep copy of this OneWayRanova.
            </summary>
            <returns>A deep copy of this OneWayRanova.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OneWayRanovaTable">
            <summary>
            Class OneWayRanovaTable summarizes the information of a traditional one-way
            repeated measures Analysis of Variance (RANOVA) table.
            </summary>
            <remarks>
            Instances of OneWayRanovaTable are obtained from a OneWayARanova object using the
            <c>RanovaTable</c> property, and cannot be constructed independently. 
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayRanovaTable.TreatmentRowKey">
            <summary>
            The key for the <c>Treatment</c> row in the RANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayRanovaTable.WithinSubjectsRowKey">
            <summary>
            The key for the <c>Subjects</c> row in the RANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayRanovaTable.TotalRowKey">
            <summary>
            The key for the <c>Total</c> row in the RANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayRanovaTable.ErrorRowKey">
            <summary>
            The key for the <c>Error</c> row in the RANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayRanovaTable.DegressOfFreedomColName">
            <summary>
            The name of the degrees of freedom column in RANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayRanovaTable.SumOfSquaresColName">
            <summary>
            Name of the sum of squares column in the RANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayRanovaTable.MeanSquareColName">
            <summary>
            The name of the mean square column in the RANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayRanovaTable.FstatisticColName">
            <summary>
            The name of the F statistic column in the RANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.OneWayRanovaTable.PvalueColName">
            <summary>
            The name of the p-value column in the RANOVA table
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayRanovaTable.#ctor">
            <summary>
            Constructs an empty RANOVA table.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.SumOfSquaresTreatment">
            <summary>
            Gets the treatment sum of squares.
            </summary>
            <remarks>
            The treatment sum of squares represents the variation due to the treatment
            effect.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.SumOfSquaresWithinSubject">
            <summary>
            Gets the within-subject sum of squares.
            </summary>
            <remarks>
            The within-subject sum of squares represents the variation within an
            individual.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.SumOfSquaresTotal">
            <summary>
            Gets the total sum of squares.
            </summary>
            <remarks>
            The total sum of squares represents the total variation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.SumOfSquaresError">
            <summary>
            Gets the error sum of squares.
            </summary>
            <remarks>
            The error sum of squares represents error variation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.DegreesOfFreedomTreatment">
            <summary>
            Gets the treatment degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.DegreesOfFreedomWithinSubject">
            <summary>
            Gets the within-subject degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.DegreesOfFreedomError">
            <summary>
            Gets the error degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.DegreesOfFreedomTotal">
            <summary>
            Gets the total degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.MeanSquareTreatment">
            <summary>
            Gets the treatment mean square.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.MeanSquareWithinSubject">
            <summary>
            Gets the within-subject mean square.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.MeanSquareError">
            <summary>
            Gets the error mean square.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.MeanSquareTotal">
            <summary>
            Gets the total mean square.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.FStatistic">
            <summary>
            Gets the F statistic for the RANOVA.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OneWayRanovaTable.FStatisticPValue">
            <summary>
            Gets the p-value for the F statistic.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OneWayRanovaTable.Clone">
            <summary>
            Creates a deep copy of this OneWayRanovaTable.
            </summary>
            <returns>A deep copy of this OneWayRanovaTable.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OrderedConnectivityMatrix">
             <summary>
             Class OrderedConnectivityMatrix reorders the rows and columns of an
             connectivity matrix so that the most affiliated elements appear as clusters
             of higher values along the diagonal. 
             </summary>
             <remarks>
             The connectivity matrix a symmetric matrix, A, of non-negative values
             where aij is a measure of the connectivity of element i and j. The
             values aij may be 0 and 1 with 1 indicating that elemets i and j are
             adjacent and 0 indicating that they are not. They may also be floating
             point numbers. For example the values aij may be real numbers between
             0 and 1 and indicate the probability, or belief that elements i and j
             are adjacent.
             <br/>
             First a hierarchical cluster analysis is performed on the elements 
             represented in the connectivity matrix. For the purpose of clustering 
             the elements represented in the connectivity matrix are labeled 0, 1,
             2,...,n-1, where n is the number of the elements. 
             Given two integers, i and j, the provided distance function should return
             the distance between the ith and jth elements. If no distance function is
             provided the default distance function returns the value 1.0 - aij for 
             the distance between the ith and jth elements, where aij is the i, jth 
             element of the connectivity matrix A. 
             After the hierarchical clustering process, the leaf nodes of the
             dendrogram produced from the results are traversed in order to produce a
             permutation vector. This permutation vector is used to reorder the rows
             and columns of the input connectivity matrix, causing the most affiliated 
             elements to appear as clusters of higher values along the diagonal.
             <br/>
             References:
             "Constructing and Reconstructing the Reorderable Matrix"
             Harri Siirtola1 and Erkki Mäkinen
             <br/>
             "Concept Map: Clustering Visualizations of Categorical Domains"
             David Rouff and Mark McLean 
            </remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.ElementDistance">
            <summary>
            Given an entry aij in the connectivity matrix A, this delegate must return
            the distance between the elements i and j to be used for performing the
            hierarchical cluster analysis.
            </summary>
            <param name="i">ith element.</param>
            <param name="j">jth element.</param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.#ctor(CenterSpace.NMath.Stats.ConnectivityMatrix)">
            <summary>
            Constructs an OrderedConnectivityMatrix instance using the default linkage
            and distance functions to perform the hierarchical cluster analysis. The
            default linkage function is weighted average and the default distance 
            function is dist(i,j) = 1 - aij, where aij is the ijth entry in the 
            connectivity matrix A.
            </summary>
            <param name="connectivityMatrix">The connectivity matrix to cluster.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.#ctor(CenterSpace.NMath.Stats.ConnectivityMatrix,CenterSpace.NMath.Stats.OrderedConnectivityMatrix.ElementDistance,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Constructs an OrderedConnectivityMatrix instance using the specified linkage
            and distance functions to perform the hierarchical cluster analysis.
            </summary>
            <param name="connectivityMatrix">Connectivity matrix to cluster.</param>
            <param name="distanceFunction">The distance function to use for the
            hierarchial cluster analysis.</param>
            <param name="linkageFunction">The linkage function to use for the
            hierarchial cluster analysis.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.#ctor(CenterSpace.NMath.Stats.ConnectivityMatrix,CenterSpace.NMath.Stats.OrderedConnectivityMatrix.ElementDistance)">
            <summary>
            Constructs an OrderedConnectivityMatrix instance using the default linkage
            and specified distance functions to perform the hierarchical cluster analysis.
            </summary>
            <param name="connectivityMatrix">Connectivity matrix to cluster.</param>
            <param name="distanceFunction">The distance function to use for the
            hierarchial cluster analysis.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.#ctor(CenterSpace.NMath.Stats.ConnectivityMatrix,CenterSpace.NMath.Stats.Linkage.Function)">
            <summary>
            Constructs an OrderedConnectivityMatrix instance using the specified linkage
            and default distance functions to perform the hierarchical cluster analysis.
            </summary>
            <param name="connectivityMatrix">Connectivity matrix to cluster.</param>
            <param name="linkageFunction">The linkage function to use for the
            hierarchial cluster analysis.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.PermutationVector">
            <summary>
            Gets the permutation vector of the node labels of the leaves of the 
            dendrogram corresponding the hierarchical cluster analysis. Labels
            are zero based. The permutation vector, p, is used to reorder the 
            connectivity matrix as follows: if A is the original connectivity matrix
            and C is the ordered connectivity matrix
            then C[i,j] = A[p[i],p[j]].
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.LinkageFunction">
            <summary>
            Gets the complete hierarchical linkage tree, computed from <c>Distances</c>
            using the current linkage delegate.
            </summary>
            <remarks>
            Returns an <c>(n-1) x 3</c> matrix containing the complete hierarchical
            linkage tree. At each level in the tree, Columns 1 and 2 contain the
            indices of the clusters linked to form the next cluster. Column 3 contains
            the distances between the clusters.
            <br/>
            Clusters <c>0</c> to <c>n-1</c> are the objects in the original dataset.
            Each newly formed cluster is assigned the next available index. For
            example, if there are five objects in the original data set, they are assigned
            to singleton clusters <c>0</c> to through <c>4</c>. The first new cluster
            formed by the linkage function is assigned index <c>5</c>. If cluster <c>5</c>
            appears later in the tree, it is being combined again into a still larger
            cluster.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.DistanceFunction">
            <summary>
            Gets and the distance function used in the hierarchical
            cluster analysis.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.CopheneticDistances">
            <summary>
            Gets the vector of cophenetic distances between all possible element
            pairs resulting from the hierarchical cluster analysis.
            </summary>
            <remarks>
            The cophenetic distance between two elements is defined to be the
            intergroup distance when the objects are first combined into a single
            cluster in the linkage tree.
            <br/>
            The format is the same as the distance vector returned by <c>Distances</c>.
            <br/>
            The correlation between the original <c>Distances</c> and the
            <c>CopheneticDistances</c> is sometimes taken as a measure of appropriateness
            of a cluster analysis relative to the original data:
            <code>
            double r = StatsFunctions.Correlation( distances, copheneticDistances );
            </code>
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.Distances">
            <summary>
            Gets the vector of distances between all possible object
            pairs, computed using the current distance delegate.
            </summary>
            <remarks>For <c>n</c> objects, the distance vector is of length
            <c>(n-1)(n/2)</c>, with distances arranged in the order:
            <code>
            (1,2), (1,3), ..., (1,n), (2,3), ..., (2,n), ..., ..., (n-1,n)
            </code>
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.OrderedConnectivityMatrix.CutTree(System.Int32)">
            <summary>
            Constructs the specified number of clusters from the hierarchical
            linkage tree.
            </summary>
            <param name="height">The number of clusters to form.</param>
            <returns>
            A ClusterSet object that identifies the cluster into which each
            object was grouped. Cluster numbers are arbitrary, and zero-based.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>k</c> is less than one or greater than <c>Order</c>.
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS1">
            <summary>
            Class PLS1 performs a Partial Least Squares (PLS) regression calculation on a
            set of predictive and one-dimensional response values. The result is used to 
            predict response variable values.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.PLS1.DEFAULT_CALCULATOR">
            <summary>
            If no calculation object is specified during construction of 
            PLS2 objects, this is the default calculator that will be used.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.#cctor">
            <summary>
            Static constructor. Initializes static variables.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.#ctor">
            <summary>
            Constructs a PLS1 instance. The default calculator.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.#ctor(CenterSpace.NMath.Stats.IPLS1Calc)">
            <summary>
            Constructs a PLS1 instance that used the given calculator.
            </summary>
            <param name="calculator">Calculator object.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.#ctor(CenterSpace.NMath.Stats.IPLS1Calc,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Constructs a PLS1 instance with the given PLS1 calculator and 
            performs a PLS1 calculation on the given data.
            </summary>
            <param name="calculator">PLS1 calculator object.</param>
            <param name="X"><c>n</c> samples by <c>p</c> variables predictor matrix.</param>
            <param name="y">Response vector.</param>
            <param name="numComponents">The number of components of <c>X</c> to use 
            in the PLS calculation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Constructs a PLS1 instance with the default PLS1 calculator
            and performs a PLS1 calculation on the given data.
            </summary>
            <param name="X"><c>n</c> samples by <c>p</c> variables predictor matrix.</param>
            <param name="y">Response vector.</param>
            <param name="numComponents">The number of components of <c>X</c> to use 
            in the PLS calculation.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1.IsGood">
            <summary>
            Whether the most recent calculation was successful.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1.Message">
            <summary>
            Gets any message that may have been generated by the algorithm. For 
            example, if the calculation was unsuccessful, the message should 
            indicate the reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1.NumComponents">
            <summary>
            Gets and sets the number of predictor variable components to use
            in the PLS calculation.
            </summary>
            <remarks>
            Setting the number of components forces a re-calculation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1.Calculator">
            <summary>
            Gets and sets the calculator.
            </summary>
            <remarks>
            Setting the calculator forces a re-calculation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1.PredictorMatrix">
            <summary>
            Gets the predictor matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1.ResponseVector">
            <summary>
            Gets the response vector.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.Calculate(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Calculates the partial least squares fit.
            </summary>
            <param name="X">Matrix of predictor or independent variables.</param>
            <param name="y">Vector of response or dependent variables.</param>
            <param name="numComponents">Number of components or latent variables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.Calculate(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Calculates the partial least squares fit.
            </summary>
            <param name="X">DataFrame of predictor or independent variables.</param>
            <param name="y">Vector of response or dependent variables.</param>
            <param name="numComponents">Number of components or latent variables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.HotellingsT2">
            <summary>
            Calculaties Hotelling's T2 statistic for each sample. T2 can be viewed as the 
            squared distance from a samples projection into the subspace to the centroid
            of the subspace, or, more simply, the variation of the sample point within
            the model.
            </summary>
            <returns>Vector of T2 statistics for the samples. The ith element of the
            T2 vector is the T2 statistic for the ith sample.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.HotellingsT2(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the Hotelling's T2 statistic for a new sample.
            </summary>
            <param name="newSample">The new sample.</param>
            <returns>Hotelling's T2 statistic for the sample.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the 
            sample's length is not consistent with the model.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.QResiduals">
            <summary>
            Calculates the Q residuals for in sample in the model. The Q residual 
            for a given sample is the distance between the sample and its projection
            in the subspace of the model.
            </summary>
            <returns>Vector of Q residuals. The ith element of vector is the residual
            for the ith sample.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.Clone">
            <summary>
            Creates a deep copy of this PLS1.
            </summary>
            <returns>A deep copy of this PLS1.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.Predict(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the predicted value of the response variable
            for the given value of the predictor variable.
            </summary>
            <param name="x">The predictor variable value.</param>
            <returns>The predicted response variable value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1.Predict(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Predict the responses for a set of predictor values.
            </summary>
            <param name="Z">Matrix of predictor values, one in each row.</param>
            <returns>Vector of predicted response values, one in each row.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS1Anova">
            <summary>
            Class PLS1Anova performs a standard ANalysis Of VAriance (ANOVA) for 
            a Partial Least Squares 1 (PLS1) regression model.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1Anova.#ctor(CenterSpace.NMath.Stats.PLS1)">
            <summary>
            Constructs a Pls1Anova instance for the given PLS1 object.
            </summary>
            <param name="pls">Partial least squares object.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1Anova.SumOfSquaresTotal">
            <summary>
            Returns the total sum of squares for the model. This is the sum of the
            squared deviations from the mean of the elements of the the response
            vector.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1Anova.SumOfSquaresResiduals">
            <summary>
            Gets the sum of squares for the residuals. This is the sum of the 
            squared differences between the response values and the responses
            predicted by the regression model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1Anova.Residuals">
            <summary>
            Gets the vector of residuals. This is the vector of differences
            between the given response values and the response values 
            predicted by the regression model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1Anova.MeanSqrErrorPrediction">
            <summary>
            Gets the mean square error for prediction. This is 
            the residual sum of squares divided by the number of 
            samples.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1Anova.RootMeanSqrErrorPrediction">
            <summary>
            Gets the root mean square error for prediction. This is
            the square root of the mean square error for prediction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1Anova.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom for the data. This is 
            <c>number of samples - number of components - 1</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1Anova.StandardError">
            <summary>
            Gets the standard error for the model. This is the square root of
            the residual sum of squares divided by the degrees of freedom for 
            the model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1Anova.CoefficientOfDetermination">
            <summary>
            Gets the R squared value. Also called the coefficient of determination.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1Anova.Clone">
            <summary>
            Creates a deep copy of this PLS1Anova.
            </summary>
            <returns>A deep copy of this PLS1Anova.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS1CrossValidation">
             <summary>
             Class PLS1CrossValidation performs an evaluation of a PLS (Partial Least
             Squares) model.
             </summary>
             <remarks>
             Evaluation consists of dividing the data into two
             subsets - a training subset and a testing subset. A PLS calculation
             is performed on the the training subset and the resulting model is
             used to predict the values of the dependent variables in the testing
             set. The mean square error between the actual and predicted dependent
             values is then calculated. Usually, the data is divided up into several
             training and testing subsets and calculations are done on each of these.
             In this case the average mean square error over each PLS calculation
             is reported (the individual mean square errors are available as well).
            <p/>
             The subsets to use in the cross validation are specifed by providing 
             an implementation of the ICrossValidationSubsets interface. Classes
             that implement this interface generate training and testing subsets 
             from PLS data.
             </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidation.#ctor">
            <summary>
            Default constructor. Constructs a PLS1CrossValidation instance that uses the
            "leave one out" cross validation and the Nipals algorithm.
            <see cref="T:CenterSpace.NMath.Stats.LeaveOneOutSubsets"/>
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidation.#ctor(CenterSpace.NMath.Stats.ICrossValidationSubsets)">
            <summary>
            Constructs a PLS1CrossValidation instance which uses the given subset 
            generator and the Nipals algorithm.
            </summary>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
            <see cref="T:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm"/>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidation.#ctor(CenterSpace.NMath.Stats.IPLS1Calc,CenterSpace.NMath.Stats.ICrossValidationSubsets)">
            <summary>
            Constructs a PLS1CrossValidation instance which uses the given PLS calculator
            and subset generator.
            </summary>
            <param name="calculator">Instance of a class implementing the IPLS1Calc
            interface. Used to perform the PLS calculations during cross validation.</param>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidation.Results">
            <summary>
            Gets the results of the cross validation for each training/testing
            subsets pair.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidation.AverageMeanSqrError">
            <summary>
            Gets the average of the mean square errors for each training/testing
            subsets pair.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidation.Calculator">
            <summary>
            Gets and sets the PLS1 calculator to use for PLS1 calculations.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidation.SubsetGenerator">
            <summary>
            Gets and sets the subset generator to use to generate testing
            and training subsets.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidation.IsGood">
            <summary>
            Returns true if all the PLS2 calculations were successful. If one or
            more calculations failed, false is returned. The results may be examined
            to determine which calculations failed.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidation.Clone">
            <summary>
            Creates a deep copy of this PLS1CrossValidation.
            </summary>
            <returns>A deep copy of this PLS1CrossValidation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidation.DoCrossValidation(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Performs cross validation on the given data using the existing PLS1
            calculator and subset generator.
            </summary>
            <param name="X">Predictor data. Matrix is number of samples rows by number
            of independent variables columns.</param>
            <param name="y">Response data. vector is number of samples in length.</param>
            <param name="numComponents">Number of components (a.k.a. latent vectors) to
            use in the PLS1 calculation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidation.DoCrossValidationPls1(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.IPLS1Calc,System.Int32)">
            <summary>
            Performs cross validation on the given data using the given PLS1
            calculator and number of components.
            </summary>
            <param name="X">Predictor data. Matrix is number of samples rows by number
            of independent variables columns.</param>
            <param name="y">Response data. Vector contains number of samples elements.</param>
            <param name="calculator">Instance of a class implementing the IPLS1Calc
            interface. Used to perform the PLS1 calculations during cross validation.</param>
            <param name="numComponents">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS1CrossValidationData">
            <summary>
            Class PLS1CrossValidationData divides Partial Least Squares - one
            dimensional response variable,(PLS1), data into training and testing
            subsets.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidationData.#ctor">
            <summary>
            Constructs a PLS1CrossValidationData instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidationData.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Constructs a PLS1CrossValidationData instance from the given PLS1 data
            and testing subset. The training subset will be data not contained
            in the testing subset.
            </summary>
            <param name="predictorData">Predictor PLS1 data.</param>
            <param name="responseData">Response PLS1 data.</param>
            <param name="testingSubset">Subset specifying the indices of the data rows
            to used as the testing data. The remaining rows will be used as the training
            data.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationData.NumTestingSamples">
            <summary>
            Gets the number of samples that will be used for testing.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationData.NumTrainingSamples">
            <summary>
            Gets the number of samples that will be used for training.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationData.ResponseTrainingSet">
            <summary>
            Gets and sets the matrix of response variable values comprising the training set.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationData.PredictorTrainingSet">
            <summary>
            Gets and sets the matrix of predictor variable values comprising the training set.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationData.ResponseTestingSet">
            <summary>
            Gets and sets the matrix of response variable values comprising the testing set.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationData.PredictorTestingSet">
            <summary>
            Gets and sets the matrix of predictor variable values comprising the testing set.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidationData.Clone">
            <summary>
            Creates a deep copy of this PLS1CrossValidationData.
            </summary>
            <returns>A deep copy of this PLS1CrossValidationData.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidationData.SetData(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Sets the cross validation data according the given PLS1 data and testing 
            subset. The training subset will be the data not contained in the testing 
            subset.
            </summary>
            <param name="predictorData">Predictor variable values.</param>
            <param name="responseData">Response variable values.</param>
            <param name="testingSubset">Subset specifying the indices of the data rows
            to used as the testing data. The remaining rows will be used as the training
            data.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS1CrossValidationResult">
            <summary>
            Class PLS2CrossValidationResult performs a Partial Least Squares - one
            dimensional response variable, (PLS1), cross validation calculation.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidationResult.#ctor(CenterSpace.NMath.Stats.PLS1CrossValidationData,CenterSpace.NMath.Stats.IPLS1Calc,System.Int32)">
            <summary>
            Constructs a PLS1CrossValidationResult instance from the given data, partial
            least squares calculator, and number of components (aka latent vector).
            </summary>
            <param name="data">The cross validation data containing the testing 
            and training data.</param>
            <param name="calculator">The partial least squares algorithm to use.</param>
            <param name="numComponents">The number of components or latent vectors.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationResult.CrossValidationData">
            <summary>
            Gets the cross validation data used for this result.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationResult.MeanSqrError">
            <summary>
            Gets the mean square error for this cross validation result. This
            is the mean squared error between the actual dependent data values
            and those predicted by the model constructed from the training data.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationResult.IsGood">
            <summary>
            Whether the PLS1 calculation was successful.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1CrossValidationResult.Message">
            <summary>
            Gets any message that may have been generated by the PLS1 calculation. 
            For example, if the calculation is unsuccessful, the message indicates the
            reason.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1CrossValidationResult.Clone">
            <summary>
            Creates a deep copy of this PLS1CrossValidationResult.
            </summary>
            <returns>A deep copy of this PLS1CrossValidationResult.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm">
            <summary>
            Class PLS1NipalsAlgorithm encapsulates the Nonlinear Iterative PArtial Least
            Squares (NIPALS) algorithm for computing partial least squares regression components.
            </summary>
            <remarks>
            During the calculation the following model for <c>PredictorMatrix</c>
            (independent variable values) is formed:
            <code>PredictorMatrix = TP' + Xg</code>
            where <code>g</code> is the number of components specified for the model.
            <c>T</c> is called the <I>scores</I> matrix (the columns of <c>T</c>
            are the scores), and <c>P</c> is called the <I>loadings</I> matrix. The
             matrix <c>Xg</c> is called the <I>residual</I> matrix for 
            <c>PredictorMatrix</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.#ctor">
            <summary>
            Constructs an instance of the PLS1NipalsAlgorithm class.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.ResponseWeights">
            <summary>
            Gets the vector of response weights. The ith element of this vector
            corresponds to the regression coefficient calculated by ordinary linear
            regression of the response vector on the ith score vector.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.IsGood">
            <summary>
            Whether the most recent calculation was successful.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.Message">
            <summary>
            Gets any message that may have been generated by the algorithm. For example,
            if the calculation is unsuccessful, the message indicates the reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.Scores">
            <summary>
            Gets the scores matrix for <c>PredictorMatrix</c>. The scores matrix
            is described in the class summary.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.Loadings">
            <summary>
            Gets the loadings matrix for <c>PredictorMatrix</c>. The loadings matrix
            is described in the class summary.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.Weights">
            <summary>
            Returns the matrix of weights computed by the algorithm.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.PredictorMean">
            <summary>
            Gets the vector of means for the predictor variables.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.ResponseMean">
            <summary>
            Gets the vector of means for the response variables.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.RegressionVector">
            <summary>
            Gets the vector of regression, <c>r</c>, which can be used for making
            predictions as follows:
            <para>
            Let <c>ybar</c> and <c>xbar</c> be the means of the response and 
            predictor variables, respectively, used to create the model. Then
            the predicted response, <c>yhat</c>, for a predictor vector, <c>z</c>
            is given by the formula
            <code>
            yhat = ybar + (z - xbar)'r
            </code>
            </para>
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.QResiduals">
            <summary>
            Calculates the Q residuals for in sample in the model. The Q residual 
            for a given sample is the distance between the sample and its projection
            in the subspace of the model.
            </summary>
            <returns>Vector of Q residuals. The ith element of vector is the residual
            for the ith sample.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.Calculate(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Calculates a partial least squares from the given data and number of 
            components.
            </summary>
            <param name="X">Predictor data. Matrix is number of samples by 
            number of predictor variables.</param>
            <param name="y">Response data. Length of the vector is the number
            of samples. This length must match the number of rows in the predictor
            matrix.</param>
            <param name="numComponents">Number of components.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.Clone">
            <summary>
            Creates a deep copy of this PLS1NipalsAlgorithm.
            </summary>
            <returns>A deep copy of this PLS1NipalsAlgorithm.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets most of the attributes only if isGood_
            </summary>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Conditionally sets most of the values for serialization only if isGood_ 
            </summary>
            <param name="ctx">The streaming context.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.Predict(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Use the calculated model to predict the response value, <c>y</c>, from 
            the given value for the predictor variable.
            </summary>
            <param name="z">Predictor variable.</param>
            <returns>Predicted response.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS1NipalsAlgorithm.Predict(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Use the calculated model to predict the response values, <c>ResponseVector</c>, 
            from the given set of predictor variables.
            </summary>
            <param name="Z">Matrix of predictor variable values, one per row.</param>
            <returns>Predicted response variable values. The <i>i</i>th element is 
            the predicted response for predictor variable in the <i>i</i>th row of 
            <c>Z</c>.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS2">
            <summary>
            Class PLS2 performs a Partial Least Squares (PLS) regression calculation
            on a set of predictive and response values. The result is used to predict
            response variable values.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.PLS2.DEFAULT_CALCULATOR">
            <summary>
            Calculator to use when no specific calculator is specified.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.#cctor">
            <summary>
            Static constructor. Initializes static variables.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.#ctor">
            <summary>
            Default constructor. Calculator is set to the default.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.#ctor(CenterSpace.NMath.Stats.IPLS2Calc)">
            <summary>
            Constructs a PLS2 instance which uses the given calculator.
            </summary>
            <param name="calculator">PLS calculator.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.#ctor(CenterSpace.NMath.Stats.IPLS2Calc,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Constructs a PLS2 instance with the given calculator and performs a 
            PLS2 calculation on the given data.
            /// </summary>
            <param name="calculator">A calculator.</param>
            <param name="X"><c>n</c> samples by <c>p</c> variables predictor matrix.</param>
            <param name="Y"><c>n</c> samples by <c>m</c> variables response matrix.</param>
            <param name="numComponents">The number of components of <c>PredictorMatrix</c>. 
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Constructs a PLS2 instance with the default calculator and performs a
            PLS2 calculation on the given data.
            </summary>
            <param name="X"><c>n</c> samples by <c>p</c> variables predictor matrix.</param>
            <param name="Y"><c>n</c> samples by <c>m</c> variables response matrix.</param>
            <param name="numComponents">The number of components of <c>PredictorMatrix</c>.
            </param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2.IsGood">
            <summary>
            Whether the calculation was successful. 
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2.Message">
            <summary>
            Gets any message that may have been generated by the algorithm. For 
            example, if the calculation is unsuccessful, the message indicate the
            reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2.NumComponents">
            <summary>
            Gets and sets the number of predictor variable components to use
            in the calculation.
            </summary>
            <remarks>
            Setting the number of components forces a re-calculation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2.Calculator">
            <summary>
            Gets and sets the calculator.
            </summary>
            <remarks>
            Setting the calculator forces a recalculation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2.X">
            <summary>
            Gets the predictor matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2.Y">
            <summary>
            Gets the response matrix.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.Calculate(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Calculates the partial least squares fit.
            </summary>
            <param name="X">Matrix of predictor or independent variables.</param>
            <param name="Y">Matrix of response or dependent variables.</param>
            <param name="numComponents">Number of components or latent variables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.Calculate(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.DataFrame,System.Int32)">
            <summary>
            Calculates the partial least squares fit.
            </summary>
            <param name="xData">DataFrame of predictor or independent variables.</param>
            <param name="yData">DataFrame of response or dependent variables.</param>
            <param name="numComponents">Number of components or latent variables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.Clone">
            <summary>
            Creates a deep copy of this PLS2.
            </summary>
            <returns>A deep copy of this PLS2.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.Predict(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the predicted value of the response variable
            for the given value of the predictor variable.
            </summary>
            <param name="z">The predictor variable value.</param>
            <returns>Predicted response variable value.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.Predict(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Predict the responses for a set of predictor values.
            </summary>
            <param name="Z">Matrix of predictor values, one in each row.</param>
            <returns>Matrix of predicted response values, one in each row.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.QResiduals">
            <summary>
            Calculates the Q residuals for in sample in the model. The Q residual 
            for a given sample is the distance between the sample and its projection
            in the subspace of the model.
            </summary>
            <returns>Vector of Q residuals. The ith element of vector is the residual
            for the ith sample.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2.HotellingsT2">
            <summary>
            Calculaties Hotelling's T2 statistic for each sample. T2 can be viewed as the 
            squared distance from a samples projection into the subspace to the centroid
            of the subspace, or, more simply, the variation of the sample point within
            the model.
            </summary>
            <returns>Vector of T2 statistics for the samples. The ith element of the
            T2 vector is the T2 statistic for the ith sample.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS2Anova">
            <summary>
            Class PLS2Anova performs a standard ANalysis Of VAriance (ANOVA) for 
            a Partial Least Squares (PLS) regression model.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2Anova.#ctor(CenterSpace.NMath.Stats.PLS2)">
            <summary>
            Constructs a PLS2Anova instance for the given PLS2 object.
            </summary>
            <param name="pls">Partial least squares object.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2Anova.SumOfSquaresTotal">
            <summary>
            Returns the total sum of squares for the model. This is the sum of the
            squared deviations from the mean of the elements of the response matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2Anova.SumOfSquaresResiduals">
            <summary>
            Gets the sum of squares for the residuals. This is the sum of the squared
            differences between the response values and the responses predicted
            by the regression model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2Anova.Residuals">
            <summary>
            Gets the matrix of residuals. This is the matrix of differences
            between the given response values and the response values 
            predicted by the regression model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2Anova.MeanSqrErrorPrediction">
            <summary>
            Gets the mean square error for prediction. This is the
            residual sum of squares divided by the number of samples.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2Anova.RootMeanSqrErrorPrediction">
            <summary>
            Gets the root mean square error for prediction. This is the
            square root of the mean square error for prediction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2Anova.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom for the data. This is
            <code>number of samples - number of components - 1</code>
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2Anova.StandardError">
            <summary>
            Gets the standard error for the model. This is the square root of
            the residual sum of squares divided by the degrees of freedom for 
            the model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2Anova.CoefficientOfDetermination">
            <summary>
            Gets the R squared value. Also, called the coefficient of 
            determination.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2Anova.Clone">
            <summary>
            Creates a deep copy of this PLS2Anova.
            </summary>
            <returns>A deep copy of this PLS2Anova.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2Anova.GetResiduals(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.IPLS2Calc)">
            <summary>
            Gets the residuals for the given data using the given calculator.
            </summary>
            <param name="X">Matrix of predictive variable values.</param>
            <param name="Y">Matrix of response variable values.</param>
            <param name="calculator">Calculator to use to predict
            response variable values.</param>
            <returns>Matrix of residuals, the difference between the predicted
            and actual response variables.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2Anova.GetSumOfSquaresResiduals(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Computes the residual sum of squares.
            </summary>
            <param name="residuals">Matrix of residuals.</param>
            <returns>Residual sum of squares.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS2CrossValidation">
            <summary>
            Class PLS2CrossValidation performs an evaluation of a PLS (Partial Least
            Squares) model.
            </summary>
            <remarks>
            Evaluation consists of dividing the data into two
            subsets - a training subset and a testing subset. A PLS calculation
            is performed on the the training subset and the resulting model is
            used to predict the values of the dependent variables in the testing
            set. The mean square error between the actual and predicted dependent
            values is then calculated. Usually, the data is divided up into several
            training and testing subsets and calculations are done on each of these.
            In this case the average mean square error over each PLS calculation
            is reported (the individual mean square errors are available as well).
            <p/>
            The subsets to use in the cross validation are specifed by providing 
            an implementation of the ICrossValidationSubsets interface. Classes
            that implement this interface generate training and testing subsets 
            from PLS data.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidation.#ctor">
            <summary>
            Default constructor. Constructs a PLS2CrossValidation instance that uses 
            the "leave one out" cross validation.
            <see cref="T:CenterSpace.NMath.Stats.LeaveOneOutSubsets"/>
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidation.#ctor(CenterSpace.NMath.Stats.ICrossValidationSubsets)">
            <summary>
            Constructs a PLS2CrossValidation instance which uses the given subset 
            generator and the Nipals algorithm.
            </summary>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
            <see cref="T:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm"/>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidation.#ctor(CenterSpace.NMath.Stats.IPLS2Calc,CenterSpace.NMath.Stats.ICrossValidationSubsets)">
            <summary>
            Constructs a PLS2CrossValidation instance which uses the given PLS calculator
            and subset generator.
            </summary>
            <param name="calculator">Instance of a class implementing the IPLS2Calc
            interface. Used to perform the PLS calculations during cross validation.</param>
            <param name="subsetGenerator">Implementation of the ICrossValidationSubsets
            interface that will be used to generate the training and testing subsets.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidation.Message">
            <summary>
            Gets any message that may have been generated by the computation. For 
            example, if the calculation is unsuccessful, the message indicates the
            reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidation.Results">
            <summary>
            Gets the results of the cross validation for each training/testing
            subsets pair.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidation.AverageMeanSqrError">
            <summary>
            Gets the average of the mean square errors for each training/testing
            subsets pair.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidation.Calculator">
            <summary>
            Gets and sets the PLS2 calculator to use for PLS2 calculations.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidation.SubsetGenerator">
            <summary>
            Gets and sets the subset generator to use to generate testing
            and training subsets.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidation.IsGood">
            <summary>
            Whether all the PLS2 calculations were successful.
            </summary>
            <remarks>
            If one or more calculations failed, false is returned. The results 
            may be examined to determine which calculations failed.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidation.Clone">
            <summary>
            Creates a deep copy of this PLS2CrossValidation.
            </summary>
            <returns>A deep copy of this PLS2CrossValidation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidation.DoCrossValidation(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Perform cross validation on the given data using the existing
            calculator and subset generator.
            </summary>
            <param name="X">Predictor data. Matrix is number of samples rows by number
            of independent variables columns.</param>
            <param name="Y">Response data. Matrix is number of samples rows by number
            of dependent variables columns.</param>
            <param name="numComponents">Number of components (a.k.a. latent vectors) to
            use in the PLS calculation.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidation.DoCrossValidation(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.IPLS2Calc,System.Int32)">
            <summary>
            Performs cross validation on the given data using the given calculator and 
            number of components.
            </summary>
            <param name="X">Predictor data. Matrix is number of samples rows by number
            of independent variables columns.</param>
            <param name="Y">Response data. Matrix is number of samples rows by number
            of dependent variables columns.</param>
            <param name="calculator">PLS2 calculator.</param>
            <param name="numComponents">Subset generator to generate the training and 
            testing subsets.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS2CrossValidationData">
            <summary>
            Class PLS2CrossValidationData divides Partial Least Squares (PLS) data
            into training and testing subsets.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationData.#ctor">
            <summary>
            Constructs a PLS2CrossValidationData instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationData.#ctor(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Constructs a PLS2CrossValidationData instance from the given PLS data
            and testing subset. The training subset will be the data not contained
            in the testing subset.
            </summary>
            <param name="predictorData">Predictor PLS data.</param>
            <param name="responseData">Response PLS data.</param>
            <param name="testingSubset">Subset specifying the indices of the data rows
            to used as the testing data. The remaining rows will be used as the training
            data.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationData.NumTestingSamples">
            <summary>
            Gets the number of samples that will be used for testing.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationData.NumTrainingSamples">
            <summary>
            Gets the number of samples that will be used for training.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationData.ResponseTrainingSet">
            <summary>
            Gets and sets the matrix of response variable values comprising the 
            training set.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationData.PredictorTrainingSet">
            <summary>
            Gets and sets the matrix of predictor variable values comprising 
            the training set.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationData.ResponseTestingSet">
            <summary>
            Gets and sets the matrix of response variable values comprising the 
            testing set.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationData.PredictorTestingSet">
            <summary>
            Gets and sets the matrix of predictor variable values comprising the 
            testing set.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationData.Clone">
            <summary>
            Creates a deep copy of this PLS2CrossValidationData.
            </summary>
            <returns>A deep copy of this PLS2CrossValidationData.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationData.SetData(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Sets the cross validation data according the given PLS data and testing 
            subset. The training subset will be the data not contained in the 
            testing subset.
            </summary>
            <param name="predictorData">Predictor variable values.</param>
            <param name="responseData">Response variable values.</param>
            <param name="testingSubset">Subset specifying the indices of the data rows
            to used as the testing data. The remaining rows will be used as the training
            data.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationData.SetData(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.Subset,System.Boolean)">
            <summary>
            Sets the cross validation data according the given PLS data and testing 
            subset. The training subset will be the data not contained in the 
            testing subset.
            </summary>
            <param name="predictorData">Predictor variable values.</param>
            <param name="responseData">Response variable values.</param>
            <param name="testingSubset">Subset specifying the indices of the data rows
            to used as the testing data. The remaining rows will be used as the training
            data.</param>
            <param name="scaleData">If true variables are scaled to have unit variance
            (divided by their standard deviation).</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationData.CheckMatrixSizes(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Resizes the instance matrices, if needed, to accept the indicated data.
            </summary>
            <param name="yData">Dependent PLS data.</param>
            <param name="xData">Independent PLS data.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS2CrossValidationResult">
            <summary>
            Class PLS2CrossValidationResult performs a Partial Least Squares (PLS)
            cross validation calculation.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationResult.#ctor(CenterSpace.NMath.Stats.PLS2CrossValidationData,CenterSpace.NMath.Stats.IPLS2Calc,System.Int32)">
            <summary>
            Constructs a PLS2CrossValidationResult instance from the given data, partial
            least squares calculation object, and number of components (aka latent
            vector).
            </summary>
            <param name="data">The cross validation data containing the testing 
            and training data.</param>
            <param name="calculator">The partial least squares algorithm to use.</param>
            <param name="numComponents">The number of components or latent vectors
            to use in performing the partial least squares calculation.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationResult.CrossValidationData">
            <summary>
            Gets the cross validation data used for this result.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationResult.MeanSqrError">
            <summary>
            Gets the mean square error for this cross validation result. This
            is the mean squared error between the actual dependent data values
            and those predicted by the model constructed from the training data.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationResult.IsGood">
            <summary>
            Whether the calculation was successful.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2CrossValidationResult.Message">
            <summary>
            Gets any message that may have been generated by the calculation. For
            example, if the calculation is unsuccessful, the message indicates the
            reason.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2CrossValidationResult.Clone">
            <summary>
            Creates a deep copy of this PLS2CrossValidationResult.
            </summary>
            <returns>A deep copy of this PLS2CrossValidationResult.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm">
             <summary>
             Class PLS2NipalsAlgorithm encapsulates the Nonlinear Iterative PArtial Least
             Squares (NIPALS) algorithm for computing partial least squares regression
             components.
             </summary>
             <remarks>
             During the calculation the following model for PredictorMatrix (independent
             variable values) is is formed:
             <code>PredictorMatrix = TP' + Xg</code>
             where <c>g</c> is the number of components specified for the model.
             <c>T</c> is called the <I>scores</I> matrix (the columns of <c>T</c>
             are the scores), and <c>P</c> is called the <I>loadings</I> matrix. The
             matrix <c>Xg</c> is called the <I>residual</I> matrix for <c>PredictorMatrix</c>.
             A corresponding model for <c>ResponseMatrix</c> (dependent variable values) is 
             formed:
             <code>ResponseMatrix = UQ' + Yg</code>
             <c>U</c> is the scores matrix for <c>ResponseMatrix</c>, <c>Q</c> the loading 
             matrix for <c>ResponseMatrix</c>, and <c>Yg</c> is the residual matrix for 
             <c>ResponseMatrix</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.#ctor">
            <summary>
            Constructs a PLS2NipalsAlgorithm instance;
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.IsGood">
            <summary>
            Whether the most recent calculation was successful.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.Message">
            <summary>
            Gets any message that may have been generated by the algorithm. For example,
            if the calculation is unsuccessful, the message indicates the reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.PredictorMean">
            <summary>
            Gets the vector of means for the predictor variables.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.ResponseMean">
            <summary>
            Gets the vector of means for the response variables.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.Coefficients">
            <summary>
            Gets the regression coefficients matrix, <c>B</c>, for the PLS2 calculation.
            <c>B</c> satisifies the relationship
            <code>ResponseVector = XB + E.
            </code>
            where <c>X</c> and <c>ResponseVector</c> are respectively, the centered 
            independent and dependent variables values, and <c>E</c>E is a noise term 
            for the model.
            </summary>
            <remarks>
            The coeffient matrix, <c>B</c>, can be used for prediction as follows:
            <para>
            Let <c>yhat(z)</c> be the predicted value for the independet variable 
            value <c>z</c>, <c>xbar</c> the mean of the PredictorMatrix variables and 
            <c>ybar</c> the mean of ResponseVector variables. Then
            <code>yhat(z) = ybar + (z - xbar)B.</code>
            </para>
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.PredictorScores">
            <summary>
            Gets the scores matrix for PredictorMatrix.
            </summary>
            <remarks>The scores matrix is described in the class summary.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.PredictorLoadings">
            <summary>
            Gets the loadings matrix for PredictorMatrix. 
            </summary>
            <remarks>The loadings matrix is described in the class summary.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.PredictorWeights">
            <summary>
            Gets the matrix of weights for the predictors.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.PredictorResiduals">
            <summary>
            Gets the predictor residuals matrix.
            </summary>
            <remarks>The predictor residuals matrix is described in the class summary.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.ResponseScores">
            <summary>
            Gets the response scores matrix. 
            </summary>
            <remarks>The response scores matrix is described in the class summary.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.ResponseLoadings">
            <summary>
            Gets the response loadings matrix.     
            </summary>
            <remarks>The response loadings matrix is described in the class summary.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.ResponseWeights">
            <summary>
            Gets the matrix of weights for the responses.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.ResponseResiduals">
            <summary>
            Gets the response residuals matrix.    
            </summary>
            <remarks>The response residuals matrix is described in the class summary.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.MaxIterations">
            <summary>
            Gets or sets the maximum number of iterations.
            </summary>
            <remarks>
            During each iteration of the NIPALS algorithm the dominant eigenvalue
            of the matrix 
            <code>(Xj'Yj)(Xj'yj)'</code>
            is computed using the power method. This property controls the maximum
            number of iterations to perform in computing the eigenvector.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.Calculate(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Calculates the PLS2 for the given predictor and response matrices 
            and the given number of components.
            </summary>
            <param name="X"><c>n</c> case by <c>p</c> variables predictor matrix.</param>
            <param name="Y"><c>n</c> case by <c>m</c> variables response matrix.</param>
            <param name="numComponents">Number of components (or eigenvectors
            to use. Must be less than <c>p</c> - the number of predictory variables.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.Clone">
            <summary>
            Creates a deep copy of this PLS2NipalsAlgorithm.
            </summary>
            <returns>A deep copy of this PLS2NipalsAlgorithm.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.Predict(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Predicts the response for the given predictor value.
            </summary>
            <param name="z">The predictor value.</param>
            <returns>The predicted response.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.Predict(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Predicts the responses for a set of predictor values.
            </summary>
            <param name="X">Matrix of predictor values, one in each row.</param>
            <returns>Matrix of predicted response values, one in each row.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2NipalsAlgorithm.NormSqr(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the squared norm of the difference of the two vectors, i.e.
            the distance squared.
            </summary>
            <param name="v">First vector.</param>
            <param name="w">Second vector.</param>
            <returns></returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm">
             <summary>
             Class PLS2SimplsAlgorithm encapsulates the Straightforward IMplementation
             of Partial Least Squares, or SIMPLS, algorithm (de Jong, 1993) for
             computing partial least squares regression components.
             </summary>
             <remarks>The SIMPLS is used to find a predictive linear model of the form
             <c>Y = XB</c>, where <c>Y</c> is a matrix of response variables, <c>X</c>
             is a matrix of predictor variables, and <c>B</c> is the matrix of regression
             coefficients. This is achieved by compressing the predictor data matrix 
             <code>X = [x1, x2,..., xp]</code> that contains the <c>p</c> values of <c>n</c>
             samples, into a set of <c>c</c> latent variable or factor scores 
             <code>T = [t1, t2,...,tc]</code>
             <para>
             These factor scores are then used to fit a set of <c>n</c> observations to <c>m</c>
             response variables 
             <code>Y = [y1, y2,...,ym]</code>
             </para>
             <para>
             The relationship between the <c>X</c> and <c>T</c> is <c>T = XR</c>, where <c>R</c>
             is the matrix of predictor weights. 
             Factor scores <c>U</c> and weights <c>Q</c> for the response variable <c>Y</c>
             are also computed and satisfy <c>U = Y0Q</c>, where <c>Y0</c> is the matrix of 
             centered response data.
             </para>
             <para>
             The algorithm requires the computation of a dominant eigenvector at each iteration.
             The iterative Power Method is used to calculate this eigenvector and the maximum 
             number of iterations and convergance tolerance may be specified for instances of 
             this class through either through the contructor or properties.
             </para>
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.#ctor">
            <summary>
            Constructs an PLS2SimplsAlgorithm instance. The maximum number of iterations and
            convergence tolerance used in the power method to compute the dominant eigenvector
            at each iteration of the SIMPLS algorithm are set to their default values.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs an instance of the PLS2SimplsAlgorithm class with the specified
            values for the maximum number of iterations and tolerance to be used in the
            power method algorithm used for computing dominant eigenvectors.
            </summary>
            <remarks>
            The power method converges if changes in the normalized eigenvector, with 
            respect to the infinity norm, is less than the specified tolerance.
            </remarks>
            <param name="maxIterations">Maximum number of iterations.</param>
            <param name="tolerance">Tolerance.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.DefaultMaxPowerIteration">
            <summary>
            Gets and sets the default value for the maximum number of iterations 
            to be performed when use the power method for computing dominant
            eigenvectors and eigenvalues needed by the SIMPLS algorithm. 
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.DefaultPowerMethodTolerance">
            <summary>
            Gets and sets the default value for the tolerance used to determine 
            convergence of the power method for computing dominant eigenvectors 
            and eigenvalues needed by the SIMPLS algorithm. 
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.PredictorWeights">
            <summary>
            Gets the matrix of predictor weights.
            </summary>
            <remarks>The predictor weights matrix is described in the class summary.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.PredictorScores">
            <summary>
            Gets the matrix of predictor scores.
            </summary>
            <remarks>The predictor scores matrix is described in the class summary.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.OrthogonalLoadings">
            <summary>
            Gets the matrix of orthogonal loadings, the basis for the predictor 
            loadings matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.IsGood">
            <summary>
            Whether the most recent calculation was successful.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.Message">
            <summary>
            Gets any message that may have been generated by the algorithm. For example,
            if the calculation is unsuccessful, the message indicates the
            reason.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.PredictorMean">
            <summary>
            Gets the vector of means for the predictor variables.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.ResponseMean">
            <summary>
            Gets the vector of means for the response variables.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.Coefficients">
            <summary>
            Gets the regression coefficients matrix, <c>B</c>, for the PLS2 calculation.
            <c>B</c> satisifies the relationship
            <code>ResponseVector = XB + E</code>
            where <c>X</c> and ResponseVector are, respectively, the centered independent
            and dependent variables values, and <c>E</c> is a noise term for the model.
            </summary>
            <remarks>
            The coeffient matrix, <c>B</c>, can be used for prediction as follows:
            <para>
            Let <c>yhat(z)</c> be the predicted value for the independet variable 
            value <c>z</c>, <c>xbar</c> the mean of the PredictorMatrix variables and 
            <c>ybar</c> the mean of ResponseVector variables. Then
            <code>yhat(z) = ybar + (z - xbar)B</code>
            </para>
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.PredictorLoadings">
            <summary>
            Gets the matrix of predictor loadings. The matrix of predictor 
            loadings, <c>P</c>, is defined by
            <code>P = X'T</code>
            where <c>X'</c> is the transpose of the predictor matrix and <c>T</c>
            is the predictor score matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.ResponseLoadings">
            <summary>
            Gets the matrix of response loadings. The matrix of response 
            loadings, <c>Q</c>, is defined by
            <code>Q = Y'T</code>
            where <c>Y'</c> is the transpose of the response matrix and <c>T</c>
            is the predictor score matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.ResponseScores">
            <summary>
            Gets the matrix of response scores.
            </summary>
            <remarks>The response scores matrix is described in the class summary.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.MaxIterations">
            <summary>
            Gets and sets the maximum number of iterations to be performed when using
            the iterative power method to find dominant eigenvectors.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.Tolerance">
            <summary>
            Gets and sets the tolerance to be used in the iterative power method
            that is used to compute dominant eigenvectors. The power method 
            converges if changes in the normalized eigenvector, with respect to
            the infinity norm, is less than this specified tolerance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.Calculate(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
            <summary>
            Calculates the PLS2 for the given predictor and response matrices 
            and the given number of components.
            </summary>
            <param name="X"><c>n</c> case by <c>p</c> variables predictor matrix.</param>
            <param name="Y"><c>n</c> case by <c>m</c> variables response matrix.</param>
            <param name="numComponents">Number of components (or eigenvectors)
            to use. Must be less than the number of predictory variables, <c>p</c>.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.Clone">
            <summary>
            Creates a deep copy of this PLS2SimplsAlgorithm.
            </summary>
            <returns>A deep copy of this PLS2SimplsAlgorithm.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.Predict(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Predicts the response for the given predictor value.
            </summary>
            <param name="z">The predictor value.</param>
            <returns>The predicted response.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PLS2SimplsAlgorithm.Predict(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Predicts the responses for a set of predictor values.
            </summary>
            <param name="X">Matrix of predictor values, one in each row.</param>
            <returns>Matrix of predicted response values, one in each row.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.PoissonDistribution">
            <summary>
            Class PoissonDistribution represents a poisson distribution with a specified lambda, which is
            both the mean and the variance of the distribution. The poisson distribution a discrete
            distribution representing the probability of obtaining exactly <c>n</c> successes in
            <c>N</c> trials. 
            </summary>
            <remarks>
            The Poisson Distribution is often used as a model for the number of
            events in a specific time period. The distribution function for the Poisson distribution is:
            <code>f(x) = exp(-1*lambda) lambda^x / x!</code>
            Poisson (1837) showed that the Poisson distribution is the limiting case of a binomial
            distribution where <c>N</c> approaches infinity and <c>p</c> goes to zero while
            <c>Np = lambda</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PoissonDistribution.#ctor(System.Double)">
            <summary>
            Constructs a PoissonDistribution with the specified lambda, which is both the mean
            and the variance of the distribution.
            </summary>
            <param name="lambda">The lambda parameter.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if lambda is less than or
            equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PoissonDistribution.Mean">
            <summary>
            Gets and sets the mean of the distribution.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the mean
            is less than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PoissonDistribution.Variance">
            <summary>
            Gets and sets the variance of the distribution.
            </summary>
            <remarks>The variance of the distribution is the standard deviation squared.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PoissonDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
            <remarks>
            The skewness is the third central moment divided by the cube of 
            the standard deviation.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.PoissonDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
            <remarks>
            The kurtosis is the fourth centeral moment divided by the
            fouth power of the standard deviation normalized so that
            the kurtosis if the normal distribution is zero. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PoissonDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PoissonDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative distribution function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative distribution function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative distribution function at a point <c>x</c> is the
            probability that the value of a random variable having this Poisson distribution is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PoissonDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative distribution function evaluated at a given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative distribution function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If <c>p</c> is greater than 1 or less than zero, returns <c>Double.NaN</c>
            (Not a Number).</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PoissonDistribution.Clone">
            <summary>
            Creates a deep copy of this PoissonDistribution.
            </summary>
            <returns>A deep copy of this PoissonDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.PoissonDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.ProbabilityDistribution">
            <summary>
            Class ProbabilityDistribution is the abstract base class for classes that 
            represent distributions of random variables.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ProbabilityDistribution.GAMMA_MAX_ITER">
            <summary>
            Maximum number of iterations to execute while computing the various
            forms of the gamma function.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.ProbabilityDistribution.MACHINE_EPSILON">
            <summary>
            A small number sufficeintly close to zero.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProbabilityDistribution.CDF(System.Double)">
            <summary>
            Computes the cumulative distribution function at a given point.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative distribution function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProbabilityDistribution.InverseCDF(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function at a
            given probability.
            </summary>
            <param name="p">A probability.</param>
            <returns>The value <c>x</c> such that <c>CDF(x) = p</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProbabilityDistribution.PDF(System.Double)">
            <summary>
            Computes the probability density function at a given point.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probablility density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProbabilityDistribution.InverseCdfUsingBracket(System.Double,System.Double,System.Double)">
            <summary>
            Uses a bracketing method to evaluate the inverse of cumulative 
            distribution functions.
            </summary>
            <param name="p">A probability.</param>
            <param name="lowerBound">A lower bound for the inverse value.</param>
            <param name="upperBound">An upper bound for the inverse value.</param>
            <returns>The value <c>x</c> such that <c>CDF(x) = p</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProbabilityDistribution.InverseDiscreteCdfUsingBracket(System.Double,System.Int32,System.Int32)">
            <summary>
            Uses a bracketing method to evaluate the inverse of cumulative 
            distribution functions for discrete distributions.
            </summary>
            <param name="p">A probability.</param>
            <param name="lowerBound">A lower bound for the inverse value.</param>
            <param name="upperBound">An upper bound for the inverse value.</param>
            <returns>The value <c>x</c> such that <c>CDF(x) = p</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProbabilityDistribution.Clone">
            <summary>
            Creates a deep copy of this distribution.
            </summary>
            <returns>A deep copy of this distribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.ProbabilityDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.QRRegressionCalculation">
            <summary>
            Class QRRegressionCalculation computes linear regression parameters by 
            the method of least squares using a QR decomposition.
            </summary>
            <remarks>Class QRRegressionCalculation finds the minimal norm solution
            to the overdetermined linear system:
            <code>Ax = b</code>
            That is, this class finds the vector <c>x</c> that minimizes the 2-norm
            of the residual vector <c>Ax - b</c>. Prerequisites on the matrix 
            <c>A</c> are that it has more rows than columns, and is of full
            rank.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.#ctor">
            <summary>
            Constrcts a QRRegressionCalculation instance with all sizes equal to 
            zero.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs a QRRegressionCalculation instance from the given matrix.
            </summary>
            <param name="A">A matrix</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Double)">
            <summary>
            Constructs a QRRegressionCalculation instance from the given matrix. The
            specified tolerance is used in computing the numerical rank of
            the matrix.
            </summary>
            <param name="A">A matrix.</param>
            <param name="tolerance">Tolerance for computing the numerical
            rank of the matrix <c>A</c>. If <c>A = QR</c> is the
            QR factorization of <c>A</c>, then elements on the main
            diagonal of <c>R</c> are considered to be zero if their
            absolute value is less than or equal to <c>tolerance</c>.
            </param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.QRRegressionCalculation.Rows">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.QRRegressionCalculation.Cols">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.QRRegressionCalculation.RankAvailable">
            <summary>
            Returns the rank if it was calculated as a byproduct of the parameter
            calculation.
            </summary>
            <remarks>
            For instances of QRRegressionCalculation, this is always <c>true</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.QRRegressionCalculation.Rank">
            <summary>
            Gets the numerical rank of the matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.QRRegressionCalculation.IsGood">
            <summary>
            Returns <c>true</c> if the QR decomposition may be used to solve least 
            squares problems; otherwise <c>false</c>. 
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.QRRegressionCalculation.Tolerance">
            <summary>
            Gets and sets the tolerance used for computing the numerical rank of
            the regression matrix.
            </summary>
            <remarks>If <c>A = QR</c> is the QR factorization of <c>A</c>, then
            elements on the main diagonal of <c>R</c> are considered to be zero
            if their absolute value is less than or equal to <c>Tolerance</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.QRRegressionCalculation.XTXInvAvailable">
            <summary>
            Gets a boolean value indicating whether or not the matrix formed by taking
            the inverse of the product of the transpose of the regression matrix
            with itself is available. 
            </summary>
            <remarks>If <c>X</c> is the regression matrix and <c>'</c>
            denotes matrix transposition, then this property is <c>true</c> if this
            calculation object can return the inverse of the matrix <c>X'X</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.QRRegressionCalculation.XTXInv">
            <summary>
            Gets the matrix formed by taking the inverse of the product of the 
            transpose of the regression matrix with itself, if available.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if this object does not
            implmenent this calculation. This may be checked with the
            <c>XTXInvAvailable</c> property.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.Factor(CenterSpace.NMath.Core.DoubleMatrix,System.Double,System.Boolean)">
            <summary>
            Factors a given matrix so that it may be used to solve least squares problems.
            The specified tolerance is used in computing the numerical rank of the matrix.
            </summary>
            <param name="A">A matrix.</param>
            <param name="tolerance">
            Tolerance for computing the numerical rank of the matrix <c>A</c>.
            If <c>A = QR</c> is the QR factorization of <c>A</c>, then elements
            on the main diagonal of <c>R</c> are considered to be zero if their
            absolute value is less than or equal to <c>tolerance</c>.
            </param>
            <param name="dataCleansed">If true, the matrix A is guaranteed to contain no NaN or Infinity values.</param>
            <remarks>For the QR least squares method to succeed, the matrix
            <c>A</c> must have full rank.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.Factor(CenterSpace.NMath.Core.DoubleMatrix,System.Double)">
            <summary>
            Factors a given matrix so that it may be used to solve least squares problems.
            The specified tolerance is used in computing the numerical rank of the matrix.
            </summary>
            <param name="A">A matrix.</param>
            <param name="tolerance">
            Tolerance for computing the numerical rank of the matrix <c>A</c>.
            If <c>A = QR</c> is the QR factorization of <c>A</c>, then elements
            on the main diagonal of <c>R</c> are considered to be zero if their
            absolute value is less than or equal to <c>tolerance</c>.
            </param>
            <remarks>For the QR least squares method to succeed, the matrix
            <c>A</c> must have full rank.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.Factor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Factors a given matrix so that it may be used to solve least squares problems.
            </summary>
            <param name="A">A matrix.</param>
            <remarks>For the QR least squares method to succeed, the matrix
            <c>A</c> must have full rank.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.Solve(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the solution to the least squares problem <c>Ax = b</c>.
            </summary>
            <param name="b">The right-hand side of the equation.</param>
            <returns>The solution <c>x</c> that minimizes the 2-norm of the 
            residual vector <c>Ax - b</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length
            of the vector <c>b</c> is not equal to the number of rows.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.ResidualVector(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes and returns the residual vector.
            </summary>
            <param name="b">The right-hand side of the least squares problem
            <c>Ax = b</c>.</param>
            <returns>The residual vector <c>Ax - b</c>, where
            <c>x</c> is the computed least squares solution to the 
            problem <c>Ax = b</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.ResidualNormSqr(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the 2-norm squared of the residual vector.
            </summary>
            <param name="b">The right-hand side of the least squares problem
            <c>Ax = b</c>.</param>
            <returns>The 2-norm squared of the residual vector <c>Ax - b</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.Clone">
            <summary>
            Creates a deep copy of this regression calculator instance.
            </summary>
            <returns>A deep copy of this regression calculator instance.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Calculates the parameters for the regression using a QR decomposition
            of the regression matrix to solve the least squares problem.
            </summary>
            <param name="regressionMatrix">A regression matrix.</param>
            <param name="observations">A vector of observations.</param>
            <param name="dataCleansed">If true, the regression matrix is guaranteed to contain no NaN or Infinity values.</param>
            <returns>The calculated model parameters.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length
            of the observation vector is not equal to the number of rows
            in the regression matrix.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.QRRegressionCalculation.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the parameters for the regression using a QR decomposition
            of the regression matrix to solve the least squares problem.
            </summary>
            <param name="regressionMatrix">A regression matrix.</param>
            <param name="observations">A vector of observations.</param>
            <returns>The calculated model parameters.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length
            of the observation vector is not equal to the number of rows
            in the regression matrix.</exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.RegressionBase">
            <summary>
            Base class for linear and logistic regression.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.isGood_">
            <summary>
            Is the regression good?
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.errorMessage_">
            <summary>
            Explains errors, if any.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.regressionData_">
            <summary>
            The full set of regression data.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.regressionMatrix_">
            <summary>
            A submatrix of the regression used in this regression
            model.
            regressionMatrx_ = regressionData_[regMatRowSlice_, regMatColSlice_]
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.regMatRowSlice_">
            <summary>
            regressionMatrx_ = regressionData_[regMatRowSlice_, regMatColSlice_]
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.regMatColSlice_">
            <summary>
            regressionMatrx_ = regressionData_[regMatRowSlice_, regMatColSlice_]
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.observationData_">
            <summary>
            Full set of observations.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.observations_">
            <summary>
            Subvector of the observation data used in the current regression model.
            observations_ = observationData_[regMatRowSlice_].
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.parameters_">
            <summary>
            Model paramters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.hasIntercept_">
            <summary>
            Does the model have an intercept parameter?
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.rowResizeIncrement_">
            <summary>
            Number of rows to add when adding observations (if needed).
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.RegressionBase.colResizeIncrement_">
            <summary>
            Number of columns to add when adding variables (if needed).
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.#ctor(CenterSpace.NMath.Stats.RegressionBase)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other">Another regression object.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.Parameters">
            <summary>
            Gets the computed model parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.RegressionMatrix">
            <summary>
            Gets the regression matrix.
            </summary>
            <remarks>
            The regression matrix is the predictor matrix (the matrix 
            of values of the independent variables in a regression model), 
            plus a column of leading ones, if the model contains an intercept
            parameter.
            <br/>
            If you modify the data in the regression matrix using this reference, 
            invoke the member function <c>RecalculateParameters()</c> to recalculate
            the parameters.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.PredictorMatrix">
            <summary>
            Gets the predictor matrix.
            </summary>
            <remarks>
            The predictor matrix is the matrix of values of the
            independent variables in a regression model. If the model 
            contains an intercept parameter, then the predictor matrix is
            obtained from the regression matrix by removing the leading 
            column of ones. If the model does not have an intercept parameter,
            then the predictor matrix is the same as the regression matrix.
            <br/>
            If you modify the data in the predictor matrix using this reference, 
            invoke the member function <c>RecalculateParameters()</c> to recalculate
            the parameters.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.Observations">
            <summary>
            Gets the vector of observations.
            </summary>
            <remarks>
            If you modify the data in the observation vector using this reference, 
            invoke the member function <c>RecalculateParameters()</c> to recalculate
            the parameters.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.NumberOfPredictors">
            <summary>
            Gets the number of predictors.
            </summary>
            <remarks>If the model contains an intercept parameter, then the
            number of predictors is equal to the number of parameters minus one.
            If the model does not contain an intercept parameter, then
            the number of predictors is equal to the number of parameters.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.NumberOfParameters">
            <summary>
            Gets the number of parameters in the model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.NumberOfObservations">
            <summary>
            Gets the number of observations.
            </summary>
            <remarks>
            This is the same as the number of rows in the regression matrix and the
            length of the observation vector.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.RowResizeIncrement">
            <summary>
            Gets and sets the amount by which the regression matrix is resized 
            if rows are added.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.ColumnResizeIncrement">
            <summary>
            Gets and sets the amount by which the regression matrix is resized 
            if columns are added.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.HasInterceptParameter">
            <summary>
            Returns <c>true</c> if the model has an intercept parameter; otherwise,
            <c>false</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.IsGood">
            <summary>
            Returns <c>true</c> if the model parameters were successfuly computed;
            otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.ParameterCalculationErrorMessage">
            <summary>
            Gets the error message associated with a failed parameter calculation.
            </summary>
            <remarks>If the <c>IsGood</c> property is <c>false</c>, then the 
            <c>ParameterCalculationErrorMessage</c> property contains any error 
            message produced by the regression calculation object.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.RegressionBase.Intercept">
            <summary>
            Gets the intercept. 
            </summary>
            <remarks>
            Returns <c>zero</c> if there is no intercept.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.RecalculateParameters">
            <summary>
            Recalculates the model parameters.
            </summary>
            <remarks>
            The <c>IsGood</c> property should be checked after calling this method
            to determine if the calculation was successful.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.AddPredictor(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Adds a predictor to the model, and recalculates the model parameters.
            </summary>
            <param name="predictorValues">A vector of predictor values.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length of the
            given vector is not equal to the number of rows in the regression matrix
            (also equal to length of the observation vector).</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.AddPredictors(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Adds predictors to the model, and recalculates the model parameters.
            </summary>
            <param name="predictorValues">Matrix of predictor values. Each column of
            the matrix is a set of predictor values.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of rows in
            the given matrix is not equal to the number of rows in the regression matrix
            (also equal to length of the observation vector).</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.AddInterceptParameter">
            <summary>
            Adds an intercept parameter to the model  and recalculates the model parameters. 
            </summary>
            <remarks>
            If the model already has an intercept parameter, this function has no effect.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.RemovePredictor(System.Int32)">
            <summary>
            Removes the specified predictor from the model, and recalculates the
            model parameters.
            </summary>
            <param name="i">The index of the predictor to remove.</param>
            <remarks>Indexing starts at 0. If the model has an intercept parameter,
            removing the 0th predictor will <i>not</i> remove the intercept parameter.
            Instead, use the <c>RemoveInterceptParameter()</c> method to remove the
            intercept parameter.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">Thrown if the specified index
            is invalid.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.RemovePredictors(System.Int32,System.Int32)">
            <summary>
            Removes the specified predictors from the model, and recalculates the model 
            parameters.
            </summary>
            <param name="startIndex">The first predictor to remove.</param>
            <param name="numberToRemove">The total number of predictors to remove.</param>
            <remarks>Indexing starts at 0. If the model has an intercept parameter,
            removing the 0th predictor will <i>not</i> remove the intercept parameter.
            Instead, use the <c>RemoveInterceptParameter()</c> method to remove the
            intercept parameter.</remarks>
            <example>If <c>startIndex = 1</c> and <c>numberToRemove = 3</c>,
            then the second, third, and fourth predictors are removed.</example>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">Thrown if the specified index
            range is invalid.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.RemoveInterceptParameter">
            <summary>
            Removes the intercept parameter from the model, and recalculates the model parameters.
            </summary>
            <remarks>
            If the model does not have an intercept parameter, this method has no effect.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.AddObservation(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Adds the given observation to the model, and recalculates the model parameters. 
            </summary>
            <param name="observedPredictorValues">A vector of predictor values.</param>
            <param name="observation">An observation.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length of the
            predictor vector is not equal to the number of predictors in the model,
            as indicated by the <c>NumberOfPredictors</c> property.</exception>
            <remarks>If the model has an intercept parameter, do not include the leading
            one in the predictor vector. It is accounted for in the model.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.AddObservations(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Adds the given observations to the model, and recalculates the model parameters.
            </summary>
            <param name="observedPredictorValues">A matrix of predictor values where each row
            constitutes a set of values for the predictor variables.</param>
            <param name="observations">A vector of observed values.</param>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the number of columns in the
            predictor matrix is not equal to the number of predictors, or if the number of rows
            in the predictor matrix is not equal to the length of the given vector of
            observations.
            </exception>
            <remarks>If the model has an intercept parameter do not include the leading column
            of ones in the predictor matrix. It is accounted for in the model.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.RemoveObservation(System.Int32)">
            <summary>
            Removes the row at the indicated index from the predictor matrix and the 
            corresponding element from the observation vector, and recalculates the model
            parameters.
            </summary>
            <param name="row">The index of the row to remove (zero-based).</param>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">Thrown if the specifed row
            is out of range.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.RemoveObservations(System.Int32,System.Int32)">
            <summary>
            Removes the specified rows from the predictor matrix, and recalculates the model
            parameters.
            </summary>
            <param name="startRow">The index of the first row to remove (zero-based).</param>
            <param name="numberToRemove">The total number of rows to remove.</param>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">Thrown if the specified row index
            range is invalid.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.FirstColumnIsAllOnes(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Convienence method for determining if the first column of a matrix
            is all ones.
            </summary>
            <remarks>
            If the matrix in question is being used in a regression, this corresponds
            to whether or not the model has an intercept parameter.
            </remarks>
            <param name="A">A matrix.</param>
            <returns><c>True</c> if the first column of the given matrix contains all
            ones; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.FirstColumnIsAllOnes(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Determine if the vector is all 1's
            </summary>
            <param name="v">A vector.</param>
            <returns><c>true</c> if the vector is all 1's.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.RegressionBase.FirstColumnIsAllOnes(CenterSpace.NMath.Stats.DFNumericColumn)">
            <summary>
            Checks if the given numeric column contains all 1's
            </summary>
            <param name="c">A numeric column.</param>
            <returns><c>true</c> if all 1's.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TrustRegionParameterCalc">
            <summary>
            Parameter calculation for a logistic regression model. The parameters are
            computed to maximize the log likelihood function for the model, using
            a trust region optimization algorithm to compute the zeros of the first order
            partial derivaties of the log likelihood function. 
            The minimization is performed by an instance of the class 
            <c>CenterSpace.NMath.Analysis.TrustRegionMinimizer</c> and algorithms 
            parameters may be controlled through this object. It is accessible
            through the <c>Minimizer</c> class property, and a <c>TrustRegionParameterCalc</c>
            instace may be constructed with a give <c>TrustRegionMinimizer</c> object which
            has the desired properties.
            <see cref="T:CenterSpace.NMath.Analysis.TrustRegionMinimizer"/>
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TrustRegionParameterCalc.#ctor(CenterSpace.NMath.Analysis.TrustRegionMinimizer)">
            <summary>
            Construct a <c>TrustRegionParameterCalc</c> instance which uses
            the give <c>TrustRegionMinimizer</c> instance to calculate the
            parameters.
            <see cref="T:CenterSpace.NMath.Analysis.TrustRegionMinimizer"/>
            </summary>
            <param name="minimizer"><c>TrustRegionMinimizer</c> insance.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TrustRegionParameterCalc.#ctor">
            <summary>
            Construct a <c>TrustRegionParameterCalc</c> instance using default
            parameters for the trust region minimization algorithm.
            <see cref="T:CenterSpace.NMath.Analysis.TrustRegionMinimizer"/>
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TrustRegionParameterCalc.#ctor(System.Double)">
            <summary>
            Construct a <c>TrustRegionParameterCalc</c> instance using the
            given tolerance to determine convergence of the trust region
            minimization algorithm.
            <see cref="T:CenterSpace.NMath.Analysis.TrustRegionMinimizer"/>
            </summary>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TrustRegionParameterCalc.#ctor(System.Int32)">
            <summary>
            Construct a <c>TrustRegionParameterCalc</c> instance using the
            given maximum number of iterations to be performed by the trust region
            minimization algorithm.
            <see cref="T:CenterSpace.NMath.Analysis.TrustRegionMinimizer"/>
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TrustRegionParameterCalc.#ctor(System.Int32,System.Double)">
            <summary>
            Construct a <c>TrustRegionParameterCalc</c> instance using the
            given maximum number of iterations to be performed by the trust region
            minimization algorithm, and the given tolerance used to determine
            convergence.
            <see cref="T:CenterSpace.NMath.Analysis.TrustRegionMinimizer"/>
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TrustRegionParameterCalc.MaxIterations">
            <summary>
            Gets and sets the maximum number of iterations for the trust region
            minimization algorithm.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TrustRegionParameterCalc.Iterations">
            <summary>
            Gets the number of iterations performed by the most recent calculation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TrustRegionParameterCalc.Minimizer">
            <summary>
            Gets the <c>TrustRegionMinimizer</c> object used to calculate the 
            parameters.
            <see cref="T:CenterSpace.NMath.Analysis.TrustRegionMinimizer"/>
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TrustRegionParameterCalc.InformationMatrix">
            <summary>
            The information matrix is the matrix of negated second partial derivations of
            the log likelihood function. It is the inverse of the variance/covariance
            matrix for the parameter estimates.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TrustRegionParameterCalc.Converged">
            <summary>
            Gets a boolean indicating convergence of the trust region minimization
            algorithm.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TrustRegionParameterCalc.IsGood">
            <summary>
            Gets a boolean indicating success of failure of the calculation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TrustRegionParameterCalc.CalculationMessage">
            <summary>
            If the algorithm succeeds the string will be empty. Otherwise it will
            contain information about the failure.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TrustRegionParameterCalc.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculate the parameters for the logistic model.
            </summary>
            <param name="X">Matrix of subject data. Rows correspond to 
            subjects.</param>
            <param name="observations">Vector of zeros and ones containing the 
            observed values of the outcomes. A zero entry
            indicates a negative outcome and a one indicates a positive outcome.
            </param>
            <returns>The calculated model parameters.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TrustRegionParameterCalc.Clone">
            <summary>
            Creates a deep copy of self.
            </summary>
            <returns>A deep copy of self.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.LikelihoodEquations">
            <summary>
            Function to be minimized by the TrustRegionMinimizer - the partials
            of the log-likelihood function.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaBase">
            <summary>
            Base class for both balanced and unbalanced two way ANOVA.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaBase.observations_">
            <summary>
            The observation vector for the regression used to compute the ANVOA.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaBase.cells_">
            <summary>
            The ANOVA data broken up into cells. 
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaBase.factorA_">
            <summary>
            One of the factors in the ANOVA
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaBase.factorB_">
            <summary>
            The other factor in the ANOVA.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a TwoWayAnova instance from data in the given data frame.
            </summary>
            <param name="data">A data frame.</param>
            <param name="factorAColIndex">The index of the column for Factor A.</param>
            <param name="factorBColIndex">The index of the column for Factor B.</param>
            <param name="dataColIndex">The index of the data column. The indicated column
            must be numeric and cannot contain missing values.</param>
            <remarks>
            Factors are constructed from the factor columns using the DataFrame method
            <c>GetFactor()</c>, which creates a sorted array of the unique values. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the data column contains missing values (NaNs) or the data cannot
            be converted into numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.#ctor(CenterSpace.NMath.Stats.TwoWayAnovaBase)">
            <summary>
            Copy constructor.
            </summary>
            
            <param name="other">Anova to copy.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.#ctor">
            <summary>
            No argument contructor. Used primarily for serialization.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaBase.GrandMean">
            <summary>
            Gets the grand mean.
            </summary>
            <remarks>
            The grand mean is the mean of all the data.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaBase.RegressionInterceptParameter">
            <summary>
            Gets the intercept parameter from the linear regression that was used to 
            compute the ANOVA.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.GetMeanForCell(System.String,System.Object,System.String,System.Object)">
            <summary>
            Returns the mean for the specified cell, as defined by the levels of
            the two factors in the ANOVA.
            </summary>
            <param name="factorAName">The name of the first factor.</param>
            <param name="factorALevel">The level for the first factor.</param>
            <param name="factorBName">The name of the second factor.</param>
            <param name="factorBLevel">The level for the second factor.</param>
            <returns>The mean for the data in the specified cell.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.GetCellData(System.String,System.Object,System.String,System.Object)">
            <summary>
            Returns all the data in a cell, as defined by the levels of the two factors
            in the ANOVA.
            </summary>
            <param name="factorAName">The name of the first factor.</param>
            <param name="factorALevel">The level for the first factor.</param>
            <param name="factorBName">The name of the second factor.</param>
            <param name="factorBLevel">The level for the second factor.</param>
            <returns>The data in the specified cell. A copy of the data is returned as
            a DFNumericColumn.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.GetMeanForFactorLevel(System.String,System.Object)">
            <summary>
            Returns the mean for the specified factor level.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <param name="factorLevel">The level of the factor.</param>
            <returns>The mean for the specified factor level.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.ComputeFactorSumsOfSquares(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Fill in the DoubleVector parameterSumsOfSquares_ with the sums of
            squares for the parameters used in the regression that is used to
            compute the ANOVA.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.ComputeFactorSumsOfSquares(CenterSpace.NMath.Stats.LinearRegression,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fill in the DoubleVector parameterSumsOfSquares_ with the sums of
            squares for the parameters used in the regression that is used to
            compute the ANOVA.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.MakeFactorParameters(CenterSpace.NMath.Stats.LinearRegression,CenterSpace.NMath.Core.DoubleVector,System.Int32,CenterSpace.NMath.Stats.Factor)">
            <summary>
            Create the array of AnovaRegressionFactorParam objects, one for each 
            regression dummy variable. The sums of squares for each of these
            parameters is assumed to have been computed are are stored in the 
            DoubleVector instance variable <c>parameterSumsOfSquares</c> with
            the parameters for factor A first, followed by the parameters for
            factor B and starting at the given index.
            </summary>
            <param name="lr">The linear regression for the ANOVA.</param>
            <param name="parameterSumsOfSquares">The sums of squares, one for
            each regression parameter, for the regression for the ANOVA.</param>
            <param name="sumOfSquaresIndex">Index of the starting point for the
            factor parameter sums of squares in the parameter <c>parameterSumsOfSquares</c></param>
            <param name="factor">The ANOVA factor associated with this regression parameter.</param>
            <returns>The array of AnovaRegressionFactorParam's</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.InterceptParameterSumOfSquares(CenterSpace.NMath.Core.DoubleMatrix,System.Double)">
            <summary>
            Compte the sum of squares associated with the regression's intercept parameter.
            </summary>
            <param name="regressionMatrix">The regression matrix for the ANOVA regression.
            Includes the intercept parameter (first column is all ones).</param>
            <param name="observationsMean">The mean of the observations in the regression.</param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.MakeInteractionParameters(CenterSpace.NMath.Stats.LinearRegression,CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Creates the array of AnovaRegressionInteractionParam objects using the 
            DoubleVector instance variable parameterSumsOfSquares_. The sums of 
            squares for the interaction parameters are assumed to begin at the 
            given index.
            </summary>
            
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaBase.MakeCellData(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Fills in the cell data for a two way ANOVA from the given data frame and
            column information.
            </summary>
            <param name="data">The ANOVA data.</param>
            <param name="factorAColIndex">Index into the data for the column containing
            factor A data.</param>
            <param name="factorBColIndex">Index into the data for the column containing
            factor B data.</param>
            <param name="dataColIndex">Index into the data for the column containing
            observed dependent data.</param>
            <param name="requireBalancedData">If true an exception is thrown if unbalanced data
            is detected (balanced == all cell have the same number of observations).</param>
            <returns><c>true</c> if the data is unbalanced.</returns>
            <exception cref="T:CenterSpace.NMath.Core.NMathException">Thrown if <c>requireBalancedData</c> is true and
            unbalanced data is detected.</exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaTypeI">
            <summary>
            Class for performing a Type I ANOVA on unbalanced data. See the description
            of the base class <c>TwoWayAnovaUnbalanced</c> for a description of
            the notation.
            
            Type I, also called "sequential" sum of squares:
            SS(A) for factor A.
            SS(B | A) for factor B.
            SS(AB | B, A) for interaction AB.
            This tests the main effect of factor A, followed by the main effect of 
            factor B after the main effect of A, followed by the interaction effect
            AB after the main effects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTypeI.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a TwoWayAnovaTypeI instance from data in the given data frame.
            </summary>
            <param name="data">A data frame.</param>
            <param name="factorAColIndex">The index of the column for Factor A.</param>
            <param name="factorBColIndex">The index of the column for Factor B.</param>
            <param name="dataColIndex">The index of the data column. The indicated column
            must be numeric and cannot contain missing values.</param>
            <param name="fullIncrementalSumOfSquares">If <c>true</c> sums of squares 
            will be computed for each regression parameter. If <c>false</c> sums of
            squares will be computed only for each regression factor. So, if factor
            A has m levels and factor B has n levels and <c>fullIncrementalSumOfSquares</c>
            is <c>true</c> (m - 1) + (n - 1) + (m - 1)*(n - 1) sums of squares will be
            computed - one for each dummy regression parameter. if <c>fullIncrementalSumOfSquares</c>
            is <c>false</c>, only 3 sums of squares will be computed - one for factor A,
            one for factor B, and one for the interaction.</param>
            <remarks>
            Factors are constructed from the factor columns using the DataFrame method
            <c>GetFactor()</c>, which creates a sorted array of the unique values. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the data column contains missing values (NaNs) or the data cannot
            be converted into numeric values.
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaTypeII">
            <summary>
            Class for performing a Type II ANOVA on unbalanced data. See the description
            of the base class <c>TwoWayAnovaUnbalanced</c> for a description of
            the notation.
            
            SS(A | B) for factor A.
            SS(B | A) for factor B.
            SS(AB | A, B) for interaction.
            This type tests for each main effect after the other main effect.
            Note that no significant interaction is assumed and you should look
            look at the test for interaction first (SS(AB | A, B)) and only if
            interaction after the main effects AB is not significant continue
            with the analysis for main effects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTypeII.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a TwoWayAnovaTypeI instance from data in the given data frame.
            </summary>
            <param name="data">A data frame.</param>
            <param name="factorAColIndex">The index of the column for Factor A.</param>
            <param name="factorBColIndex">The index of the column for Factor B.</param>
            <param name="dataColIndex">The index of the data column. The indicated column
            must be numeric and cannot contain missing values.</param>
            <param name="fullIncrementalSumOfSquares">If <c>true</c> sums of squares 
            will be computed for each regression parameter. If <c>false</c> sums of
            squares will be computed only for each regression factor. So, if factor
            A has m levels and factor B has n levels and <c>fullIncrementalSumOfSquares</c>
            is <c>true</c> (m - 1) + (n - 1) + (m - 1)*(n - 1) sums of squares will be
            computed - one for each dummy regression parameter. if <c>fullIncrementalSumOfSquares</c>
            is <c>false</c>, only 3 sums of squares will be computed - one for factor A,
            one for factor B, and one for the interaction.</param>
            <remarks>
            Factors are constructed from the factor columns using the DataFrame method
            <c>GetFactor()</c>, which creates a sorted array of the unique values. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the data column contains missing values (NaNs) or the data cannot
            be converted into numeric values.
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaTypeIII">
            <summary>
            Class for performing a Type III ANOVA on unbalanced data. See the description
            of the base class <c>TwoWayAnovaUnbalanced</c> for a description of
            the notation.
            
            SS(A | B, AB) for factor A.
            SS(B | A, AB) for factor B.
            SS(AB | A, B) for interaction.
            This type tests for the presence of a main effect after the other main effect and
            interaction. This approach is therefore valid in the presence of significant interactions.
            However, it is often not interesting to interpret a main effect if interactions are 
            present (generally speaking, if a significant interaction is present, the main effects 
            should not be further analysed).
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTypeIII.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a TwoWayAnovaTypeIII instance from data in the given data frame.
            </summary>
            <param name="data">A data frame.</param>
            <param name="factorAColIndex">The index of the column for Factor A.</param>
            <param name="factorBColIndex">The index of the column for Factor B.</param>
            <param name="dataColIndex">The index of the data column. The indicated column
            must be numeric and cannot contain missing values.</param>
            <param name="fullIncrementalSumOfSquares">If <c>true</c> sums of squares 
            will be computed for each regression parameter. If <c>false</c> sums of
            squares will be computed only for each regression factor. So, if factor
            A has m levels and factor B has n levels and <c>fullIncrementalSumOfSquares</c>
            is <c>true</c> (m - 1) + (n - 1) + (m - 1)*(n - 1) sums of squares will be
            computed - one for each dummy regression parameter. if <c>fullIncrementalSumOfSquares</c>
            is <c>false</c>, only 3 sums of squares will be computed - one for factor A,
            one for factor B, and one for the interaction.</param>
            <remarks>
            Factors are constructed from the factor columns using the DataFrame method
            <c>GetFactor()</c>, which creates a sorted array of the unique values. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the data column contains missing values (NaNs) or the data cannot
            be converted into numeric values.
            </exception>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced">
            <summary>
            Class <c>TwoWayAnovaUnbalanced</c> is the base class for performing a
            two way ANOVA when the number of observations in each cell is not the 
            same (an unbalanced design). In this case the main and interaction effects are 
            interdependent, and we must obtain the marginal sum of squares associated with 
            each factor after all the other factors have already been included in the model 
            (the marginal sum of squares for each variable equals the incremental sum
            of squares for that variable when it is entered into the equation last).
            In terms of a regression approach to ANOVA, the marginal sum of squares due
            to a factor is the sum of squares for the set of dummy variables associated
            with that factor when those dummy variables are entered into the model last,
            after all other dummy variables.
            
            Classes deriving from <c>TwoWayAnovaUnbalanced</c> provide the ordering of 
            dummy regression variables and use the base class to compute the resulting 
            regressions and sums of squares.
            </summary>
            <remarks>
            We will use the notion described by Scholer.
            http://goanna.cs.rmit.edu.au/~fscholer/anova.php"
            What follows is an excerpt.
            Consider a model that includes two factors A and B; there are therefore 
            two main effects, and an interaction, AB. The full model is represented 
            by SS(A, B, AB).
            Other models are represented similarly: SS(A, B) indicates the model 
            with no interaction, SS(B, AB) indicates the model that does not account 
            for effects from factor A, and so on.
            It is convenient to define incremental sums of squares to represent these differences. Let
            SS(AB | A, B) = SS(A, B, AB) - SS(A, B)
            SS(A | B, AB) = SS(A, B, AB) - SS(B, AB)
            SS(B | A, AB) = SS(A, B, AB) - SS(A, AB)
            SS(A | B)     = SS(A, B) - SS(B)
            SS(B | A)     = SS(A, B) - SS(A)
            The notation shows the incremental differences in sums of squares, 
            for example SS(AB | A, B) represents "the sum of squares for 
            interaction after the main effects", and SS(A | B) is "the sum of
            squares for the A main effect after the B main effect and ignoring
            interactions"
            </remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices">
            <summary>
            As long as the dummy regression parameters are the same, we may use
            the same regression matrix to compute the various marginal sums of
            squares. Since the dummy variables for a given factor, or the interaction
            parameters, will always be contiguous columns in the regression 
            matrix, their location can be specified with slices. The <c>ParameterSlices</c>
            class specifies the slices where factor A, factor B, and interaction 
            dummy variables are located in the regression matrix.
            
            The following terminology is used throughout:
            Regression matrix - the matrix of regression parameters include the 
            intercept parameter, which is expressed as a leading column of 1's 
            in the matrix.
            
            Predictor matrix - The matrix of regression parameters excluding the 
            intercept parameter.
            
            Thus regression parameters start at column 1 in the regression matrix and
            column 0 in the predictor matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.HasFactorAparams">
            <summary>
            Gets an sets a variable indicating whether or not there regression 
            parameters for factor A in the model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.HasFactorBparams">
            <summary>
            Gets an sets a variable indicating whether or not there regression 
            parameters for factor B in the model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.HasInteractionParams">
            <summary>
            Gets an sets a variable indicating whether or not there regression 
            parameters for interaction in the model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.ParamOrder">
            <summary>
            Gets and sets the ordering of regression parameters in the model.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.FactorAregressionSlice">
            <summary>
            Gets and sets the a slice indicating the location of the dummy
            regression parameters for factor A in the regression matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.FactorBregressionSlice">
            <summary>
            Gets and sets the a slice indicating the location of the dummy
            regression parameters for factor B in the regression matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.InteractionRegressionSlice">
            <summary>
            Gets and sets the a slice indicating the location of the dummy
            regression parameters for interaction in the regression matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.FactorApredictorSlice">
            <summary>
            Gets and sets the a slice indicating the location of the dummy
            regression parameters for factor A in the predictor matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.FactorBpredictorSlice">
            <summary>
            Gets and sets the a slice indicating the location of the dummy
            regression parameters for factor B in the predictor matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.InteractionPredictorSlice">
            <summary>
            Gets and sets the a slice indicating the location of the dummy
            regression parameters for interaction in the predictor matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.FactorAstartCol">
            <summary>
            Gests the starting column in the regression matrix for factor A
            dummy parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.NumFactorAparams">
            <summary>
            Gets the number of dummy parameters for factor A.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.NumFactorBparams">
            <summary>
            Gets the number of dummy parameters for factor B.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.NumInteractionParams">
            <summary>
            Gets the number of dummy parameters for interaction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.FactorBstartCol">
            <summary>
            Gests the starting column in the regression matrix for factor B
            dummy parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.InteractionStartCol">
            <summary>
            Gests the starting column in the regression matrix for interaction
            dummy parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.FactorAPredictorMatStartCol">
            <summary>
            Gests the starting column in the predictor matrix for factor A
            dummy parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.FactorBPredictorMatStartCol">
            <summary>
            Gests the starting column in the predictor matrix for factor B
            dummy parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices.InteractionPredictorMatStartCol">
            <summary>
            Gests the starting column in the predictor matrix for interaction
            dummy parameters.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.OrderedLinearRegression">
            <summary>
            Class containing the linear regression object computed from a particular
            ordering of factor and interaction parameters.
            Note that a factor parameter or interaction parameters may be
            absent depending on which type of sum of squares is being computed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.OrderedLinearRegression.ParamSlices">
            <summary>
            Gets and sets the slices into the regression matrix of the factor and interaction
            variables. Note that a factor parameter or interaction parameters may be
            absent depending on which type of sum of squares is being computed.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.OrderedLinearRegression.Regression">
            <summary>
            Gets and sets the linear regression object for this ordering of factor
            and interaction parameters.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder">
            <summary>
            Enumeration indicating the factors and their order in a sum of squares
            computation.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder.FactorA">
            <summary>
            Just factor A by itself.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder.FactorB_Interaction_FactorA">
            <summary>
            Factor A parameters last with interaction parameters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder.FactorA_Interaction_FactorB">
            <summary>
            Factor B parameters last with interaction parameters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder.FactorA_FactorB_Interaction">
            <summary>
            Interaction parameters last.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder.FactorA_FactorB">
            <summary>
            Factor B parameters last with no interaction parameters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder.FactorB_FactorA">
            <summary>
            Factor A parameters last with no interaction parameters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder.Interaction_FactorB_FactorA">
            <summary>
            Factor A parameters last with interaction parameters first.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.numFactorAparams_">
            <summary>
            Number of regression parameters for factor A.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.numFactorBparams_">
            <summary>
            Number of regression parameters for factor B.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.numInteractionParams_">
            <summary>
            Number of interaction regression parameters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.factorAparams_">
            <summary>
            Anovas for the factor A regression parameters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.factorBparams_">
            <summary>
            Anovas for the factor B regression parameters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.interactionParams_">
            <summary>
            Anovas for the interaction regression parameters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.anovaTable_">
            <summary>
            The ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.grandMean_">
            <summary>
            The mean of all the data.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.interceptParameter_">
            <summary>
            Intercept parameter values for the ANOVA regression.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.#ctor">
            <summary>
            Constructs a <c>TwoWayAnovaUnbalanced</c>.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.AnovaTable">
            <summary>
            Gets the ANOVA table.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.GrandMean">
            <summary>
            Gets the grand mean.
            </summary>
            <remarks>
            The grand mean is the mean of all the data.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.RegressionInterceptParameter">
            <summary>
            Bets the ANOVA regression parameter object associated with the
            intercept parameter.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.FactorARegressionFactorParameters">
            <summary>
            Gets the ANOVAs for the factor A regression parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.FactorBRegressionFactorParameters">
            <summary>
            Gets the ANOVAs for the factor B regression parameters.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.InteractionRegressionFactorParameters">
            <summary>
            Gets the ANOVAs for the interaction regression parameters.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ComputeBalancedAnova(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the ANOVA in the case that the design is acutally balanced. 
            This can greatly increase performance if an unbalanced ANOVA class is
            used to perform an ANOVA on a data set that is in fact balanced (same
            number of observations in each cell).
            </summary>
            <param name="data"><c>DataFrame</c> containing the data.</param>
            <param name="factorAColIndex">The index of the column containing the values for
            Factor A.</param>
            <param name="factorBColIndex">The index of the column containing the values for
            the Factor B.</param>
            <param name="dataColIndex">The index of the column containing the observation
            values.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.InitializeFactorsAndCellData(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Consumes the ANOVA data from a <c>DataFrame</c>.
            </summary>
            <param name="data"><c>DataFrame containing the ANOVA data.</c></param>
            <param name="factorAColIndex">Index of the column containing the data for 
            factor A.</param>
            <param name="factorBColIndex">Index of the column containing the data for
            factor B.</param>
            <param name="dataColIndex">Index of the column containing the observed data.</param>
            <returns><c>true</c> if the data is unbalanced.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.GetOrderedRegression(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32,CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder)">
            <summary>
            Create the ordered linear regession object for the data and given coefficient
            ordering.
            </summary>
            <param name="data">Data frame containing the data.</param>
            <param name="factorAColIndex">The index of column containing the factor A.</param>
            <param name="factorBColIndex">The index of column containing the factor B.</param>
            <param name="dataColIndex">The index of column containing the data. This column 
            must be numeric or convertible to a numeric type.</param>
            <param name="co">Coefficient ordering.</param>
            <returns>The ordered linear regression object.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.MakeFactorParameters(CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.LinearRegression,System.Int32,System.Int32)">
            <summary>
            Create the array of AnovaRegressionFactorParam objects, one for each 
            regression dummy variable. The sums of squares for each of these
            parameters is assumed to have been computed are are stored in the 
            DoubleVector instance variable <c>parameterSumsOfSquares</c> with
            the parameters for factor A first, followed by the parameters for
            factor B and starting at the given index.
            </summary>
            <param name="factor">Creating params for this factor.</param>
            <param name="sumOfSquares">Array of sums of sqares for all parameters.</param>
            <param name="lr">Linear regression.</param>
            <param name="factorStartIndex">Index into sum of squares array where the factor.</param>
            <param name="numFactorParameters">The number of factors.</param>
            <returns>The array of AnovaRegressionFactorParam's</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.MakeFactorParameters(CenterSpace.NMath.Stats.QRUpdateRegressionCalc,System.Int32,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.Factor)">
            <summary>
            Create the array of AnovaRegressionFactorParam objects, one for each 
            regression dummy variable corresponding to an ANOVA factor. 
            </summary>
            <param name="calculator">QR calculator used to compute the regression
            parameters.</param>
            <param name="factorStartIndex">This is the index of the column in the
            regression matrix where the regression parameters for the factor start.
            It is also the starting index of the parameter values array.</param>
            <param name="parameterValues">The parameter values from the regression
            fit.</param>
            <param name="regressionMatrix">The regression matrix.</param>
            <param name="residuals">Residuals from the regression fit.</param>
            <param name="factor">The ANOVA factor.</param>
            <returns>Array regression factor parameter objects. One object for each
            dummy variable in the regression for the factor. There are one less than
            the number of levels for the factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.IncrementalSumOfSquares(CenterSpace.NMath.Stats.LinearRegression,System.Int32,CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            
            </summary>
            <param name="lr"></param>
            <param name="numVariables"></param>
            <param name="observations"></param>
            <param name="ybar"></param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.IncrementalSumOfSquares(CenterSpace.NMath.Core.DoubleMatrix,System.Int32,CenterSpace.NMath.Core.DoubleVector,System.Double,CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Stats.AnovaRegressionFactorParam[]@)">
            <summary>
            Computes the incremental sum of squares when adding <c>numParameters</c>
            to the regression model. The columns corresponding these parameters are
            assumed to be the last <c>numParameter</c> columns in the given regression
            matrix.
            </summary>
            <param name="regressionMatrix">The regression matrix used to compute the
            regression.</param>
            <param name="numParameters">The number of parameters added to the regression
            matrix as the last columns.</param>
            <param name="observations">The regression observations (y-values).</param>
            <param name="ybar">The mean of the observations.</param>
            <param name="factor">The name of the factor corresponding to the added
            regression parameters</param>
            <param name="factorParameters">The associated regression factor parameter objects
            are output to this array.</param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.GetFactorSumOfSquares(CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices,CenterSpace.NMath.Core.DoubleVector,System.Tuple{CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Core.DoubleVector}@,CenterSpace.NMath.Core.DoubleVector@)">
            <summary>
             For a given parameter order, retrives the sum of squares for the regression 
             parameters associated with the last factor, or interaction, in the order.
            </summary>
            <param name="paramSlices">The location of the columns in the input sum of squares array
            <c>parameterSumOfSquares</c> of the sums of squares for the factor and interaction
            regression parameters.</param>
            <param name="parameterSumOfSquares">The sum of squares for the factor and interaction
            regression parameters.
            </param>
            <param name="factandSSpair">On output contains pair where the first item is
            the factor and the second is its sum of squares.</param>
            <param name="interactionSS">The interaction regression parameters sum of squares
            if the there are interaction parameters.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.GetParameterSlices(CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder)">
            <summary>
            For a give ANOVA regression factor/interaction parameter order, 
            computes the slices to access the columns of the regression matrix
            for the factor and interaction parameters.
            </summary>
            <param name="paramOrder">The factor order.</param>
            <returns>Slices to access the columns of the regression matrix
            for the factor and interaction parameters.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ComputeFactorSumsOfSquares(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder,CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices)">
            <summary>
            
            </summary>
            <param name="regressionMatrix"></param>
            <param name="sumOfSquaresOrder"></param>
            <param name="predictorMatrixOrder"></param>
            <returns></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ReorderRegressionMatrix(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder,CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            For a give parameter order reorders the columns of the input regression matrix so that the 
            the columns corresponding to the parameters are in the order specified by the parameter order.
            </summary>
            <param name="regMat">Regression matrix.</param>
            <param name="paramOrder">Desired parameter order.</param>
            <param name="paramSlices">Location of columns for parameters in the input regression
            matrix.</param>
            <param name="reorderedRegmat">Regression matrix with colums for the parameters 
            in the locations specified by the <c>paramOrder</c> parameter.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.MakeRegressionMatrixRow(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterSlices)">
            <summary>
            If <c>interactionlast = false</c>:
            factorA - interaction factorB
            </summary>
            <param name="factorAcoeff">Factor A coefficients.</param>
            <param name="factorBcoeff">Factor B coefficients.</param>
            <param name="paramslices">Parameter slices for the regression</param>
            <returns>A row in the regression matrix for the given factor coefficients/levels.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaUnbalancedTable">
            <summary>
            Class TwoWayAnovaUnbalancedTable summarizes the information of a traditional two-way
            Analysis of Variance (ANOVA) table.
            </summary>
            <remarks>
            Class TwoWayAnovaUnbalancedTable derives from class DataFrame in order
            to represent a traditional two-way ANOVA table. A two-way ANOVA table
            contains 5 rows and 6 columns. The rows contain information for each of the
            following sources: Factor A, Factor B, the Interaction between Factor A and
            Factor B, Error (Residual), and Total. The columns contain the following
            quantities for each source: Degrees of Freedom, Sum of Squares,
            Mean Square, F statistice and P-values (only for the Factors A and B and 
            their interaction).
            <br/>
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalancedTable.#ctor">
            <summary>
            Constructs an empty TwoWayAnovaUnbalancedTable object.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalancedTable.#ctor(System.Tuple{CenterSpace.NMath.Stats.Factor,System.Double},System.Tuple{CenterSpace.NMath.Stats.Factor,System.Double},System.Double,CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder,CenterSpace.NMath.Stats.LinearRegressionAnova)">
            <summary>
            Constructs a TwoAnovaUnbalancedTable.
            </summary>
            <param name="factorAandSumSquares">A tuple containing the Factor object for one of
            the factors and its associated sum of squares.</param>
            <param name="factorBandSumSquares">A tuple containing the Factor object for one of
            the factors and its associated sum of squares.</param>
            <param name="interactionSumOfSquares">The sum of squares associated with the interaction
            factors.</param>
            <param name="coefficientOrder">The order in which the sums of squares were computed.</param>
            <param name="lrAnova">The linear regression ANOVA for the ANOVA regression.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalancedTable.#ctor(System.Tuple{CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Core.DoubleVector},System.Tuple{CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Core.DoubleVector},CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder,CenterSpace.NMath.Stats.LinearRegressionAnova)">
            <summary>
            Constructs a TwoAnovaUnbalancedTable.
            </summary>
            <param name="factorAandSumSquares">A tuple containing the Factor object for one of
            the factors and its associated sum of squares. There is a sum of squares for each
            of the n - 1 regression parameters associated with the factor, where n is the number
            of levels for the factor.</param>
            <param name="factorBandSumSquares">A tuple containing the Factor object for one of
            the factors and its associated sum of squares. There is a sum of squares for each
            of the n - 1 regression parameters associated with the factor, where n is the number
            of levels for the factor.</param>
            <param name="interactionSumOfSquares">The sum of squares associated with the interaction
            factors.</param>
            <param name="coefficientOrder">The order in which the sums of squares were computed.</param>
            <param name="lrAnova">The linear regression ANOVA for the ANOVA regression.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaUnbalancedTable.#ctor(System.Tuple{CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Core.DoubleVector},System.Tuple{CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Core.DoubleVector},CenterSpace.NMath.Stats.TwoWayAnovaUnbalanced.ParameterOrder,CenterSpace.NMath.Stats.LinearRegressionAnova)">
            <summary>
            Constructs a TwoAnovaUnbalancedTable when there are no interaction parameters.
            </summary>
            <param name="factorAandSumSquares">A tuple containing the Factor object for one of
            the factors and its associated sum of squares. There is a sum of squares for each
            of the n - 1 regression parameters associated with the factor, where n is the number
            of levels for the factor.</param>
            <param name="factorBandSumSquares">A tuple containing the Factor object for one of
            the factors and its associated sum of squares. There is a sum of squares for each
            of the n - 1 regression parameters associated with the factor, where n is the number
            of levels for the factor.</param>
            <param name="coefficientOrder">The order in which the sums of squares were computed.</param>
            <param name="lrAnova">The linear regression ANOVA for the ANOVA regression.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaUnbalancedTable.CoefficientOrder">
            <summary>
            The order of the factors in the regression used to compute the ANOVA and
            the corresponding sums of squares.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.SortingType">
            <summary>
            Enumeration for specifying different sorting types, such as ascending
            or descending order.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SortingType.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.SortingType.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.StatsFunctions">
            <summary>
            Class StatsFunctions provides statistical functions for NMath types,
            including descriptive statistics and special functions.
            </summary>
            <remarks>
            Class StatsFunctions provides a wide variety of static functions for computing
            descriptive statistics, such as mean, variance, standard deviation, percentile, median,
            quartiles, geometric mean, harmonic mean, RMS, kurtosis, skewness, and many more.
            <br/>
            Method overloads accept data as an array of doubles, an array of integers, a 
            DoubleVector, or as a numeric column in a DataFrame.
            <br/>
            Most functions in class StatsFunctions are accompanied by a paired function
            which ignores values that are Not-a-Number (NaN). For example, there are
            Mean() and NaNMean() functions, Variance() and NaNVariance() functions, and so
            forth. Unless a function is explicitly designed to handle missing values, it may
            return NaN or have unexpected results if values are missing. The provided
            convenience method NaNCheck() returns true if a given data set contains any
            missing values.
            <br/>
            Class StatsFunctions also provides some special functions, including
            combinatorial functions, the gamma function, and the beta function.  
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsFunctions.NMATH_STATS_VERSION">
            <summary>
            NMath Stats version.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CountIf(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates how many elements in a vector return true when a logical function is applied.
            </summary>
            <param name="data">A vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CountIf(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates how many elements in an array return true when a logical function is applied.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CountIf(System.Int32[],System.Func{System.Int32,System.Boolean})">
            <summary>
            Calculates how many elements in an array return true when a logical function is applied.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>A count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CountIf(System.Int32[],System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates how many elements in an array return true when a logical function is applied.
            </summary>
            <remarks>Integer values will be promoted to floating-point values for the calculation.
            The array will not be altered.</remarks>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CountIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates how many elements in a column return true when a logical function is applied.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A count.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CountIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean})">
            <summary>
            Calculates how many elements in a column return true when a logical function is applied.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>A count.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not a <c>DFIntColumn</c> or cannot be converted to integers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CountIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.String,System.Boolean})">
            <summary>
            Calculates how many elements in a column return true when a logical function is applied.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a string and returns a boolean.</param>
            <returns>A count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCountIf(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates how many elements in a vector return true when a logical function is applied
            to the elements that are not NaN.
            </summary>
            <param name="data">A vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCountIf(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates how many elements in an array return true when a logical function is applied
            to the elements that are not NaN.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCountIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates how many elements in a column return true when a logical function is applied
            to the elements that are not missing.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A count.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> does not contain numeric data.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCountIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean})">
            <summary>
            Calculates how many elements in a column return true when a logical function is 
            applied to values that are not missing.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>A count.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not a <c>DFIntColumn</c> or cannot be converted to integers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCountIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.String,System.Boolean})">
            <summary>
            Calculates how many elements in a column return true when a logical function is applied
            to the elements that are not missing.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a string and returns a boolean.</param>
            <returns>A count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of a vector.
            </summary>
            <param name="data">A vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A boolean array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(System.Int32[],System.Func{System.Int32,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of an array.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>A boolean array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(System.Int32[],System.Func{System.Double,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of an array.
            </summary>
            <remarks>Integer values will be promoted to floating-point values for the calculation.
            The array will not be altered.</remarks>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>A boolean array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of an array.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A boolean array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of a column.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A boolean array.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of a column.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>A boolean array.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not a <c>DFIntColumn</c> or cannot be converted to
            integers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.String,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of a column.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a string and returns a boolean.</param>
            <returns>A boolean array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNIf(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of a vector that are not NaN.
            </summary>
            <param name="data">A vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A boolean array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNIf(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of an array that are not NaN.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A boolean array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of a column that are not missing.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>An array of boolean values.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of a column that are not missing.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>A boolean array.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not a <c>DFIntColumn</c> or cannot be converted to
            integers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.String,System.Boolean})">
            <summary>
            Creates an array of boolean values determined by applying a logical function
            to the elements of a column that are not missing.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a string and returns a boolean.</param>
            <returns>An array of boolean values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean},System.Double)">
            <summary>
            Creates a new vector by applying a logical function to the elements of a
            vector. Elements in the original vector that return true are set to the given true value
            in the new vector; elements that return false are not changed.
            </summary>
            <param name="data">A vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(System.Double[],System.Func{System.Double,System.Boolean},System.Double)">
            <summary>
            Creates a new array by applying a logical function to the elements of an
            array. Elements in the original array that return true are set to the given true value
            in the new array; elements that return false are not changed.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <returns>A new array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(System.Int32[],System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            Creates a new array by applying a logical function to the elements of an
            array. Elements in the original array that return true are set to the given true value
            in the new array; elements that return false are not changed.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <returns>A new array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(System.Int32[],System.Func{System.Double,System.Boolean},System.Double)">
            <summary>
            Creates a new array by applying a logical function to the elements of an
            array. Elements in the original array that return true are set to the given true value
            in the new array; elements that return false are not changed.
            </summary>
            <remarks>Integer values will be promoted to floating-point values for the calculation.
            The array will not be altered.</remarks>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <returns>A new array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean},System.Double)">
            <summary>
            Creates a new column by applying a logical function to the elements of a
            column. Elements in the original column that return true are set to the given true value
            in the new column; elements that return false are not changed.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <returns>A new column.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            Creates a new column by applying a logical function to the elements of a
            column. Elements in the original column that return true are set to the given true value
            in the new column; elements that return false are not changed.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <returns>A new column.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not a <c>DFIntColumn</c>.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.String,System.Boolean},System.String)">
            <summary>
            Creates a new column by applying a logical function to the elements of a
            column. Elements in the original column that return true are set to the 
            given true value in the new column; elements that return false are not 
            changed.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a string and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <returns>A new column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean},System.Double,System.Double)">
            <summary>
            Creates a new vector by applying a logical function to the elements of a
            vector. Elements in the original vector that return true are set to the given true value
            in the new vector; elements that return false are set to the given false value.
            </summary>
            <param name="data">A vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <param name="ifFalse">Value in case of false.</param>
            <returns>A new vector.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(System.Double[],System.Func{System.Double,System.Boolean},System.Double,System.Double)">
            <summary>
            Creates a new array by applying a logical function to the elements of an
            array. Elements in the original array that return true are set to the given true value
            in the new array; elements that return false are set to the given false value.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <param name="ifFalse">Value in case of false.</param>
            <returns>A new array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(System.Int32[],System.Func{System.Double,System.Boolean},System.Double,System.Double)">
            <summary>
            Creates a new array by applying a logical function to the elements of an
            array. Elements in the original array that return true are set to the given true value
            in the new array; elements that return false are set to the given false value.
            </summary>
            <remarks>Integer values will be promoted to floating-point values for the calculation.
            The array will not be altered.</remarks>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <param name="ifFalse">Value in case of false.</param>
            <returns>A new array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(System.Int32[],System.Func{System.Int32,System.Boolean},System.Int32,System.Int32)">
            <summary>
            Creates a new array by applying a logical function to the elements of an
            array. Elements in the original array that return true are set to the given true value
            in the new array; elements that return false are set to the given false value.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <param name="ifFalse">Value in case of false.</param>
            <returns>A new array.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean},System.Double,System.Double)">
            <summary>
            Creates a new column by applying a logical function to the elements of a
            column. Elements in the original column that return true are set to the given true value
            in the new column; elements that return false are set to the given false value.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <param name="ifFalse">Value in case of false.</param>
            <returns>A new column.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean},System.Int32,System.Int32)">
            <summary>
            Creates a new column by applying a logical function to the elements of a
            column. Elements in the original column that return true are set to the given true value
            in the new column; elements that return false are set to the given false value.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <param name="ifFalse">Value in case of false.</param>
            <returns>A new column.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not a <c>DFIntColumn</c> or cannot be converted to integers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.If(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.String,System.Boolean},System.String,System.String)">
            <summary>
            Creates a new column by applying a logical function to the elements of a
            column. Elements in the original column that return true are set to the given 
            true value in the new column; elements that return false are set to the given 
            false value.
            </summary>6
            <param name="data">A column.</param>
            <param name="function">A function that takes a string and returns a boolean.</param>
            <param name="ifTrue">Value in case of true.</param>
            <param name="ifFalse">Value in case of false.</param>
            <returns>A new column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates the sum of the elements in a vector that return true when a given
            logical function is applied.
            </summary>
            <param name="data">A vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>The sum of the elements where <c>function</c> returns <c>true</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates the sum of the elements in an array that return true when a given
            logical function is applied.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>The sum of the elements where <c>function</c> returns <c>true</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(System.Int32[],System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates the sum of the elements in an array that return true when a given
            logical function is applied.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>The sum of the elements where <c>function</c> returns <c>true</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(System.Int32[],System.Func{System.Int32,System.Boolean})">
            <summary>
            Calculates the sum of the elements in an array that return true when a given
            logical function is applied.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>The sum of the elements where <c>function</c> returns <c>true</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates the sum of the elements in a column that return true when a given
            logical function is applied.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>The sum of the elements where <c>function</c> returns <c>true</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean})">
            <summary>
            Calculates the sum of the elements in a column that return true when a given
            logical function is applied.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>The sum of the elements where <c>function</c> returns <c>true</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not a <c>DFIntColumn</c> or cannot be converted to integers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumIf(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates the sum of the elements in a vector that are not NaN that return
            true when a given logical function is applied.
            </summary>
            <param name="data">A vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A sum.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumIf(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates the sum of the elements in an array that are not NaN that return
            true when a given logical function is applied.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A sum.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean})">
            <summary>
            Calculates the sum of the elements in a column that are not missing that return
            true when a given logical function is applied.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean})">
            <summary>
            Calculates the sum of the elements in a column that return true when a given
            logical function is applied to values that are not missing.
            </summary>
            <param name="data">A column.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <returns>The sum of the elements where <c>function</c> returns <c>true</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not a <c>DFIntColumn</c> or cannot be converted to integers.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean},CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the sum of elements in one vector based on evaluating a logical function on
            corresponding elements in another vector.
            </summary>
            <param name="data">Evaluation vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="sum">Sum vector.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(System.Double[],System.Func{System.Double,System.Boolean},System.Double[])">
            <summary>
            Calculates the sum of elements in one array based on evaluating a logical function on
            corresponding elements in another data.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(System.Int32[],System.Func{System.Double,System.Boolean},System.Double[])">
            <summary>
            Calculates the sum of elements in one array based on evaluating a logical function on
            corresponding elements in another data.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(System.Double[],System.Func{System.Double,System.Boolean},System.Int32[])">
            <summary>
            Calculates the sum of elements in one array based on evaluating a logical function on
            corresponding elements in another data.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(System.Int32[],System.Func{System.Double,System.Boolean},System.Int32[])">
            <summary>
            Calculates the sum of elements in one array based on evaluating a logical function on
            corresponding elements in another data.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(System.Int32[],System.Func{System.Int32,System.Boolean},System.Int32[])">
            <summary>
            Calculates the sum of elements in one array based on evaluating a logical function on
            corresponding elements in another data.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(System.Int32[],System.Func{System.Int32,System.Boolean},System.Double[])">
            <summary>
            Calculates the sum of elements in one array based on evaluating a logical function on
            corresponding elements in another data.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean},CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the sum of elements in one column based on evaluating a logical function on
            corresponding elements in another data.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean},CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the sum of elements in one column based on evaluating a logical function on
            corresponding elements in another data.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumIf(CenterSpace.NMath.Core.DoubleVector,System.Func{System.Double,System.Boolean},CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the sum of elements in one vector based on evaluating a logical function on
            corresponding elements in another vector that are not NaN.
            </summary>
            <param name="data">Evaluation vector.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="sum">Sum vector.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same number of elements that are
            not NaN.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumIf(System.Double[],System.Func{System.Double,System.Boolean},System.Double[])">
            <summary>
            Calculates the sum of elements in one array based on evaluating a logical function on
            corresponding elements in another array that are not NaN.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same number of elements that are
            not NaN.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Double,System.Boolean},CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the sum of elements in one column that are not missing based on evaluating 
            a logical function on corresponding elements in another column.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes a double and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumIf(CenterSpace.NMath.Stats.IDFColumn,System.Func{System.Int32,System.Boolean},CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the sum of elements in one column that are not missing based on evaluating 
            a logical function on corresponding elements in another column.
            </summary>
            <param name="data">Evaluation data.</param>
            <param name="function">A function that takes an integer and returns a boolean.</param>
            <param name="sum">Sum data.</param>
            <returns>A sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>sum</c> do not have the same length;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.IncompleteBeta(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of the incomplete beta function at a given value.
            </summary>
            <param name="a">a parameter.</param>
            <param name="b">b parameter.</param>
            <param name="x">x parameter.</param>
            <returns>The incomplete beta.</returns>
            <remarks>The incomplete beta function is a generalization of the beta function.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Beta(System.Double,System.Double)">
            <summary>
            Returns the value of the beta function at a given value.
            </summary>
            <remarks>
            The beta function is related to the gamma function as follows:
            <code>B(z,w) = ( Gamma(z) * Gamma(w) ) / Gamma(z + w)</code>
            </remarks>
            <param name="z">z parameter.</param>
            <param name="w">w parameter.</param>
            <returns>The beta integral.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.IncompleteGamma(System.Double,System.Double)">
            <summary>
            Returns the incomplete gamma function at a given value.
            </summary>
            <param name="a">A parameter describing the incomplete gamma function.</param>
            <param name="x">A point on the x-axis.</param>
            <returns>The integral from <c>x</c> to <c>infinity</c> of
            <c>(t^(a-1) * e^-t)dt</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.IncompleteGammaComplement(System.Double,System.Double)">
            <summary>
            Returns the complement of the incomplete gamma function, <c>P(a,x)</c>, at a given value.
            The complement of the incomplete gamma function <c>P(a,x)</c> is defined to be 
            <c>1.0 - P(a,x)</c>
            </summary>
            <param name="a">A parameter describing the incomplete gamma function.</param>
            <param name="x">A point on the x-axis.</param>
            <returns>The integral from <c>x</c> to <c>infinity</c> of
            <c>(t^(a-1) * e^-t)dt</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.IncompleteGamma(System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the incomplete gamma function P(a,x) or its complement 1.0 - P(a,x) for
            for the parameter <c>a</c> and value <c>x</c>.
            </summary>
            <param name="a">A parameter describing the incomplete gamma function.</param>
            <param name="x">A point on the x-axis.</param>
            <param name="complement">If <c>true</c> the complement, 1.0 - P(a,x) will be computed.
            otherwise P(a,x) will be computed.</param>
            <returns>The integral from <c>x</c> to <c>infinity</c> of
            <c>(t^(a-1) * e^-t)dt</c>.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.gcf(System.Double@,System.Double,System.Double,System.Double@)">
            <summary>
            
            </summary>
            <param name="gammcf"></param>
            <param name="a"></param>
            <param name="x"></param>
            <param name="gln"></param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Factorial(System.Int32)">
            <summary>
            Returns <c>n!</c>, the number of ways that <c>n</c> objects can be permuted.
            </summary>
            <param name="n">The number of objects.</param>
            <returns><c>n!</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>n</c> is not positive.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.FactorialLn(System.Int32)">
            <summary>
            Returns the natural log factorial of <c>n</c>, <c>ln( n! )</c>.
            </summary>
            <param name="n">The number of objects.</param>
            <returns><c>ln( n! )</c></returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>n</c> is not positive.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Binomial(System.Int32,System.Int32)">
            <summary>
            Returns the binomial coefficient ("n choose m"), the number of ways of
            picking <c>m</c> unordered outcomes from <c>n</c> possibilities.
            </summary>
            <param name="n">The total number of possibilities.</param>
            <param name="m">The number of desired outcomes.</param>
            <returns>The binomial coefficient.</returns>
            <remarks>
            The binomial coefficient <c>nCm</c> ("n choose m") is defined by:
            <code>
            nCm = n! / ( m! ( n - m )! )
            </code>
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.BinomialLn(System.Int32,System.Int32)">
            <summary>
            Returns the natural log of the binomial coefficient ("n choose m"),
            the number of ways of picking <c>m</c> unordered outcomes from
            <c>n</c> possibilities.
            </summary>
            <param name="n">The total number of possibilities.</param>
            <param name="m">The number of desired outcomes.</param>
            <returns>The natural log of the binomial coefficient.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CentralMoment(CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Calculates the specified central moment about the mean for the 
            the given data.
            </summary>
            <param name="data">A vector.</param>
            <param name="order">A moment (order).</param>
            <returns>The specified central moment.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
            <remarks>
            The first central moment is equal to zero. The second central
            moment is the variance. The third central moment is the skewness.
            The fourth central moment is the kurtosis.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CentralMoment(System.Double[],System.Int32)">
            <summary>
            Calculates the specified central moment about the mean for the 
            the given data.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="order">A moment (order).</param>
            <returns>The specified central moment.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
            <remarks>
            The first central moment is equal to zero. The second central
            moment is the variance. The third central moment is the skewness.
            The fourth central moment is the kurtosis.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CentralMoment(System.Int32[],System.Int32)">
            <summary>
            Calculates the specified central moment about the mean for the 
            the given data.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="order">A moment (order).</param>
            <returns>The specified central moment.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
            <remarks>
            The first central moment is equal to zero. The second central
            moment is the variance. The third central moment is the skewness.
            The fourth central moment is the kurtosis.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CentralMoment(CenterSpace.NMath.Stats.IDFColumn,System.Int32)">
            <summary>
            Calculates the specified central moment about the mean for the 
            the given data.
            </summary>
            <param name="data">A column.</param>
            <param name="order">A moment (order).</param>
            <returns>The specified central moment.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
            <remarks>
            The first central moment is equal to zero. The second central
            moment is the variance. The third central moment is the skewness.
            The fourth central moment is the kurtosis.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCentralMoment(CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Calculates the specified central moment about the mean for the 
            the given data, excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <param name="order">A moment (order).</param>
            <returns>The specified central moment.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
            <remarks>
            The first central moment is equal to zero. The second central
            moment is the variance. The third central moment is the skewness.
            The fourth central moment is the kurtosis.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCentralMoment(System.Double[],System.Int32)">
            <summary>
            Calculates the specified central moment about the mean for the 
            the given data, excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="order">A moment (order).</param>
            <returns>The specified central moment.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
            <remarks>
            The first central moment is equal to zero. The second central
            moment is the variance. The third central moment is the skewness.
            The fourth central moment is the kurtosis.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCentralMoment(CenterSpace.NMath.Stats.IDFColumn,System.Int32)">
            <summary>
            Calculates the specified central moment about the mean for the 
            the given data, excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <param name="order">A moment (order).</param>
            <returns>The specified central moment.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Correlation(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the Pearson correlation of two data sets.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second set set.</param>
            <returns>Correlation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero or one.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CorrelationMatrix(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Computes the Pearson correlation matrix for a set of random inputs. The random 
            inputs are taken to be the columns of the input matrix. The symmetric,
            positive definite matrix whose i,j entry is the Pearson correlation coefficient
            between the inputs in column i and column j is computed and returned.
            </summary>
            <remarks>
            A constant column (and therefore standard deviation of zero) leads to a correlation
            of zero.
            </remarks>
            <param name="A">Matrix whose columns are the inputs whose Spearman rank correlation
            coefficient is computed.</param>
            <returns>The symmetric, positive definite matrix whose row i, column j 
            entry is  the correlation coefficient between the inputs in column i and column j
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Correlation(System.Double[],System.Double[])">
            <summary>
            Computes the Pearson correlation of two data sets.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second set set.</param>
            <returns>Correlation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero or one.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Correlation(System.Int32[],System.Int32[])">
            <summary>
            Computes the Pearson correlation of two data sets.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second set set.</param>
            <returns>Correlation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero or one.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Correlation(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Computes the Pearson correlation of two data sets.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second set set.</param>
            <returns>Correlation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero or one.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCorrelation(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the Pearson correlation of two data sets, excluding pairs where either
            value is missing.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second set set.</param>
            <returns>Correlation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero or one non-NaN pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCorrelation(System.Double[],System.Double[])">
            <summary>
            Computes the Pearson correlation of two data sets, excluding pairs where either
            value is missing.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second set set.</param>
            <returns>Correlation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero or one non-NaN pair.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCorrelation(System.Double[],System.Int32[])">
            <summary>
            Computes the Pearson correlation of two data sets, excluding pairs where either
            value is missing.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second set set.</param>
            <returns>Correlation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero or one non-NaN pair.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCorrelation(System.Int32[],System.Double[])">
            <summary>
            Computes the Pearson correlation of two data sets, excluding pairs where either
            value is missing.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second set set.</param>
            <returns>Correlation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero or one non-NaN pair.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCorrelation(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Computes the Pearson correlation of two data sets, excluding pairs where either
            value is missing.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second set set.</param>
            <returns>Correlation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero or one non-NaN pair.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Count(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns the number of elements in a data set.
            </summary>
            <param name="data">A vector.</param>
            <returns>Count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Count(System.Double[])">
            <summary>
            Returns the number of elements in a data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Count(System.Int32[])">
            <summary>
            Returns the number of elements in a data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Count(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Returns the number of elements in a data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCount(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns the number of elements in a data set, excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCount(System.Double[])">
            <summary>
            Returns the number of elements in a data set, excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCount(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Returns the number of elements in a data set, excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Count.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Counts(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns a dictionary in which the keys are the unique elements in a given data
            set and the values are how many times they occur.
            </summary>
            <param name="data">A vector.</param>
            <returns>A dictionary of unique elements and their counts.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Counts(System.Double[])">
            <summary>
            Returns a dictionary in which the keys are the unique elements in a given data
            set and the values are how many times they occur.
            </summary>
            <param name="data">An array.</param>
            <returns>A dictionary of unique elements and their counts.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Counts(System.Int32[])">
            <summary>
            Returns a dictionary in which the keys are the unique elements in a given data
            set and the values are how many times they occur.
            </summary>
            <param name="data">An array.</param>
            <returns>A dictionary of unique elements and their counts.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Counts(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Returns a dictionary in which the keys are the unique elements in a given data
            set and the values are how many times they occur.
            </summary>
            <param name="data">A column.</param>
            <returns>A dictionary of unique elements and their counts.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(CenterSpace.NMath.Core.FloatVector,CenterSpace.NMath.Core.FloatVector)">
            <summary>
            Computes the covariance of two data sets.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the covariance of two data sets.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(System.Double[],System.Double[])">
            <summary>
            Computes the covariance of two data sets.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(System.Int32[],System.Int32[])">
            <summary>
            Computes the covariance of two data sets.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Computes the covariance of two data sets.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> are not numeric or have a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCovariance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the covariance of two data sets, excluding pairs where either
            value is missing.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero non-NaN pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCovariance(System.Double[],System.Double[])">
            <summary>
            Computes the covariance of two data sets, excluding pairs where either
            value is missing.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>    
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero non-NaN pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCovariance(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Computes the covariance of two data sets, excluding pairs where either
            value is missing.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero non-NaN pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(CenterSpace.NMath.Core.FloatVector,CenterSpace.NMath.Core.FloatVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance of two data sets using the specified bias.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance of two data sets using the specified bias.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(System.Double[],System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance of two data sets using the specified bias.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(System.Int32[],System.Int32[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance of two data sets using the specified bias.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Covariance(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance of two data sets using the specified bias.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> are not numeric or have a length of zero.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data1</c> and <c>data2</c> have different lengths.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCovariance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance of two data sets using the specified bias, excluding 
            pairs where either value is missing.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero non-NaN pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCovariance(System.Double[],System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance of two data sets using the specified bias, excluding 
            pairs where either value is missing.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>    
            <param name="type">Biased or unbiased.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero non-NaN pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCovariance(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Computes the covariance of two data sets using the specified bias, excluding 
            pairs where either value is missing.
            </summary>
            <param name="data1">The first data set.</param>
            <param name="data2">The second data set.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>Covariance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data has zero non-NaN pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrix(CenterSpace.NMath.Core.FloatMatrix)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data">Matrix.</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrix(CenterSpace.NMath.Core.FloatMatrix,System.Boolean)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            </remarks>
            <param name="data">Matrix.</param>
            <param name="memoized">Memoize intermediate calculations.  Improve performance at the
            cost of using more memory</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrix(CenterSpace.NMath.Core.FloatMatrix,CenterSpace.NMath.Stats.BiasType,System.Boolean)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            </remarks>
            <param name="data">Matrix.</param>
            <param name="type">Biased or unbiased.</param>
            <param name="memoized">Memoize intermediate calculations.  Improve performance at the
            cost of using more memory</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrix(CenterSpace.NMath.Core.FloatMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            </remarks>
            <param name="data">Matrix.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrixMemoized(CenterSpace.NMath.Core.FloatMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.  Intermediate calculations are memoized.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            </remarks>
            <param name="data">Matrix.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrix(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data">Matrix.</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrix(CenterSpace.NMath.Core.DoubleMatrix,System.Boolean)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            </remarks>
            <param name="data">Matrix.</param>
            <param name="memoized">Memoize intermediate calculations.  Improve performance at the
            cost of using more memory</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrix(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType,System.Boolean)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            </remarks>
            <param name="data">Matrix.</param>
            <param name="type">Biased or unbiased.</param>
            <param name="memoized">Memoize intermediate calculations.  Improve performance at the
            cost of using more memory</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrix(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            </remarks>
            <param name="data">Matrix.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CovarianceMatrixMemoized(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Creates a square, symmetric matrix containing the variances and 
            covariances of the columns in <c>data</c>.  Intermediate calculations are memoized.
            </summary>
            <remarks>
            If <c>C</c> is the returned covariance matrix, then the diagonal elements
            <c>C[i,i]</c> represent the variances for the columns of <c>data</c>. The 
            off-diagonal elements <c>C[i,j]</c> represent the covariances of columns 
            <c>i</c> and <c>j</c>. 
            </remarks>
            <param name="data">Matrix.</param>
            <param name="type">Biased or unbiased.</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has only one row.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Cronbach(CenterSpace.NMath.Core.FloatMatrix)">
            <summary>
            Standardized Cronbach alpha test for reliability.
            </summary>
            <param name="M">Data.</param>
            <returns>Cronbach's alpha.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Cronbach(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Standardized Cronbach alpha test for reliability.
            </summary>
            <param name="M">Data.</param>
            <returns>Cronbach's alpha.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Decile(CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Calculates the specified decile of the given data.
            </summary>
            <param name="data">A vector.</param>
            <param name="decile">A decile between 0 and 10.</param>
            <returns>Decile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>decile</c> is greater than ten or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Decile(System.Double[],System.Int32)">
            <summary>
            Calculates the specified decile of the given data.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="decile">A decile between 0 and 10.</param>
            <returns>Decile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>decile</c> is greater than ten or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Decile(System.Int32[],System.Int32)">
            <summary>
            Calculates the specified decile of the given data.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="decile">A decile between 0 and 10.</param>
            <returns>Decile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>decile</c> is greater than ten or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Decile(CenterSpace.NMath.Stats.IDFColumn,System.Int32)">
            <summary>
            Calculates the specified decile of the given data.
            </summary>
            <param name="data">A column.</param>
            <param name="decile">A decile between 0 and 10.</param>
            <returns>Decile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or <c>decile</c> is greater
            than ten or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.DurbinWatson(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the Durbin-Watson statistic of the given data.
            </summary>
            <param name="data">A vector.</param>
            <returns>Durbin-Watson statistic.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.DurbinWatson(System.Double[])">
            <summary>
            Calculates the Durbin-Watson statistic of the given data.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Durbin-Watson statistic.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.DurbinWatson(System.Int32[])">
            <summary>
            Calculates the Durbin-Watson statistic of the given data.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Durbin-Watson statistic.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.DurbinWatson(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the Durbin-Watson statistic of the given data.
            </summary>
            <param name="data">A column.</param>
            <returns>Durbin-Watson statistic.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNDurbinWatson(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the Durbin-Watson statistic of the given data, excluding
            NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Durbin-Watson statistic.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNDurbinWatson(System.Double[])">
            <summary>
            Calculates the Durbin-Watson statistic of the given data, excluding
            NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Durbin-Watson statistic.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNDurbinWatson(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the Durbin-Watson statistic of the given data, excluding
            missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Durbin-Watson statistic.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Fisher(System.Double)">
            <summary>
            Calculates the Fisher transformation of the given value.
            </summary>
            <param name="x">Value.</param>
            <returns>Fisher transformation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if x is less than negative one or greater than one.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.FisherInv(System.Double)">
            <summary>
            Calculates the inverse Fisher transformation of the given value.
            </summary>
            <param name="y">Value.</param>
            <returns>Inverse Fisher transformation.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.FishersExactTest(CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Returns the one-tailed Fisher's Exact Test p-value for the specified 2 x 2 contingency table and alternative hypothesis.
            </summary>
            <param name="data">The 2 x 2 contingency table.</param>
            <returns>The lesser of the right and left tail p-value.</returns>
            <remarks>
            Fisher's exact test is so-called because the significance of the deviation from a null hypothesis can be calculated exactly,
            rather than relying on an approximation.
            <br/>
            Fisher's exact test is a useful alternative to the chi-square test in cases where sample sizes are small. 
            The usual rule of thumb for deciding whether the chi-squared approximation is good enough is whether the expected
            values in all cells of the contingency table is greater than or equal to 5.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the dimensions of the given contigency table are not 2 x 2, 
            if both columns are not instances of DFIntColumn, or if any of the count values is negative.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.FishersExactTest(CenterSpace.NMath.Stats.DataFrame,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Returns the Fisher's Exact Test p-value for the specified 2 x 2 contingency table and alternative hypothesis.
            </summary>
            <param name="data">The 2 x 2 contingency table.</param>
            <param name="type">Enum value indicating the form of the alternative hypothesis.</param>
            <returns>The p-value.</returns>
            <remarks>
            Fisher's exact test is so-called because the significance of the deviation from a null hypothesis can be calculated exactly,
            rather than relying on an approximation.
            <br/>
            Fisher's exact test is a useful alternative to the chi-square test in cases where sample sizes are small. 
            The usual rule of thumb for deciding whether the chi-squared approximation is good enough is whether the expected
            values in all cells of the contingency table is greater than or equal to 5.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the dimensions of the given contigency table are not 2 x 2, 
            if both columns are not instances of DFIntColumn, or if any of the count values is negative.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.FishersExactTest(System.Int32[0:,0:])">
            <summary>
            Returns the one-tailed Fisher's Exact Test p-value for the specified 2 x 2 contingency table and alternative hypothesis.
            </summary>
            <param name="data">The 2 x 2 contingency table.</param>
            <returns>The lesser of the right and left tail p-value.</returns>
            <remarks>
            Fisher's exact test is so-called because the significance of the deviation from a null hypothesis can be calculated exactly,
            rather than relying on an approximation.
            <br/>
            Fisher's exact test is a useful alternative to the chi-square test in cases where sample sizes are small. 
            The usual rule of thumb for deciding whether the chi-squared approximation is good enough is whether the expected
            values in all cells of the contingency table is greater than or equal to 5.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the dimensions of the given contigency table are not 2 x 2, or
            if any of the count values is negative.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.FishersExactTest(System.Int32[0:,0:],CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Returns the Fisher's Exact Test p-value for the specified 2 x 2 contingency table and alternative hypothesis.
            </summary>
            <param name="data">The 2 x 2 contingency table.</param>
            <param name="type">Enum value indicating the form of the alternative hypothesis.</param>
            <returns>The p-value.</returns>
            <remarks>
            Fisher's exact test is so-called because the significance of the deviation from a null hypothesis can be calculated exactly,
            rather than relying on an approximation.
            <br/>
            Fisher's exact test is a useful alternative to the chi-square test in cases where sample sizes are small. 
            The usual rule of thumb for deciding whether the chi-squared approximation is good enough is whether the expected
            values in all cells of the contingency table is greater than or equal to 5.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the dimensions of the given contigency table are not 2 x 2, or
            if any of the count values is negative.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.FishersExactTest(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the one-tailed Fisher's Exact Test p-value for the specified 2 x 2 contingency table.
            </summary>
            <param name="a">Upper left cell in contingency table.</param>
            <param name="b">Upper right cell in contingency table.</param>
            <param name="c">Lower left cell in contingency table.</param>
            <param name="d">Lower right cell in contingency table.</param>
            <returns>The lesser of the right and left tail p-value.</returns>
            <remarks>
            a, b, c and d are cell values for contingency table:
            <pre>
            a  b
            c  d
            </pre>
            Fisher's exact test is so-called because the significance of the deviation from a null hypothesis can be calculated exactly,
            rather than relying on an approximation.
            <br/>
            Fisher's exact test is a useful alternative to the chi-square test in cases where sample sizes are small. 
            The usual rule of thumb for deciding whether the chi-squared approximation is good enough is whether the expected
            values in all cells of the contingency table is greater than or equal to 5.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if any of the count values is negative.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.FishersExactTest(System.Int32,System.Int32,System.Int32,System.Int32,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Returns the Fisher's Exact Test p-value for the specified 2 x 2 contingency table and alternative hypothesis.
            </summary>
            <param name="a">Upper left cell in contingency table.</param>
            <param name="b">Upper right cell in contingency table.</param>
            <param name="c">Lower left cell in contingency table.</param>
            <param name="d">Lower right cell in contingency table.</param>
            <param name="type">Enum value indicating the form of the alternative hypothesis.</param>
            <returns>The p-value.</returns>
            <remarks>
            a, b, c and d are cell values for contingency table:
            <pre>
            a  b
            c  d
            </pre>
            Fisher's exact test is so-called because the significance of the deviation from a null hypothesis can be calculated exactly,
            rather than relying on an approximation.
            <br/>
            Fisher's exact test is a useful alternative to the chi-square test in cases where sample sizes are small. 
            The usual rule of thumb for deciding whether the chi-squared approximation is good enough is whether the expected
            values in all cells of the contingency table is greater than or equal to 5.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if any of the count values is negative.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.InterquartileRange(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the interquartile range of the given data, the difference
            between the median of the highest half and the median of the lowest half.
            </summary>
            <param name="data">A vector.</param>
            <returns>Interquartile range.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.InterquartileRange(System.Double[])">
            <summary>
            Calculates the interquartile range of the given data, the difference
            between the median of the highest half and the median of the lowest half.
            </summary>
            <param name="data">An array.</param>
            <returns>Interquartile range.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.InterquartileRange(System.Int32[])">
            <summary>
            Calculates the interquartile range of the given data, the difference
            between the median of the highest half and the median of the lowest half.
            </summary>
            <param name="data">An array.</param>
            <returns>Interquartile range.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.InterquartileRange(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the interquartile range of the given data, the difference
            between the median of the highest half and the median of the lowest half.
            </summary>
            <param name="data">A column.</param>
            <returns>Interquartile range.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Kurtosis(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the biased kurtosis of the given data.
            </summary>
            <param name="data">A vector.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Kurtosis(System.Double[])">
            <summary>
            Calculates the biased kurtosis of the given data.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Kurtosis(System.Int32[])">
            <summary>
            Calculates the biased kurtosis of the given data.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Kurtosis(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the biased kurtosis of the given data.
            </summary>
            <param name="data">A column.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNKurtosis(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the biased kurtosis of the given data, excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNKurtosis(System.Double[])">
            <summary>
            Calculates the biased kurtosis of the given data, excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNKurtosis(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the biased kurtosis of the given data, excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric has length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Kurtosis(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the kurtosis of the given data, using the specified bias type.
            </summary>
            <param name="data">A vector.</param>
            <param name="type">Bias type.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Kurtosis(System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the kurtosis of the given data, using the specified bias type.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="type">Bias type.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Kurtosis(System.Int32[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the kurtosis of the given data, using the specified bias type.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="type">Bias type.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Kurtosis(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the kurtosis of the given data, using the specified bias type.
            </summary>
            <param name="data">A column.</param>
            <param name="type">Bias type.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNKurtosis(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the kurtosis of the given data, using the specified bias type
            and excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <param name="type">Bias type.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNKurtosis(System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the kurtosis of the given data, using the specified bias type
            and excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="type">Bias type.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNKurtosis(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the kurtosis of the given data, using the specified bias type
            and excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <param name="type">Bias type.</param>
            <returns>Kurtosis</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length less than four.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxAbsIndex(System.Double[])">
            <summary>
            Calculates the index of the maximum absolute value in the given data set.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Absolute maximum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxAbsIndex(System.Int32[])">
            <summary>
            Calculates the index of the maximum absolute value in the given data set.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Absolute maximum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxAbsIndex(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the index of the maximum absolute value in the given data set.
            </summary>
            <param name="data">A column.</param>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <returns>Absolute maximum index.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxAbsIndex(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the index of the maximum absolute value in the given data set,
            excluding NaN values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">A vector.</param>
            <returns>Absolute maximum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxAbsIndex(System.Double[])">
            <summary>
            Calculates the index of the maximum absolute value in the given data set,
            excluding NaN values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Absolute maximum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxAbsIndex(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the index of the maximum absolute value in the given data set,
            excluding missing values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">A column.</param>
            <returns>Absolute maximum index.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxAbsValue(System.Double[])">
            <summary>
            Calculates the maximum absolute value in the given data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Absolute maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxAbsValue(System.Int32[])">
            <summary>
            Calculates the maximum absolute value in the given data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Absolute maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxAbsValue(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the maximum absolute value in the given data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Absolute maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxAbsValue(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the maximum absolute value in the given data set,
            excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Absolute maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxAbsValue(System.Double[])">
            <summary>
            Calculates the maximum absolute value in the given data set,
            excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Absolute maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxAbsValue(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the maximum absolute value in the given data set,
            excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Absolute maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxIndex(System.Double[])">
            <summary>
            Calculates the index of the maximum value in the given data set.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Maximum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxIndex(System.Int32[])">
            <summary>
            Calculates the index of the maximum value in the given data set.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Maximum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxIndex(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the index of the maximum value in the given data set.
            </summary>
            <param name="data">A column.</param>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <returns>Maximum index.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxIndex(System.Double[])">
            <summary>
            Calculates the index of the maximum value in the given data set,
            excluding NaN values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Maximum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxIndex(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the index of the maximum value in the given data set,
            excluding missing values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">A column.</param>
            <returns>Maximum index.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxValue(System.Double[])">
            <summary>
            Calculates the maximum value in the given data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxValue(System.Int32[])">
            <summary>
            Calculates the maximum value in the given data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MaxValue(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the maximum value in the given data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxValue(System.Double[])">
            <summary>
            Calculates the maximum value in the given data set,
            excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMaxValue(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the maximum value in the given data set,
            excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Maximum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Mean(System.Double[])">
            <summary>
            Calculates the arithmetic mean of the given data.
            </summary>
            <remarks>
            <c>mean = (data[0] + data[1] + ...) / data.Length</c>
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Mean(System.Int32[])">
            <summary>
            Calculates the arithmetic mean of the given data.
            </summary>
            <remarks>
            <c>mean = (data[0] + data[1] + ...) / data.Length</c>
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Mean(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the arithmetic mean of the given data.
            </summary>
            <remarks>
            <c>mean = (data[0] + data[1] + ...) / data.Count</c>
            </remarks>
            <param name="data">A column.</param>
            <returns>Mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMean(System.Double[])">
            <summary>
            Calculates the arithmetic mean of the given data, excluding NaN values.
            </summary>
            <remarks>
            <c>mean = (data[0] + data[1] + ...) / data.Length</c>
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMean(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the arithmetic mean of the given data, excluding missing values.
            </summary>
            <remarks>
            <c>mean = (data[0] + data[1] + ...) / data.Count</c>
            </remarks>
            <param name="data">A column.</param>
            <returns>Mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.GeometricMean(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the geometric mean of the given data.
            </summary>
            <remarks>
            <c>geometric mean = (data[0] * data[1] * ...) ^ (1/n)</c>
            </remarks>
            <param name="data">A vector.</param>
            <returns>Geometric mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.GeometricMean(System.Double[])">
            <summary>
            Calculates the geometric mean of the given data.
            </summary>
            <remarks>
            <c>geometric mean = (data[0] * data[1] * ...) ^ (1/n)</c>
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Geometric mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.GeometricMean(System.Int32[])">
            <summary>
            Calculates the geometric mean of the given data.
            </summary>
            <remarks>
            <c>geometric mean = (data[0] * data[1] * ...) ^ (1/n)</c>
            </remarks>
            <param name="data">An array of integers.</param>
            <returns>Geometric mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.GeometricMean(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the geometric mean of the given data.
            </summary>
            <remarks>
            <c>geometric mean = (data[0] * data[1] * ...) ^ (1/n)</c>
            </remarks>
            <param name="data">A column.</param>
            <returns>Geometric mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNGeometricMean(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the geometric mean of the given data, excluding NaN values.
            </summary>
            <remarks>
            <c>geometric mean = (data[0] * data[1] * ...) ^ (1/n)</c>
            </remarks>
            <param name="data">A vector.</param>
            <returns>Geometric mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNGeometricMean(System.Double[])">
            <summary>
            Calculates the geometric mean of the given data, excluding NaN values.
            </summary>
            <remarks>
            <c>geometric mean = (data[0] * data[1] * ...) ^ (1/n)</c>
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Geometric mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNGeometricMean(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the geometric mean of the given data, excluding missing values.
            </summary>
            <remarks>
            <c>geometric mean = (data[0] * data[1] * ...) ^ (1/n)</c>
            </remarks>
            <param name="data">A column.</param>
            <returns>Geometric mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.HarmonicMean(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the harmonic mean of the given data.
            </summary>
            <remarks>
            <c>Harmonic mean = n / ((1.0 / data[0]) + (1.0 / data[1]) + ...)</c>
            </remarks>
            <param name="data">A vector.</param>
            <returns>Harmonic mean.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.HarmonicMean(System.Double[])">
            <summary>
            Calculates the harmonic mean of the given data.
            </summary>
            <remarks>
            <c>Harmonic mean = n / (( 1.0 / data[0]) + (1.0 / data[1]) + ...)</c>
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Harmonic mean.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.HarmonicMean(System.Int32[])">
            <summary>
            Calculates the harmonic mean of the given data.
            </summary>
            <remarks>
            <c>Harmonic mean = n / (( 1.0 / data[0]) + (1.0 / data[1]) + ...)</c>
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Harmonic mean.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.HarmonicMean(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the harmonic mean of the given data.
            </summary>
            <remarks>
            <c>Harmonic mean = n / (( 1.0 / data[0]) + (1.0 / data[1]) + ...)</c>
            </remarks>
            <param name="data">A column.</param>
            <returns>Harmonic mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNHarmonicMean(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the harmonic mean of the given data, excluding NaN values.
            </summary>
            <remarks>
            <c>Harmonic mean = n / ((1.0 / data[0]) + (1.0 / data[1]) + ...)</c>
            </remarks>
            <param name="data">A vector.</param>
            <returns>Harmonic mean.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNHarmonicMean(System.Double[])">
            <summary>
            Calculates the harmonic mean of the given data, excluding NaN values.
            </summary>
            <remarks>
            <c>Harmonic mean = n / (( 1.0 / data[0]) + (1.0 / data[1]) + ...)</c>
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Harmonic mean.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNHarmonicMean(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the harmonic mean of the given data, excluding missing values.
            </summary>
            <remarks>
            <c>Harmonic mean = n / (( 1.0 / data[0]) + (1.0 / data[1]) + ...)</c>
            </remarks>
            <param name="data">A column.</param>
            <returns>Harmonic mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedMean(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the weighted average of the given data.
            </summary>
            <param name="data">A vector.</param>
            <param name="weights">A vector of weights.</param>
            <returns>Weighted mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedMean(System.Double[],System.Int32[])">
            <summary>
            Calculates the weighted average of the given data.
            </summary>
            <param name="data">An array.</param>
            <param name="weights">An array of weights.</param>
            <returns>Weighted mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedMean(System.Int32[],System.Double[])">
            <summary>
            Calculates the weighted average of the given data.
            </summary>
            <param name="data">An array.</param>
            <param name="weights">An array of weights.</param>
            <returns>Weighted mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedMean(System.Int32[],System.Int32[])">
            <summary>
            Calculates the weighted average of the given data.
            </summary>
            <param name="data">An array.</param>
            <param name="weights">An array of weights.</param>
            <returns>Weighted mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedMean(System.Double[],System.Double[])">
            <summary>
            Calculates the weighted average of the given data.
            </summary>
            <param name="data">An array.</param>
            <param name="weights">An array of weights.</param>
            <returns>Weighted mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedMean(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the weighted average of the given data.
            </summary>
            <param name="data">A column.</param>
            <param name="weights">A column of weights.</param>
            <returns>Weighted mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MeanDeviation(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the average absolute deviation of the given data.
            </summary>
            <param name="data">A vector.</param>
            <returns>Mean deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MeanDeviation(System.Int32[])">
            <summary>
            Calculates the average absolute deviation of the given data.
            </summary>
            <param name="data">An integer array.</param>
            <returns>Mean deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MeanDeviation(System.Double[])">
            <summary>
            Calculates the average absolute deviation of the given data.
            </summary>
            <param name="data">An array.</param>
            <returns>Mean deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MeanDeviation(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the average absolute deviation of the given data.
            </summary>
            <param name="data">A column.</param>
            <returns>Mean deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMeanDeviation(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the average absolute deviation of the given data, excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Mean deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMeanDeviation(System.Double[])">
            <summary>
            Calculates the average absolute deviation of the given data, excluding NaN values.
            </summary>
            <param name="data">An array.</param>
            <returns>Mean deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMeanDeviation(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the average absolute deviation of the given data, excluding missing
            values.
            </summary>
            <param name="data">A column.</param>
            <returns>Mean deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedMedian(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns the weighted median of an array of data with associated non-negative weights.  There must be at least one 
            postive non-zero weight.
            </summary>
            <param name="data">An DoubleVector containing the data.</param>
            <param name="weights">An DoubleVector containing the non-negative weights.</param>
            <remarks>If the lower sum of the weights is equal the weight's midpoint, then the average of the 
            adjacent two datapoints is returned.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">The two lengths of the data and weights vectors must be equal.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">There must be at least one postive non-zero weight.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">All weights must be non-negative. At least one negative weight was found.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedMedian(System.Double[],System.Double[])">
            <summary>
            Returns the weighted median of an array of data with associated non-negative weights.  There must be at least one 
            postive non-zero weight.
            </summary>
            <param name="data">An array containing the data.</param>
            <param name="weights">An array containing the non-negative weights.</param>
            <remarks>If the lower sum of the weights is equal the weight's midpoint, then the average of the 
            adjacent two datapoints is returned.</remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">The two lengths of the data and weights vectors must be equal.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">There must be at least one postive non-zero weight.</exception>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">All weights must be non-negative. At least one negative weight was found.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Median(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Returns the median of the given data.
            </summary>
            <param name="data">A column.</param>
            <returns>Median.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMedian(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the median value of column elements that are not equal
            to <c>NaN</c>.
            </summary>
            <param name="data">A column.</param>
            <returns>The median value of the elements in <c>data</c> that are not 
            <c>NaN</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has zero non-NaN length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMean(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the median of the absolute deviations from the mean.
            </summary>
            <param name="data">A vector.</param>
            <returns>Median deviation from the mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMean(System.Double[])">
            <summary>
            Calculates the median of the absolute deviations from the mean.
            </summary>
            <param name="data">An array.</param>
            <returns>Median deviation from the mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMean(System.Int32[])">
            <summary>
            Calculates the median of the absolute deviations from the mean.
            </summary>
            <param name="data">An array.</param>
            <returns>Median deviation from the mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMean(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the median of the absolute deviations from the mean.
            </summary>
            <param name="data">A column.</param>
            <returns>Median deviation from the mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMedian(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the median of the absolute deviations from the median.
            </summary>
            <param name="data">A vector.</param>
            <returns>Median deviation from median.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMedian(CenterSpace.NMath.Core.FloatVector)">
            <summary>
            Calculates the median of the absolute deviations from the median.
            </summary>
            <param name="data">A vector.</param>
            <returns>Median deviation from median.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMedian(System.Double[])">
            <summary>
            Calculates the median of the absolute deviations from the median.
            </summary>
            <param name="data">An array.</param>
            <returns>Median deviation from median.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMedian(System.Single[])">
            <summary>
            Calculates the median of the absolute deviations from the median.
            </summary>
            <param name="data">An array.</param>
            <returns>Median deviation from median.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMedian(System.Int32[])">
            <summary>
            Calculates the median of the absolute deviations from the median.
            </summary>
            <param name="data">An array.</param>
            <returns>Median deviation from median.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MedianDeviationFromMedian(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the median of the absolute deviations from the median.
            </summary>
            <param name="data">A column.</param>
            <returns>Median deviation from median.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinAbsIndex(System.Double[])">
            <summary>
            Calculates the index of the minimum absolute value in the given data set.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Absolute minimum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinAbsIndex(System.Int32[])">
            <summary>
            Calculates the index of the minimum absolute value in the given data set.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Absolute minimum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinAbsIndex(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the index of the minimum absolute value in the given data set.
            </summary>
            <param name="data">A column.</param>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <returns>Absolute minimum index.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinAbsIndex(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the index of the minimum absolute value in the given data set,
            excluding NaN values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">A vector.</param>
            <returns>Absolute minimum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinAbsIndex(System.Double[])">
            <summary>
            Calculates the index of the minimum absolute value in the given data set,
            excluding NaN values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Absolute minimum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinAbsIndex(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the index of the minimum absolute value in the given data set,
            excluding missing values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">A column.</param>
            <returns>Absolute minimum index.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinAbsValue(System.Double[])">
            <summary>
            Calculates the minimum absolute value in the given data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Absolute minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinAbsValue(System.Int32[])">
            <summary>
            Calculates the minimum absolute value in the given data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Absolute minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinAbsValue(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the minimum absolute value in the given data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Absolute minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinAbsValue(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the minimum absolute value in the given data set,
            excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Absolute minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinAbsValue(System.Double[])">
            <summary>
            Calculates the minimum absolute value in the given data set,
            excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Absolute minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinAbsValue(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the minimum absolute value in the given data set,
            excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Absolute minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinIndex(System.Double[])">
            <summary>
            Calculates the index of the minimum value in the given data set.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Minimum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinIndex(System.Int32[])">
            <summary>
            Calculates the index of the minimum value in the given data set.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Minimum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinIndex(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the index of the minimum value in the given data set.
            </summary>
            <param name="data">A column.</param>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <returns>Minimum index.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinIndex(System.Double[])">
            <summary>
            Calculates the index of the minimum value in the given data set,
            excluding NaN values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">An array.</param>
            <returns>Minimum index.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinIndex(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the index of the minimum value in the given data set,
            excluding missing values.
            </summary>
            <remarks>Returns <c>-1</c> if <c>data</c> has length of zero.</remarks>
            <param name="data">A column.</param>
            <returns>Minimum index.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinValue(System.Double[])">
            <summary>
            Calculates the minimum value in the given data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinValue(System.Int32[])">
            <summary>
            Calculates the minimum value in the given data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.MinValue(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the minimum value in the given data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinValue(System.Double[])">
            <summary>
            Calculates the minimum value in the given data set,
            excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMinValue(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the minimum value in the given data set,
            excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Minimum value.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Mode(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Determines the most common element in a data set.
            </summary>
            <param name="data">A vector.</param>
            <returns>Mode.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Mode(System.Double[])">
            <summary>
            Determines the most common element in a data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Mode.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Mode(System.Int32[])">
            <summary>
            Determines the most common element in a data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Mode.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Mode(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Determines the most common element in a data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Mode.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMode(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Determines the most common element in a data set, excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Mode.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMode(System.Double[])">
            <summary>
            Determines the most common element in a data set, excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Mode.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNMode(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Determines the most common element in a data set, excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Mode.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCheck(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Checks whether a data set contains any <c>NaN</c> values.
            </summary>
            <param name="data">A vector.</param>
            <returns><c>True</c> if <c>data</c> contains any <c>NaN</c> values.  
            <c>False</c>, otherwise</returns>returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCheck(System.Double[])">
            <summary>
            Checks whether a data set contains any <c>NaN</c> values.
            </summary>
            <param name="data">An array.</param>
            <returns><c>True</c> if <c>data</c> contains any <c>NaN</c> values.  
            <c>False</c>, otherwise</returns>returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNCheck(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Checks whether a data set contains any missing values.
            </summary>
            <param name="data">A column.</param>
            <returns><c>True</c> if <c>data</c> contains any missing values.  
            <c>False</c>, otherwise</returns>returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNRemove(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Creates a copy of a data set with NaN values removed.
            </summary>
            <param name="data">A vector.</param>
            <returns>A copy without NaN values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNRemove(System.Double[])">
            <summary>
            Creates a copy of a data set with NaN values removed.
            </summary>
            <param name="data">An array.</param>
            <returns>A copy without NaN values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNRemove(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Creates a copy of a data set with missing values removed.
            </summary>
            <param name="data">A column.</param>
            <returns>A copy without missing values.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNRemoveRows(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Creates a copy of the matrix with only those rows that do
            not contain NaN values.
            </summary>
            <param name="data">A matrix.</param>
            <returns>A copy without NaN values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNRemoveCols(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Creates a copy of the matrix with only those columns that do
            not contain NaN values.
            </summary>
            <param name="data">A matrix.</param>
            <returns>A copy without NaN values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNRemoveRows(CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Creates a copy of the data frame with only those rows that do
            not contain NaN values.
            </summary>
            <param name="data">A matrix.</param>
            <returns>A copy without NaN values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNRemoveCols(CenterSpace.NMath.Stats.DataFrame)">
            <summary>
            Creates a copy of the data frame with only those columns that do
            not contain NaN values.
            </summary>
            <param name="data">A matrix.</param>
            <returns>A copy without NaN values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Percentile(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Calculates the nth percentile of the elements in a data set.
            </summary>
            <param name="data">A vector.</param>
            <param name="n">A percentile between 0 and 1.</param>
            <returns>nth percentile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>n</c> is greater than one or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Percentile(System.Double[],System.Double)">
            <summary>
            Calculates the nth percentile of the elements in a data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="n">A percentile between 0 and 1.</param>
            <returns>nth percentile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>n</c> is greater than one or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Percentile(System.Int32[],System.Double)">
            <summary>
            Calculates the nth percentile of the elements in a data set.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="n">A percentile between 0 and 1.</param>
            <returns>nth percentile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>n</c> is greater than one or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Percentile(CenterSpace.NMath.Stats.IDFColumn,System.Double)">
            <summary>
            Calculates the nth percentile of the elements in a data set.
            </summary>
            <param name="data">A column.</param>
            <param name="n">A percentile between 0 and 1.</param>
            <returns>nth percentile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or <c>n</c> is greater than one or
            less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.PercentileRank(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Calculates the percentile in which a given value would fall, if
            it were in the given data set.
            </summary>
            <param name="data">A vector.</param>
            <param name="val">A value.</param>
            <returns>Percentile.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.PercentileRank(System.Double[],System.Double)">
            <summary>
            Calculates the percentile in which a given value would fall, if
            it were in the given data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="val">A value.</param>
            <returns>Percentile.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.PercentileRank(System.Int32[],System.Double)">
            <summary>
            Calculates the percentile in which a given value would fall, if
            it were in the given data set.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="val">A value.</param>
            <returns>Percentile.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.PercentileRank(CenterSpace.NMath.Stats.IDFColumn,System.Double)">
            <summary>
            Calculates the percentile in which a given value would fall, if
            it were in the given data set.
            </summary>
            <param name="data">A column.</param>
            <param name="val">A value.</param>
            <returns>Percentile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Quartile(CenterSpace.NMath.Core.DoubleVector,System.Int32)">
            <summary>
            Calculates the specified quartile of the elements in a data set.
            </summary>
            <param name="data">A vector.</param>
            <param name="quartile">A quartile between 0 and 4.</param>
            <returns>Quartile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>quartile</c> is greater than four or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Quartile(System.Double[],System.Int32)">
            <summary>
            Calculates the specified quartile of the elements in a data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="quartile">A quartile between 0 and 4.</param>
            <returns>Quartile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>quartile</c> is greater than four or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Quartile(System.Int32[],System.Int32)">
            <summary>
            Calculates the specified quartile of the elements in a data set.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="quartile">A quartile between 0 and 4.</param>
            <returns>Quartile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>quartile</c> is greater than four or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Quartile(CenterSpace.NMath.Stats.IDFColumn,System.Int32)">
            <summary>
            Calculates the specified quartile of the elements in a data set.
            </summary>
            <param name="data">A column.</param>
            <param name="quartile">A quartile between 0 and 4.</param>
            <returns>Quartile.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or <c>n</c> is greater than
            four or less than zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Rank(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Calculates the rank of a value within a given data set using
            ascending order.
            </summary>
            <param name="data">A vector.</param>
            <param name="val">A value.</param>
            <returns>Rank.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Rank(CenterSpace.NMath.Core.DoubleVector,System.Double,CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Calculates the rank of a value within a given data set using
            ascending order.
            </summary>
            <param name="data">A vector.</param>
            <param name="val">A value.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Rank.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Rank(System.Double[],System.Double)">
            <summary>
            Calculates the rank of a value within a given data set using
            ascending order.
            </summary>
            <param name="data">An array.</param>
            <param name="val">A value.</param>
            <returns>Rank.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Rank(System.Double[],System.Double,CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Calculates the rank of the value within a given data set using
            the specified order.
            </summary>
            <param name="data">An array.</param>
            <param name="val">A value.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Rank.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Rank(System.Int32[],System.Double)">
            <summary>
            Calculates the rank of a value within a given data set using
            ascending order.
            </summary>
            <param name="data">An array.</param>
            <param name="val">A value.</param>
            <returns>Rank.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Rank(System.Int32[],System.Double,CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Calculates the rank of the value within a given data set using
            the specified order.
            </summary>
            <param name="data">An array.</param>
            <param name="val">A value.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Rank.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Rank(CenterSpace.NMath.Stats.IDFColumn,System.Double)">
            <summary>
            Calculates the rank of the value within a given data set using
            the specified order.
            </summary>
            <param name="data">A column.</param>
            <param name="val">A value.</param>
            <returns>Rank.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Rank(CenterSpace.NMath.Stats.IDFColumn,System.Double,CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Calculates the rank of the value within a given data set using
            the specified order.
            </summary>
            <param name="data">A vector.</param>
            <param name="val">A value.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Rank.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Ranks(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Returns the ranks of each element in a data set using the specified
            sort order.
            </summary>
            <remarks>
            For example, <c>4.0, 1.2, 3.4, 1.2, -1.4</c> in descending order
            would return <c>1, 3, 2, 3, 5</c>
            </remarks>
            <param name="data">A vector.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Ranks.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Ranks(System.Double[],CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Returns the ranks of each element in a data set using the specified
            sort order.
            </summary>
            <remarks>
            For example, <c>4.0, 1.2, 3.4, 1.2, -1.4</c> in descending
            order would return <c>1, 3, 2, 3, 5</c>
            </remarks>
            <param name="data">An array.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Ranks.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Ranks(System.Int32[],CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Returns the ranks of each element in a data set using the specified
            sort order.
            </summary>
            <remarks>
            For example, <c>4.0, 1.2, 3.4, 1.2, -1.4</c> in descending
            order would return <c>1, 3, 2, 3, 5</c>
            </remarks>
            <param name="data">An array.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Ranks.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Ranks(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Returns the ranks of each element in a data set using the specified
            sort order.
            </summary>
            <remarks>
            For example, <c>4.0, 1.2, 3.4, 1.2, -1.4</c> in descending order
            would return <c>1, 3, 2, 3, 5</c>
            </remarks>
            <param name="data">A column.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Ranks.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Ranks(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns the ranks of each element in a data set using ascending
            sort order.
            </summary>
            <remarks>
            For example, <c>4.0, 1.2, 3.4, 1.2, -1.4</c> would return
            <c>4, 2, 3, 2, 1</c>
            </remarks>
            <param name="data">A vector.</param>
            <returns>Ranks.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Ranks(System.Double[])">
            <summary>
            Returns the ranks of each element in a data set using ascending
            sort order.
            </summary>
            <remarks>
            For example, <c>4.0, 1.2, 3.4, 1.2, -1.4</c> would return
            <c>4, 2, 3, 2, 1</c>
            </remarks>
            <param name="data">An array.</param>
            <returns>Ranks.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Ranks(System.Int32[])">
            <summary>
            Returns the ranks of each element in a data set using ascending
            sort order.
            </summary>
            <remarks>
            For example, <c>4.0, 1.2, 3.4, 1.2, -1.4</c> would return
            <c>4, 2, 3, 2, 1</c>
            </remarks>
            <param name="data">An array.</param>
            <returns>Ranks.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Ranks(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Returns the ranks of each element in a data set using ascending
            sort order.
            </summary>
            <remarks>
            For example, <c>4.0, 1.2, 3.4, 1.2, -1.4</c> would return
            <c>4, 2, 3, 2, 1</c>
            </remarks>
            <param name="data">A column.</param>
            <returns>Ranks.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.RMS(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the root mean square of the given data.
            </summary>
            <param name="data">A vector.</param>
            <returns>Root mean square.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.RMS(System.Double[])">
            <summary>
            Calculates the root mean square of the given data.
            </summary>
            <param name="data">An array.</param>
            <returns>Root mean square.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.RMS(System.Int32[])">
            <summary>
            Calculates the root mean square of the given data.
            </summary>
            <param name="data">An array.</param>
            <returns>Root mean square.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.RMS(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the root mean square of the given data.
            </summary>
            <param name="data">A column.</param>
            <returns>Root mean square.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Skewness(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the biased skewness, a measure of the symmetry of the data, 
            of the elements in a data set.
            </summary>
            <param name="data">A vector.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Skewness(System.Double[])">
            <summary>
            Calculates the biased skewness, a measure of the symmetry of the data, 
            of the elements in a data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Skewness(System.Int32[])">
            <summary>
            Calculates the biased skewness, a measure of the symmetry of the data, 
            of the elements in a data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Skewness(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the biased skewness, a measure of the symmetry of the data, 
            of the elements in a data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSkewness(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the biased skewness, a measure of the symmetry of the data, 
            of the elements in a data set. NaN values are excluded.
            </summary>
            <param name="data">A vector.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSkewness(System.Double[])">
            <summary>
            Calculates the biased skewness, a measure of the symmetry of the data, 
            of the elements in a data set. NaN values are excluded.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSkewness(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the biased skewness, a measure of the symmetry of the data, 
            of the elements in a data set. Missing values are excluded.
            </summary>
            <param name="data">A column.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Skewness(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the skewness, a measure of the symmetry of the data, of the
            the elements in a data set using the given bias type.
            </summary>
            <param name="data">A vector.</param>
            <param name="type">Bias type.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Skewness(System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the skewness, a measure of the symmetry of the data, of the
            the elements in a data set using the given bias type.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="type">Bias type.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Skewness(System.Int32[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the skewness, a measure of the symmetry of the data, of the
            the elements in a data set using the given bias type.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="type">Bias type.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Skewness(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the skewness, a measure of the symmetry of the data, of the
            the elements in a data set using the given bias type.
            </summary>
            <param name="data">A column.</param>
            <param name="type">Bias type.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSkewness(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the skewness, a measure of the symmetry of the data, of the
            the elements in a data set using the given bias type. NaN values are 
            excluded.
            </summary>
            <param name="data">A vector.</param>
            <param name="type">Bias type.</param>
            <returns>Skewness.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSkewness(System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the skewness, a measure of the symmetry of the data, of the
            the elements in a data set using the given bias type. NaN values are 
            excluded.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="type">Bias type.</param>
            <returns>Skewness.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSkewness(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the skewness, a measure of the symmetry of the data, of the
            the elements in a data set using the given bias type. Missing values 
            are excluded.
            </summary>
            <param name="data">A column.</param>
            <param name="type">Bias type.</param>
            <returns>Skewness.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sort(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Returns a sorted copy of the given data in the specified order.
            </summary>
            <param name="data">A vector.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Sorted vector.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sort(System.Double[],CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Returns a sorted copy of the given data in the specified order.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Sorted data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sort(System.Int32[],CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Returns a sorted copy of the given data in the specified order.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Sorted data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sort(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.SortingType)">
            <summary>
            Returns a sorted copy of the given data in the specified order.
            </summary>
            <param name="data">A column.</param>
            <param name="order">Ascending or descending.</param>
            <returns>Sorted column</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sort(System.Double[])">
            <summary>
            Returns a sorted copy of the given data in ascending order.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Sorted data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sort(System.Int32[])">
            <summary>
            Returns a sorted copy of the given data in ascending order.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Sorted data.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sort(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Returns a sorted copy of the given data in ascending order.
            </summary>
            <param name="data">A column.</param>
            <returns>Sorted column</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Spearmans(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Calculates Spearman's Rho for the given data.
            </summary>
            <remarks>Equivalent to the Pearson correlation using ranks.</remarks>
            <param name="data">Data</param>
            <returns>Spearman's Rho for each column with respect to every other column.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Spearmans(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates Spearman's Rho for the given data sets.
            </summary>
            <remarks>Equivalent to the Pearson correlation using ranks.</remarks>
            <param name="data1">First vector.</param>
            <param name="data2">Second vector.</param>
            <returns>Spearman's Rho.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Spearmans(System.Double[],System.Double[])">
            <summary>
            Calculates Spearman's Rho for the given data sets.
            </summary>
            <remarks>Equivalent to the Pearson correlation using ranks.</remarks>
            <param name="data1">First array.</param>
            <param name="data2">Second array.</param>
            <returns>Spearman's Rho.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Spearmans(System.Int32[],System.Int32[])">
            <summary>
            Calculates Spearman's Rho for the given data sets.
            </summary>
            <remarks>Equivalent to the Pearson correlation using ranks.</remarks>
            <param name="data1">First array.</param>
            <param name="data2">Second array.</param>
            <returns>Spearman's Rho.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Spearmans(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates Spearman's Rho for the given data sets.
            </summary>
            <remarks>Equivalent to the Pearson correlation using ranks.</remarks>
            <param name="data1">First column.</param>
            <param name="data2">Second column.</param>
            <returns>Spearman's Rho.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.StandardDeviation(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set.
            </summary>
            <param name="data">A vector.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.StandardDeviation(System.Double[])">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.StandardDeviation(System.Int32[])">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.StandardDeviation(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNStandardDeviation(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNStandardDeviation(System.Double[])">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNStandardDeviation(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.StandardDeviation(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            using the specified bias.
            </summary>
            <param name="data">A vector.</param>
            <param name="type">Bias type.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.StandardDeviation(System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            using the specified bias.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="type">Bias type.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.StandardDeviation(System.Int32[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            using the specified bias.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="type">Bias type.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.StandardDeviation(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            using the specified bias.
            </summary>
            <param name="data">A column.</param>
            <param name="type">Bias type.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNStandardDeviation(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            using the specified bias and excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <param name="type">Bias type.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNStandardDeviation(System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            using the specified bias and excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="type">Bias type.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNStandardDeviation(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the biased standard deviation of the elements in the given data set,
            using the specified bias and excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <param name="type">Bias type.</param>
            <returns>Standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sum(System.Double[])">
            <summary>
            Calculates the sum of the elements in the given data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Sum.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sum(System.Int32[])">
            <summary>
            Calculates the sum of the elements in the given data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Sum.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Sum(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the sum of the elements in the given data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSum(System.Double[])">
            <summary>
            Calculates the sum of the elements in the given data set that are not NaN.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Sum.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSum(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the sum of the elements in the given data set excluding
            missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Sum.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumOfSquaredErrors(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the sum of squared errors (SSE) of the elements in
            the given data set.
            </summary>
            <param name="data">A vector.</param>
            <returns>Sum of squared errors (SSE).</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumOfSquaredErrors(System.Double[])">
            <summary>
            Calculates the sum of squared errors (SSE) of the elements in
            the given data set.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Sum of squared errors (SSE).</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumOfSquaredErrors(System.Int32[])">
            <summary>
            Calculates the sum of squared errors (SSE) of the elements in
            the given data set.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Sum of squared errors (SSE).</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.SumOfSquaredErrors(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the sum of squared errors (SSE) of the elements in
            the given data set.
            </summary>
            <param name="data">A column.</param>
            <returns>Sum of squared errors (SSE).</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumOfSquaredErrors(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the sum of squared errors (SSE) of the elements in
            the given data set, excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Sum of squared errors (SSE).</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumOfSquaredErrors(System.Double[])">
            <summary>
            Calculates the sum of squared errors (SSE) of the elements in
            the given data set, excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Sum of squared errors (SSE).</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNSumOfSquaredErrors(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the sum of squared errors (SSE) of the elements in
            the given data set, excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <returns>Sum of squared errors (SSE).</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.TrimmedMean(CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Calculates the mean of the given data after the specified trimming.
            </summary>
            <remarks>A trim of 0.0 results in the mean, 1.0 in the median.</remarks>
            <param name="data">A vector.</param>
            <param name="trim">Trim.</param>
            <returns>Trimmed mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.TrimmedMean(System.Double[],System.Double)">
            <summary>
            Calculates the mean of the given data after the specified trimming.
            </summary>
            <remarks>A trim of 0.0 results in the mean, 1.0 in the median.</remarks>
            <param name="data">An array of doubles.</param>
            <param name="trim">Trim.</param>
            <returns>Trimmed mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.TrimmedMean(System.Int32[],System.Double)">
            <summary>
            Calculates the mean of the given data after the specified trimming.
            </summary>
            <remarks>A trim of 0.0 results in the mean, 1.0 in the median.</remarks>
            <param name="data">An array of doubles.</param>
            <param name="trim">Trim.</param>
            <returns>Trimmed mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.TrimmedMean(CenterSpace.NMath.Stats.IDFColumn,System.Double)">
            <summary>
            Calculates the mean of the given data after the specified trimming.
            </summary>
            <remarks>A trim of 0.0 results in the mean, 1.0 in the median.</remarks>
            <param name="data">A column.</param>
            <param name="trim">Trim.</param>
            <returns>Trimmed mean.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Variance(System.Double[])">
            <summary>
            Calculates the variance of the given data.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Variance(System.Int32[])">
            <summary>
            Calculates the variance of the given data.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data">An array of integers.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Variance(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the variance of the given data.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data">A column.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNVariance(System.Double[])">
            <summary>
            Calculates the variance of the given data, excluding NaN values.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data">An array of doubles.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNVariance(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the variance of the given data, excluding missing
            values.
            </summary>
            <remarks>
            Uses the default bias in <c>StatsSettings</c>.
            </remarks>
            <param name="data">A column.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Variance(CenterSpace.NMath.Core.FloatVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the variance of the given data, using the specified bias type.
            </summary>
            <param name="data">A vector.</param>
            <param name="type">Bias type.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Variance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the variance of the given data, using the specified bias type.
            </summary>
            <param name="data">A vector.</param>
            <param name="type">Bias type.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Variance(System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the variance of the given data, using the specified bias type.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="type">Bias type.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Variance(System.Int32[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the variance of the given data, using the specified bias type.
            </summary>
            <param name="data">An array of integers.</param>
            <param name="type">Bias type.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.Variance(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the variance of the given data, using the specified bias type.
            </summary>
            <param name="data">A column.</param>
            <param name="type">Bias type.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNVariance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the variance of the given data, using the specified bias type
            and excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <param name="type">Bias type.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNVariance(System.Double[],CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the variance of the given data, using the specified bias type
            and excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <param name="type">Bias type.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has a length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNVariance(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.BiasType)">
            <summary>
            Calculates the variance of the given data, using the specified bias type
            and excluding missing values.
            </summary>
            <param name="data">A column.</param>
            <param name="type">Bias type.</param>
            <returns>Variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedStandardDeviation(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Calculates the weighted standard deviation of the given data.
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <param name="normalizeWeights">
            If true, normalize the weights to sum to the length of the data vector. If the weights
            represent sampling (reliability) weights, normalizing is usually appropriate. But if the weights
            represent frequency counts, which in effect expand the data vector by these counts, do not normalize.
            </param>
            <returns>The weighted standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedStandardDeviation(System.Double[],System.Double[],System.Boolean)">
            <summary>
            Calculates the weighted standard deviation of the given data.
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <param name="normalize">
            If true, normalize the weights to sum to the length of the data array. If the weights
            represent sampling (reliability) weights, normalizing is usually appropriate. But if the weights
            represent frequency counts, which in effect expand the data vector by these counts, do not normalize.
            </param>
            <returns>The weighted standard deviation.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedVariance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Calculates the weighted variance of the given data.
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <param name="normalizeWeights">
            If true, normalize the weights to sum to the length of the data vector. If the weights
            represent sampling (reliability) weights, normalizing is usually appropriate. But if the weights
            represent frequency counts, which in effect expand the data vector by these counts, do not normalize.
            </param>
            <returns>The weighted variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedVariance(CenterSpace.NMath.Core.DoubleVector,System.Int32[])">
            <summary>
            Calculates the weighted variance of the given data. 
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <returns>The weighted variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
            <remarks>
            The weights are interpreted as frequency counts, which in effect expand the data vector by these counts, 
            so no normalization is performed. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedVariance(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the weighted variance of the given data. 
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <returns>The weighted variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
            <remarks>
            The weights are interpreted as sampling (reliability) weights and the weights are normalized to sum to 
            the length of the data vector. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedVariance(System.Double[],System.Double[],System.Boolean)">
            <summary>
            Calculates the weighted variance of the given data.
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <param name="normalizeWeights">
            If true, normalize the weights to sum to the length of the data array. If the weights
            represent sampling (reliability) weights, normalizing is usually appropriate. But if the weights
            represent frequency counts, which in effect expand the data array by these counts, do not normalize.
            </param>
            <returns>The weighted variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedVariance(System.Double[],System.Int32[])">
            <summary>
            Calculates the weighted variance of the given data. 
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <returns>The weighted variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
            <remarks>
            The weights are interpreted as frequency counts, which in effect expand the data array by these counts, 
            so no normalization is performed. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedVariance(System.Double[],System.Double[])">
            <summary>
            Calculates the weighted variance of the given data. 
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <returns>The weighted variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
            <remarks>
            The weights are interpreted as sampling (reliability) weights and the weights are normalized to sum to 
            the length of the data array. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedVariance(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,System.Boolean)">
            <summary>
            Calculates the weighted variance of the given data.
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <param name="normalizeWeights">
            If true, normalize the weights to sum to the length of the data column. If the weights
            represent sampling (reliability) weights, normalizing is usually appropriate. But if the weights
            represent frequency counts, which in effect expand the data column by these counts, do not normalize.
            </param>
            <returns>The weighted variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
            <exception cref="T:CenterSpace.NMath.Stats.StatsFunctions.NMathFormatConvertException">
            Thrown if <c>data</c> or <c>weights</c> are not numeric.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.WeightedVariance(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the weighted variance of the given data.
            </summary>
            <param name="data">The data.</param>
            <param name="weights">The weights.</param>
            <returns>The weighted variance.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">
            Thrown if <c>data</c> and <c>weights</c> do not have the same length.
            </exception>
            <exception cref="T:CenterSpace.NMath.Stats.StatsFunctions.NMathFormatConvertException">
            Thrown if <c>data</c> or <c>weights</c> are not numeric.
            </exception>
            <remarks>
            If <c>weights</c> is an IDFIntColumn, the weights are interpreted as frequency counts, which in effect expand the data by these counts, 
            so no normalization is performed. Otherwise, the weights are interpreted as sampling (reliability) weights and the weight values are
            normalized to sum to the length of the data column.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.VonNeumannRatio(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the Von Neumann ratio of the given data.
            </summary>
            <param name="data">A vector.</param>
            <returns>Von Neumann ratio.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.VonNeumannRatio(System.Double[])">
            <summary>
            Calculates the Von Neumann ratio of the given data.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Von Neumann ratio.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.VonNeumannRatio(System.Int32[])">
            <summary>
            Calculates the Von Neumann ratio of the given data.
            </summary>
            <param name="data">An array of integers.</param>
            <returns>Von Neumann ratio.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.VonNeumannRatio(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the Von Neumann ratio of the given data.
            </summary>
            <param name="data">A column.</param>
            <returns>Von Neumann ratio.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNVonNeumannRatio(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the Von Neumann ratio of the given data, excluding NaN values.
            </summary>
            <param name="data">A vector.</param>
            <returns>Von Neumann ratio.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNVonNeumannRatio(System.Double[])">
            <summary>
            Calculates the Von Neumann ratio of the given data, excluding NaN values.
            </summary>
            <param name="data">An array of doubles.</param>
            <returns>Von Neumann ratio.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> has length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.NaNVonNeumannRatio(CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Calculates the Von Neumann ratio of the given data, excluding missing
            values.
            </summary>
            <param name="data">A column.</param>
            <returns>Von Neumann ratio.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data</c> is not numeric or has length less than two.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.InitialCenters(CenterSpace.NMath.Core.DoubleMatrix,System.Int32)">
             <summary>
             Chooses the specified number of initial centers from the given data matrix, for clustering algorithms
             such as k-means.
             </summary>
             <param name="data">
             A matrix of data. Each row in the matrix represents an object to be clustered.
             </param>
             <param name="k">
             The number of initial cluster centers.
             </param>
             <returns>
             An array of row indices.
             </returns>
             <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
             Thrown if the number of cluster centers is less than one or greater than the number
             of data points (<c>data.Rows</c>).
             </exception>
             <remarks>
             Uses the following algorithm: If the distance between row r and its closest center is greater
             than the distance between the two closest centers (m, n), then r replaces m or n, whichever is
             closest to r. Otherwise, if the distance between row r and its closest center
            (q) is greater than the distance between q and its closest center, then row r replaces q.
             (Similar to SPSS QuickCluster function.)
             </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.VanDerWaerdenScores(System.Int32,System.Double,System.Double)">
            <summary>
            Returns a vector of Van Der Waerden scores. Van der Waerden scores  
            are the quantiles of a standard normal distribution. These scores 
            are also known as quantile normal scores.
            </summary>
            <param name="n">The number of scores to produce.</param>
            <param name="mean">Mean of the normal distribution.</param>
            <param name="variance">Variance of the normal distribution.</param>
            <returns>A vector containing n Van Der Waerden scores.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.VanDerWaerdenScores(System.Int32)">
            <summary>
            Returns a vector of Van Der Waerden scores. Van der Waerden scores  
            are the quantiles of a standard normal distribution. These scores 
            are also known as quantile normal scores. The scores are
            computed from the standard normal distribution with mean 0 
            and variance 1.
            </summary>
            <param name="n">The number of scores to produce.</param>
            <returns>A vector containing n Van Der Waerden scores.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CorrelatedRandomInputs(System.Int32,System.Double,CenterSpace.NMath.Core.RandomNumberGenerator,CenterSpace.NMath.Core.RandomNumberGenerator)">
            <summary>
            Creates two sequences of correlated random numbers using the specified random number
            generators. The created sequence's Spearman rank correlation will be approximately equal
            to the specified number.
            </summary>
            <param name="numSamples">The number of correlated random numbers to createn</param>
            <param name="desiredCorrelation">The desired Spearman rank correlation for the
            the two sequnces. Must be between -1 and 1, inclusive.</param>
            <param name="xInputs">Random number generator for one of the sequences.</param>
            <param name="yInputs">Random number generator for the other sequence.</param>
            <returns>Matrix whose columns are the two sequences of correlated random numbers.</returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if desired rank correlation is
            not between -1 and 1.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CorrelatedRandomInputs(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Matrix.DoubleSymmetricMatrix)">
            <summary>
            Accepts a set of input varaibles, each stored as a row in a matrix, and constructs
            a corresponding matrix of input variable values whose Spearmans rank correlation matrix is 
            approximately equal to the specified correlation matrix. The resulting 
            correlated inputs marginal distributions are the same as the original inputs.
            <see cref="T:CenterSpace.NMath.Stats.InputVariableCorrelator"/>
            </summary>
            <param name="inputs">Inputs to be transformed to correlated
            inputs with approximately the specified rank correlation matrix. Each
            row of the matrix represents an input variable value.</param>
            <param name="desiredCorrelations">A symmetric matrix containing the desired rank 
            correlation matrix.</param>
            <returns>A matrix containing the input variable values rearranged so that
            their rank correlation matrix is approximately equal to the 
            <c>desiredCorrelations</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CorrelatedRandomInputs(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Accepts a set of input varaibles, each stored as a row in a matrix, and constructs
            a corresponding matrix of input variable values whose Spearmans rank correlation matrix is 
            approximately equal to the specified correlation matrix. The resulting 
            correlated inputs with their marginal distributions intact.
            <see cref="T:CenterSpace.NMath.Stats.InputVariableCorrelator"/>
            </summary>
            <param name="randomInputs">Inputs to be transformed to correlated
            inputs with approximately the specified rank correlation matrix. Each
            row of the matrix represents an input variable value.</param>
            <param name="desiredCorrelations">A matrix containing the desired rank 
            correlation matrix.</param>
            <returns>A matrix containing the input variable values rearranged so that
            their rank correlation matrix is approximately equal to the 
            <c>desiredCorrelations</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CopyOnlyReal(CenterSpace.NMath.Core.FloatMatrix)">
            <summary>
            Returns a copy of the input matrix only if the input matrix contains
            only real values (no NaN's of infinite values allowed). If the 
            input matrix contains any non-real values an InvalidArgumentException
            is thrown.
            </summary>
            <param name="A">Matrix to copy.</param>
            <returns>A deep copy of <c>A</c> if it contains only real values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsFunctions.CopyOnlyReal(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Returns a copy of the input vector only if the input vector contains
            only real values (no NaN's of infinite values allowed). If the 
            input vector contains any non-real values an InvalidArgumentException
            is thrown.
            </summary>
            <param name="v">Vector to copy.</param>
            <returns>A deep copy of <c>v</c> if it contains only real values.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.StatsSettings">
            <summary>
            Class StatsSettings contains global settings for NMath Stats classes.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_NUMERIC_MISSING_VALUE">
            <summary>
            Default setting for numeric missing values.
            </summary>                                          
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_INTEGER_MISSING_VALUE">
            <summary>
            Default setting for integer missing values.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_STRING_MISSING_VALUE">
            <summary>
            Default setting for string missing values.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_DATETIME_MISSING_VALUE">
            <summary>
            Default setting for date time missing values.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_GENERIC_MISSING_VALUE">
            <summary>
            Default setting for generic missing values.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_NUMERIC_FORMAT">
            <summary>
            Default setting for numeric format.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_DATETIME_FORMAT">
            <summary>
            Default setting for date time format.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_INTEGER_FORMAT">
            <summary>
            Default setting for integer format.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_BIAS_TYPE">
            <summary>
            Default setting for bias.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.StatsSettings.DEFAULT_SORTING_TYPE">
            <summary>
            Default sorting type.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.NumericMissingValue">
            <summary>
            Gets and sets the default missing value for doubles.
            </summary>
            <remarks>
            The default is <c>System.Double.NaN</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.IntegerMissingValue">
            <summary>
            Gets and sets the default missing value for integers.
            </summary>
            <remarks>
            The default is <c>int.MinValue</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.StringMissingValue">
            <summary>
            Gets and sets the default missing value for strings.
            </summary>
            <remarks>
            The default is <c>"."</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.DateTimeMissingValue">
            <summary>
            Gets and sets the default missing value for datetimes.
            </summary>
            <remarks>
            The default is <c>System.DateTime.MinValue</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.GenericMissingValue">
            <summary>
            Gets and sets the default missing value for generic objects.
            </summary>
            <remarks>
            The default is <c>null</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.NumericFormat">
            <summary>
            Gets and sets the default format for displaying floating point numbers.
            </summary>
            <remarks>
            The default is <c>"F4"</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.IntegerFormat">
            <summary>
            Gets and sets the default format for displaying integers.
            </summary>
            <remarks>
            The default is <c>"G"</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.DateTimeFormat">
            <summary>
            Gets and sets the default format for displaying datetimes.
            </summary>
            <remarks>
            The default is <c>"d"</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.Bias">
            <summary>
            Gets and sets the default bias type.
            </summary>
            <remarks>
            The default is <c>"BiasType.Biased"</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.StatsSettings.Sorting">
            <summary>
            Gets and sets the default sorting order.
            </summary>
            <remarks>
            The default is <c>SortingType.Ascending</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.StatsSettings.RestoreDefaults">
            <summary>
            Restore all of the settings back to their default values.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.Subset">
            <summary>
            Class Subset represents a collection of indices that can be used to view
            a subset of data from another data structure.
            </summary>
            <remarks>
            Unlike a Slice or a Range, a Subset need not be continuous, or even 
            ordered. It is simply an arbitrary collection of indices.
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.Subset.indices_">
            <summary/>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.#ctor(System.Int32[])">
            <summary>
            Construct a Subset instance from the given array of integers.
            </summary>
            <param name="indices">An array of integers.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.#ctor(System.Collections.ICollection)">
            <summary>
            Constructs a Subset intance from the given collection of integers
            </summary>
            <param name="indices">ICollection whose elements must be Int32.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.#ctor(System.Boolean[])">
            <summary>
            Construct a Subset instance from the given array of boolean values. 
            </summary>
            <remarks>
            The contructed Subset contains the indices of all <c>true</c> elements in
            <c>bArray</c>.
            </remarks>
            <param name="bArray">An array of boolean values.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.#ctor(System.Int32)">
            <summary>
            Constructs a Subset instance with <c>length</c>indices starting from
            <c>0</c> with a step size of <c>1</c>.
            </summary>
            <param name="length">The total number of indices in the subset.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Subset instance with <c>length</c>indices starting from
            <c>start</c> with a step size of <c>1</c>.
            </summary>
            <param name="start">The starting index.</param>
            <param name="length">The total number of indices in the subset.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a Subset instance with <c>length</c>indices starting from
            <c>start</c> with a step size of <c>stepSize</c>.
            </summary>
            <param name="start">The starting index.</param>
            <param name="length">The total number of indices in the subset.</param>
            <param name="stepSize">The step size between successive indices.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.#ctor(CenterSpace.NMath.Stats.Subset[])">
            <summary>
            Construct a Subset instance from the given array of Subsets.
            </summary>
            <remarks>
            The Subsets are simply concatenated. To create a sorted Subset of the 
            unique indices, call <c>ToUnique()</c> on the constructed Subset.
            </remarks>
            <param name="subsets">An array of Subsets.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.#ctor">
            <summary>
            Used by Clone method.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Subset.First">
            <summary>
            Gets the first index in the subset.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Subset.Length">
            <summary>
            Gets the total number of indices in the subset.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Subset.Indices">
            <summary>
            Gets the underlying array of integer indices.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Subset.Last">
            <summary>
            Gets the last index in the subset.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Subset.Item(System.Int32)">
            <summary>
            Gets and sets the index at the given position.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.IndexOutOfRangeException">Thrown if the given position is
            less than zero or less than or equal to the length of this subset.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.Subset.Item(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Gets a subset of this subset.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Append(System.Int32)">
            <summary>
            Adds an index to this subset.
            </summary>
            <param name="index">The index to be added.</param>
            <returns>A new subset with <c>index</c> appended.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Equals(System.Object)">
            <summary>
            Tests for equality of this subset and another subset. Two subsets are equal
            if they have the same length and all indices are equal.
            </summary>
            <param name="o">Another subset.</param>
            <returns>
            <c>True</c> if the subsets are of the same length and contain
             the same indices; otherwise, <c>false</c>. Returns <c>false</c> if
             the passed object is <c>null</c>, or is not a Subset.
             </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Get(System.Int32)">
            <summary>
            Safely gets the index at the given position by looping around the end of
            subset if <c>index</c> exceeds <c>Length</c>.
            </summary>
            <param name="index">An index.</param>
            <returns>Returns <c>this[ index % this.Length ]</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.GetEnumerator">
            <summary>
            Creates an IEnumerator out of the indices in this subset.
            </summary>
            <returns>An IEnumerator of indices.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.GetHashCode">
            <summary>
            Returns an integer hash code for this subset.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Repeat(System.Int32)">
            <summary>
            Repeats this subset until the given length is reached.
            </summary>
            <param name="length">The total length of the new subset.</param>
            <returns>A new Subset.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Remove(System.Int32)">
            <summary>
            Removes the first occurence of an index from this subset.
            </summary>
            <param name="index">The index to be removed.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Reverse">
            <summary>
            Reverse the indices of this subset.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Split(System.Int32)">
            <summary>
            Splits this subset into the specified number of equally-sized subsets.
            </summary>
            <param name="n">The number of subsets into which to split this subset.</param>
            <returns>
            An array of <c>n</c> subsets, each containing <c>this.Length / n</c> indices.
            </returns>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if <c>n</c> does not divide
            <c>this.Length</c> equally.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Split(System.Int32,CenterSpace.NMath.Stats.Subset)">
             <summary>
             Splits this subset into an arbitrary array of subsets.
             </summary>
             <param name="n">The number of subsets into which to split this subset.</param>
             <param name="binIndices">A subset the same length as this subset, the <i>i</i>th 
             element of which indicates into which bin to place the <i>i</i>th element
             of this subset.</param>
             <returns>An array of subsets.</returns>
             <example><code>
             Subset mySub = new Subset( 10 );
             
             // Create a subset indicating how to split mySub into four subsets
             Subset bins = new Subset( new int[] { 3, 1, 0, 2, 2, 1, 1, 2, 3, 0 } );
            
             Subset[] subsetArray = mySub.Split( 4, bins );
             // subsetArray[0] = 2,0
             // subsetArray[1] = 1,5,6
             // subsetArray[3] = 3,4,7
             // subsetArray[4] = 0,8
             </code></example>
             <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length of <c>binIndices</c> is not
             equal to the length of this subset.</exception>
             <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if an index in <c>binIndices</c>
             is less than zero or greater than <c>n</c>.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.ToReverse">
            <summary>
            Returns a new subset containing the indices of this subset in the reverse order.
            </summary>
            <returns>A new subset containing the indices of this subset in the reverse order.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.ToUnique">
            <summary>
            Returns a new subset containing the sorted indices of this subset, with all 
            repetitions removed.
            </summary>
            <returns>A new subset containing the sorted indices of this subset, with all 
            repetitions removed.
            </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.ToString">
            <summary>
            Returns a formatted string representation of this subset.
            </summary>
            <returns>A formatted string representation of this subset.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Unique">
            <summary>
            Sorts the indices in this subset and removes any repetitions.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Clone">
            <summary>
            Creates a deep copy of this Subset.
            </summary>
            <returns>A deep copy of this Subset.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.GetGroupings(CenterSpace.NMath.Stats.Factor)">
            <summary>
            Returns an array of subsets containing the indices for each level of
            the given factor.
            </summary>
            <param name="f">A factor.</param>
            <returns>An array of subsets containing the indices for each level of
            the given factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.GetGroupings(CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Stats.Factor)">
            <summary>
            Returns a two-dimensional jagged array of subsets containing the indices for
            each combination of levels in the two given factors.
            </summary>
            <param name="f1">A factor.</param>
            <param name="f2">A factor.</param>
            <returns>A two-dimensional jagged array of subsets containing the indices for
            each combination of levels in the two given factors.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Sample(System.Int32)">
            <summary>
            Returns a random shuffle of <c>0...n-1</c>.
            </summary>
            <param name="n">The number of elements.</param>
            <returns>A subset containing a random shuffle of <c>0...n-1</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Sample(System.Int32,System.Int32)">
            <summary>
            Returns a random shuffle of <c>0...n-1</c>
            </summary>
            <param name="n">The number of elements.</param>
            <param name="randomShuffleSeed">Seed to the random number generator
            used to implement the random shuffle.</param>
            <returns>A subset containing a random shuffle of <c>0...n-1</c></returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Sample(System.Int32,CenterSpace.NMath.Core.RandGenMTwist)">
            <summary>
            Returns a random shuffle of <c>0...n-1</c>.
            </summary>
            <param name="n">The number of elements.</param>
            <param name="rand">Random number generator.</param>
            <returns>A subset containing a random shuffle of <c>0...n-1</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Negate(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Negates a subset.
            </summary>
            <remarks>
            <c>-s[i]</c>
            </remarks>
            <param name="s">A subset.</param>
            <returns>A new subset containing negated values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Increment(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Increments the indices in a subset.
            </summary>
            <remarks>
            <c>s[i]++</c>
            </remarks>
            <param name="s">A subset.</param>
            <returns>The incremented subset.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Decrement(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Decrements the indices in a subset.
            </summary>
            <remarks>
            <c>s[i]--</c>
            </remarks>
            <param name="s">A subset.</param>
            <returns>The decremented subset.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Add(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Adds two subsets.
            </summary>
            <param name="x">A subset.</param>
            <param name="y">A subset.</param>
            <returns>A new subset containing <c>y</c> concatenated to <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Add(CenterSpace.NMath.Stats.Subset,System.Int32)">
            <summary>
            Adds a subset and a scalar.
            </summary> 
            <remarks>
            <c>y[i] = s[i] + x</c>
            </remarks>
            <param name="s">A subset.</param> 
            <param name="x">A scalar.</param>
            <returns>A new subset containing the sum.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Subtract(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Subtracts one subset from another.
            </summary>
            <param name="x">A subset.</param>
            <param name="y">A subset.</param>
            <returns>A new subset containing the indices in <c>x</c> that are not in <c>y</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Subtract(CenterSpace.NMath.Stats.Subset,System.Int32)">
            <summary>
            Subtracts a scalar from a subset.
            </summary> 
            <remarks>
            <c>y[i] = s[i] - x</c>
            </remarks>
            <param name="s">A subset.</param> 
            <param name="x">A scalar.</param>
            <returns>A new vector containing the difference.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Intersection(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Returns the intersection of two subsets.
            </summary>
            <param name="x">A subset.</param>
            <param name="y">A subset.</param>
            <returns>A new subset containing the intersection of <c>x</c> and <c>y</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.Union(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Returns the union of two subsets.
            </summary>
            <param name="x">A subset.</param>
            <param name="y">A subset.</param>
            <returns>A new subset containing the union of <c>x</c> and <c>y</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_Implicit(CenterSpace.NMath.Stats.Subset)~System.Int32[]">
            <summary>
            Implicitly converts a subset into an array of integers. 
            </summary>
            <param name="s">A subset.</param>
            <returns>An array of integers.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_Equality(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Tests for equality of two subsets. Two subsets are equal
            if they have the same length and all indices are equal.
            </summary>
            <param name="x">The left-hand subset.</param>
            <param name="y">The right-hand subset.</param>
            <returns>
            <c>True</c> if the subsets are of the same length and contain
             the same indices, or if both subsets are <c>null</c>;
             otherwise, <c>false</c>.
             </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_Inequality(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Tests for inequality of two subsets. Two subsets are unequal
            if they have different lengths or their indices are not
            all equal.
            </summary>
            <param name="x">The left-hand subset.</param>
            <param name="y">The right-hand subset.</param>
            <returns>
            <c>True</c> if the subsets are of different lengths, contain
             different indices, or are not both <c>null</c>;
             otherwise, <c>false</c>.
             </returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_UnaryPlus(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Returns a subset.
            </summary>
            <param name="s">A subset.</param>
            <returns>The specified subset.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_UnaryNegation(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Negates the elements in this subset.
            </summary>
            <param name="s">A subset.</param>
            <returns>A new subset containing negated values.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_Increment(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Increments the elements in this subset.
            </summary>
            <remarks>
            <c>s[i]++</c>
            </remarks>
            <param name="s">This subset.</param>
            <returns>The incremented subset.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_Decrement(CenterSpace.NMath.Stats.Subset)">
            <summary>
            Decrements the indices in this subset.
            </summary>
            <remarks>
            <c>s[i]--</c>
            </remarks>
            <param name="s">This subset.</param>
            <returns>The decremented subset.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_Addition(CenterSpace.NMath.Stats.Subset,System.Int32)">
            <summary>
            Adds a subset and a scalar.
            </summary> 
            <remarks>
            <c>y[i] = s[i] + x</c>
            </remarks>
            <param name="s">A subset.</param> 
            <param name="x">A scalar.</param>
            <returns>A new subset containing the sum.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_Addition(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Adds two subsets.
            </summary>
            <param name="x">A subset.</param>
            <param name="y">A subset.</param>
            <returns>A new subset containing <c>y</c> concatenated to <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_Subtraction(CenterSpace.NMath.Stats.Subset,System.Int32)">
            <summary>
            Subtracts a scalar from a subset.
            </summary> 
            <remarks>
            <c>y[i] = s[i] - x</c>
            </remarks>
            <param name="s">A subset.</param> 
            <param name="x">A scalar.</param>
            <returns>A new vector containing the difference.</returns> 
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_Subtraction(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Subtracts one subset from another.
            </summary>
            <param name="x">A subset.</param>
            <param name="y">A subset.</param>
            <returns>A new subset containing the indices in <c>x</c> that are not in <c>y</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_BitwiseAnd(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Returns the intersection of two subsets.
            </summary>
            <param name="x">A subset.</param>
            <param name="y">A subset.</param>
            <returns>A new subset containing the intersection of <c>x</c> and <c>y</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.Subset.op_BitwiseOr(CenterSpace.NMath.Stats.Subset,CenterSpace.NMath.Stats.Subset)">
            <summary>
            Returns the union of two subsets.
            </summary>
            <param name="x">A subset.</param>
            <param name="y">A subset.</param>
            <returns>A new subset containing the union of <c>x</c> and <c>y</c>,
            sorted with duplicates removed.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.SVDRegressionCalculation">
            <summary>
            Class SVDRegressionCalculation computes linear regression parameters by 
            the method of least squares using a singular value decomposition.
            </summary>
            <remarks>
            Class SVDRegressionCalculation finds the minimal norm solution to the
            overdetermined linear system:
            <code>Ax = b</code>
            That is, this class finds the vector <c>x</c> that minimizes the 2-norm
            of the residual vector <c>Ax - b</c>.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.#ctor">
            <summary>
            Constructs an SVDRegressionCalculation instance with all sizes 
            equal to zero.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.#ctor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Constructs an SVDRegressionCalculation instance from the given matrix.
            </summary>
            <param name="A">A matrix</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.#ctor(CenterSpace.NMath.Core.DoubleMatrix,System.Double)">
            <summary>
            Constructs a SVDRegressionCalculation instance from the given matrix. The
            specified tolerance is used in computing the numerical rank of
            the matrix.
            </summary>
            <param name="A">A matrix.</param>
            <param name="tolerance">Tolerance for computing the numerical
            rank of the matrix <c>A</c>. All singular values of the matrix
            less than <c>tolerance</c> are set to zero.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SVDRegressionCalculation.Rows">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SVDRegressionCalculation.Cols">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SVDRegressionCalculation.RankAvailable">
            <summary>
            Returns the rank if it was calculated as a byproduct of the parameter
            calculation.
            </summary>
            <remarks>
            For instances of QRRegressionCalculation, this is always <c>true</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SVDRegressionCalculation.Rank">
            <summary>
            Gets the numerical rank of the matrix.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SVDRegressionCalculation.XTXInvAvailable">
            <summary>
            Gets a boolean indicating whether or not the matrix formed by taking
            the inverse of the product of the transpose of the regression matrix
            with itself is avaialble as part of the decomposition.
            </summary>
            <remarks>If <c>X</c> is the regression matrix and <c>'</c>
            denotes matrix transposition, then this property is <c>true</c> if this
            calculation object can return the inverse of the matrix <c>X'X</c>.
            </remarks>
            <remarks>
            For instances of QRRegressionCalculation, this is always <c>true</c>.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SVDRegressionCalculation.XTXInv">
            <summary>
            Gets the matrix formed by taking the inverse of the product of the 
            transpose of the regression matrix with itself, if available.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SVDRegressionCalculation.IsGood">
            <summary>
            Returns <c>true</c> if the singular value decomposition may be used to
            solve least squares problems; otherwise <c>false</c>. 
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SVDRegressionCalculation.Tolerance">
            <summary>
            Gets and sets the tolerance for computing the numerical rank and SVD tuncation.
            In truncation all singular values less than <c>Tolerance</c> are set to zero and
            solutions will be computed using the truncated SVD. 
            If the <c>Tolerance</c> is set to 0 no truncation will be performed. The
            default tolerance is 0, i.e. no truncation.
            </summary>
            <remarks>Truncation is only useful if your predictor matrix has less than
            full rank.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.SVDRegressionCalculation.Fail">
            <summary>
            Gets the status of the singular value decomposition.
            </summary>
            Returns <c>true</c> if the decomposition algorithm failed to
            converge; otherwise, <c>false</c>.
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.Factor(CenterSpace.NMath.Core.DoubleMatrix,System.Double)">
            <summary>
            Factors a given matrix so that it may be used to solve least squares problems.
            The specified tolerance is used in computing the numerical rank of the matrix.
            </summary>
            <param name="A">A matrix.</param>
            <param name="tolerance">
            Tolerance for computing the numerical rank of the matrix <c>A</c>. All singular
            values of the matrix <c>A</c> less than <c>tolerance</c> are set to zero.
            </param>
            <remarks>For the SVD least squares method to succeed, the matrix <c>A</c> must
            have full rank.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.Factor(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Factors a given matrix so that it may be used to solve least squares problems.
            </summary>
            <param name="A">A matrix.</param>
            <remarks>For the SVD least squares method to succeed, the matrix <c>A</c> must
            have full rank.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.Solve(CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Computes the solution to the least squares problem <c>Ax = b</c>.
            </summary>
            <param name="b">The right-hand side of the equation.</param>
            <returns>The solution <c>x</c> that minimizes the 2-norm of the 
            residual vector <c>Ax - b</c>.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length
            of the vector <c>b</c> is not equal to the number of rows.</exception>
            <remarks>If a tolerance for the SVD calculation was specified the 
            solution will be computed using the truncated SVD.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Calculates the parameters for the regression using a singular value decomposition
            of the regression matrix to solve the least squares problem.
            </summary>
            <param name="regressionMatrix">A regression matrix.</param>
            <param name="observations">A vector of observations.</param>
            <param name="dataCleansed">If true, the regression matrix is guaranteed to contain no NaN or Infinity values.</param>
            <returns>The calculated model parameters.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length of the observation
            vector is not equal to the number of rows in the regression matrix.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.CalculateParameters(CenterSpace.NMath.Core.DoubleMatrix,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Calculates the parameters for the regression using a singular value decomposition
            of the regression matrix to solve the least squares problem.
            </summary>
            <param name="regressionMatrix">A regression matrix.</param>
            <param name="observations">A vector of observations.</param>
            <returns>The calculated model parameters.</returns>
            <exception cref="T:CenterSpace.NMath.Core.MismatchedSizeException">Thrown if the length of the observation
            vector is not equal to the number of rows in the regression matrix.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.Clone">
            <summary>
            Creates a deep copy of this regression calculator instance.
            </summary>
            <returns>A deep copy of this regression calculator instance.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.SVDRegressionCalculation.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Checks for soln_ to be null, instantiates if so
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TDistribution">
            <summary>
            Class TDistribution represents Student's t-distribution with the specified
            degrees of freedom.
            </summary>
            <remarks>
            As the number of degrees of freedom grows, the t-distribution approaches the
            normal distribution with mean 0 and variance 1.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TDistribution.#ctor(System.Double)">
            <summary>
            Constructs a TDistribution instance with the given degrees of freedom.
            </summary>
            <param name="df">The degrees of freedom for the distribution.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the specified 
            degrees of freedom is less than or equal to zero.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TDistribution.#ctor">
            <summary>
            Default constructor. Constructs a TDistribution instance with one degree of
            freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TDistribution.DegreesOfFreedom">
            <summary>
            Gets and sets the degrees of freedom for the distribution.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if set to a value less
            than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <remarks>The variance of the distribution is the standard deviation squared.
            If the degrees of freedom for the distribution is less than 3, the variance
            is undefined. In this case <c>Double.NaN</c> is returned.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
            <remarks>
            The skewness is the third central moment divided by the cube of 
            the standard deviation. If the degrees of freedom for the distribution 
            is less than 4, the skewness is undefined. However, the distribution is
            symmetric in all cases so zero is returned in all cases.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
            <remarks>
            The kurtosis is the fourth centeral moment divided by the
            fouth power of the standard deviation normalized so that
            the kurtosis if the normal distribution is zero. If the degrees of 
            freedom for the distribution is less than 5, the skewness is undefined.
            In this case <c>Double.NaN</c> is returned.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="t">The value at which to evaluate the probability density function.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at the given value.
            </summary>
            <param name="z">The value at which to evaluate the cumulative density function.</param>
            <returns>The cumulative density function evaluated at <c>z</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>z</c> is
            probability that the value of a random variable having this normal density is
            less than or equal to <c>z</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated at the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If <c>p</c> is greater than 1 or less than zero,
            Double.NaN (Not a Number) is returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TDistribution.Clone">
            <summary>
            Creates a deep copy of this TDistribution.
            </summary>
            <returns>A deep copy of this TDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TriangularDistribution">
            <summary>
            Class TriangularDistribution represents the triangular probability distribution.
            </summary>
            <remarks>The triangular distribution is defined by three parameters, a lower
            limit a, an upper limit b, and number c, between a and b, called the mode.
            the probability density function (PDF) has the shape of a triangle in the 
            X/Y plane with verices (a, 0), (b, 0), and (c, y), where y is chosen so 
            that the area of the triangle is 1.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a TriangularDistribution instance with the given upper
            and lower limits and mode equal to their midpoint.
            </summary>
            <param name="lowerLimit">The lower limit of the distribution.</param>
            <param name="upperLimit">The upper limit of the distribution.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.#ctor">
            <summary>
            Default constructor. Constructs a TriangularDistribution with lower 
            limit 0, upper limit 1, and mode 0.5.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a TriangularDistribution with the given parameters.
            </summary>
            <param name="lowerLimit">The upper limit of the distribution.</param>
            <param name="upperLimit">The lower limit of the distribution.</param>
            <param name="mode">The mode of the distribution. Must be between the
            upper and lower limits.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the mode is 
            less than the lower limit or greater than the upper limit.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a TriangularDistribution instance from serialization information.
            </summary>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TriangularDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TriangularDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            <remarks>The variance of the distribution is the standard deviation squared.
            </remarks>
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TriangularDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
            <remarks>
            The kurtosis is the fourth centeral moment divided by the
            fouth power of the standard deviation normalized so that
            the kurtosis if the normal distribution is zero.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TriangularDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TriangularDistribution.LowerLimit">
            <summary>
            Gets the lower limit of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TriangularDistribution.UpperLimit">
            <summary>
            Gets the upper limit of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TriangularDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this triangular density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated a the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If the input probability, p, is less than 0 or greater than 1 the 
            NaN value is returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.Clone">
            <summary>
            Creates a deep copy of this TriangularDistribution.
            </summary>
            <returns>A deep copy of this TriangularDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.SetParameters(System.Double,System.Double,System.Double)">
            <summary>
            Sets the parameter for this distribution.
            </summary>
            <param name="lowerLimit">The lower limit of the distribution.</param>
            <param name="upperLimit">The upper limit of the distribution.</param>
            <param name="mode">The mode of the distribution</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the mode is less
            than the lower limit or greater that the upper limit.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TriangularDistribution.SetParameters(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="limit1"></param>
            <param name="limit2"></param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoSampleFTest">
            <summary>
            Class TwoSampleFTest tests if the variances of two populations
            are equal.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor">
            <summary>
            Default constructor. Constructs a TwoSampleFTest instance with default
            sample parameters, alpha level, and hypothesis type.
            </summary>
            <remarks>
            Constructs a TwoSampleFTest instance with a sample means of 0.0, sample
            standard deviations of 1.0, and sample sizes of 2.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            Constructs a TwoSampleFTest instance with the given sample parameters.
            </summary>
            <param name="s1">The standard deviation of the first sample.</param>
            <param name="n1">The size of the first sample.</param>
            <param name="s2">The standard deviation of the second sample.</param>
            <param name="n2">The size of the second sample.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(System.Double,System.Int32,System.Double,System.Int32,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleFTest instance with the given sample and
            and hypothesis parameters.
            </summary>
            <param name="s1">The standard deviation of the first sample.</param>
            <param name="n1">The size of the first sample.</param>
            <param name="s2">The standard deviation of the second sample.</param>
            <param name="n2">The size of the second sample.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a TwoSampleFTest instance using the given vectors of sample data.
            </summary>
            <param name="data1">A vector of observed values for the first sample.</param>
            <param name="data2">A vector of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given vectors. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleFTest instance using the given vectors of sample data, and
            the given hypothesis parameters.
            </summary>
            <param name="data1">A vector of observed values for the first sample.</param>
            <param name="data2">A vector of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given vectors. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructs a TwoSampleFTest instance using the given arrays of sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(System.Int32[],System.Int32[],System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleFTest instance using the given arrays of sample data, and
            the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Constructs a TwoSampleFTest instance using the given arrays of sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays. 
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(System.Double[],System.Double[],System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleFTest instance using the given arrays of sample data, and
            the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a TwoSampleFTest instance using the given columns of sample data.
            </summary>
            <param name="data1">A column of observed values for the first sample.</param>
            <param name="data2">A column of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given columns. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample is not numeric, or has length of zero after removing
            missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleFTest instance using the given columns of sample data, and
            the given hypothesis parameters.
            </summary>
            <param name="data1">A column of observed values for the first sample.</param>
            <param name="data2">A column of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given columns. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample is not numeric, or has length of zero after removing
            missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Calls compute values following deserialization
            </summary>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.Distribution">
            <summary>
            Gets the distribution of the test statistic associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.DegreesOfFreedom1">
            <summary>
            Gets the numerator degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.DegreesOfFreedom2">
            <summary>
            Gets the denominator degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.Type">
            <summary>
            Gets and sets the form of the alternative hypothesis associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.S1">
            <summary>
            Gets the standard deviation of the first sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.N1">
            <summary>
            Gets the size of the first sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.S2">
            <summary>
            Gets the standard deviation of the second sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.N2">
            <summary>
            Gets the size of the second sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.Statistic">
            <summary>
            Gets the value of the test statistic associated with this hypothesis
            test.
            </summary>
            <remarks><code>
            F = S1^2 / S2^2
            </code></remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.LeftCriticalValue">
            <summary>
            Gets the left critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.RightCriticalValue">
            <summary>
            Gets the right critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.LowerConfidenceLimit">
            <summary>
            Gets the 1 - alpha lower confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>0.0</c> for one-sided tests to the left.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.UpperConfidenceLimit">
            <summary>
            Gets the 1 - alpha upper confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.PositiveInfinity</c> for one-sided tests to the right.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.LeftProbability">
            <summary>
            Gets the area under the probability distribution to the left of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.RightProbability">
            <summary>
            Gets the area under the probability distribution to the right of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
            <remarks>
            Returns LeftProbability for one-sided tests to the left, 
            RightProbability for one-sided tests to the right, and twice
            the smaller of LeftProbability and RightProbability for two-sided
            tests.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected, using the current 
            hypothesis type and alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>this.P &lt; this.Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with TwoSampleFTests.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleFTest.DefaultType">
            <summary>
            Gets and sets the default form of the alternative hypothesis associated with
            TwoSampleFTests.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.Update(System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            Updates the test statistic with new sample parameters.
            </summary>
            <param name="s1">The standard deviation of the first sample.</param>
            <param name="n1">The size of the first sample.</param>
            <param name="s2">The standard deviation of the second sample.</param>
            <param name="n2">The size of the second sample.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.Update(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A vector of observed values for the first sample.</param>
            <param name="data2">A vector of observed values for the second sample.</param>
            <remarks>
            New sample standard deviations and sample sizes are computed from the
            given data vectors. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.Update(System.Double[],System.Double[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            New sample standard deviations and sample sizes are computed from the
            given data vectors. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.Update(System.Int32[],System.Int32[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            New sample standard deviations and sample sizes are computed from the
            given data vectors.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.Update(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A column of observed values for the first sample.</param>
            <param name="data2">A column of observed values for the second sample.</param>
            <remarks>
            New sample standard deviations and sample sizes are computed from the
            given data columns. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample is not numeric, or has length of zero after removing
            missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.Clone">
            <summary>
            Creates a deep copy of this TwoSampleFTest.
            </summary>
            <returns>A deep copy of this TwoSampleFTest.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleFTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoSampleKSTest">
            <summary>
            Class TwoSampleKSTest performs a two-sample Kolmogorov-Smirnov test to compare
            the distributions of values in two data sets. 
            </summary> 
            <remarks>
             For each potential value <c>x</c>, the Kolmogorov-Smirnov test compares the
             proportion of values in the first sample less than <c>x</c> with the proportion
             of values in the second sample less than <c>x</c>. The null hypothesis is that 
             the two samples have the same continuous distribution. The alternative
             hypothesis is that they have different continuous distributions.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.#ctor">
            <summary>
            Default constructor. Constructs an empty TwoSampleKSTest instance.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a TwoSampleKSTest from the given samples.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero, after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Double)">
            <summary>
            Constructs a TwoSampleKSTest from the given samples and specified
            alpha level.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero, after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Constructs a TwoSampleKSTest from the given samples.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.#ctor(System.Int32[],System.Int32[],System.Double)">
            <summary>
            Constructs a TwoSampleKSTest from the given samples and specified
            alpha level.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructs a TwoSampleKSTest from the given samples.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero, after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.#ctor(System.Double[],System.Double[],System.Double)">
            <summary>
            Constructs a TwoSampleKSTest from the given samples and specified
            alpha level.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero, after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a TwoSampleKSTest from the given samples.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero, after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,System.Double)">
            <summary>
            Constructs a TwoSampleKSTest from the given samples and specified
            alpha level.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero, after 
            removing missing values.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleKSTest.Statistic">
            <summary>
            Gets the value of the test statistic associated with this hypothesis
            test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleKSTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleKSTest.N1">
            <summary>
            Gets the size of the first sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleKSTest.N2">
            <summary>
            Gets the size of the second sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleKSTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleKSTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected, using the current 
            alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleKSTest.CriticalValue">
            <summary>
            Gets the critical value based on the current alpha level associated
            with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleKSTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with TwoSampleKSTests.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.Update(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Updates this test with new sample data.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero, after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.Update(System.Int32[],System.Int32[])">
            <summary>
            Updates this test with new sample data.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.Update(System.Double[],System.Double[])">
            <summary>
            Updates this test with new sample data.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero, after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.Update(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Updates this test with new sample data.
            </summary>
            <param name="data1">The first sample.</param>
            <param name="data2">The second sample.</param>
            <remarks>
            Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> has length of zero, after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleKSTest.Clone">
            <summary>
            Creates a deep copy of this TwoSampleKSTest.
            </summary>
            <returns>A deep copy of this TwoSampleKSTest.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoSamplePairedTTest">
            <summary>
            Class TwoSamplePairedTTest tests if two paired sets of observed values differ
            from each other in a significant way.
            </summary>
            <remarks>
            Paired samples often occur in pre-test/post-test studies in which subjects are 
            measured before and after an intervention. They also occur in matched-pairs
            (for example, matching on age and sex), cross-over trials, and sequential
            observational samples. Paired samples are also called matched samples and
            dependent samples.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor">
            <summary>
            Default constructor. Constructs a TwoSamplePairedTTest instance with default
            sample parameters, alpha level, and hypothesis type.
            </summary>
            <remarks>
            Constructs a TwoSamplePairedTTest instance with a sample mean of the
            differences between paired observations of 0.0, sample
            standard deviation of the differences of 1.0, and sample size of 2.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Constructs a TwoSamplePairedTTest instance with the given sample parameters.
            </summary>
            <param name="xbar">The mean of the differences between paired observations.</param>
            <param name="s">The standard deviation of the differences between paired observations.</param>
            <param name="n">The sample size.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(System.Double,System.Double,System.Int32,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSamplePairedTTest instance with the given sample and hypothesis
            parameters.
            </summary>
            <param name="xbar">The mean of the differences between paired observations.</param>
            <param name="s">The standard deviation of the differences between paired observations.</param>
            <param name="n">The sample size.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a TwoSamplePairedTTest instance using the given paired vectors of sample data.
            </summary>
            <param name="data1">A vector of observed values.</param>
            <param name="data2">A vector of observed values.</param>
            <remarks>
            The mean of the differences between paired observations, the standard deviation of the
            differences, and the sample size are computed from the given vectors.
            Paired observations where either value is missing are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSamplePairedTTest instance using the given paired vectors of sample data,
            and the given hypothesis parameters.
            </summary>
            <param name="data1">A vector of observed values.</param>
            <param name="data2">A vector of observed values.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
            <remarks>
            The mean of the differences between paired observations, the standard deviation of the
            differences, and the sample size are computed from the given vectors.
            Paired observations where either value is missing are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructs a TwoSamplePairedTTest instance using the given paired arrays of sample data.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <remarks>
            The mean of the differences between paired observations, the standard deviation of the
            differences, and the sample size are computed from the given arrays.
            Paired observations where either value is missing are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(System.Double[],System.Double[],System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSamplePairedTTest instance using the given paired arrays of sample data,
            and the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
            <remarks>
            The mean of the differences between paired observations, the standard deviation of the
            differences, and the sample size are computed from the given arrays.
            Paired observations where either value is missing are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Constructs a TwoSamplePairedTTest instance using the given paired arrays of sample data.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <remarks>
            The mean of the differences between paired observations, the standard deviation of the
            differences, and the sample size are computed from the given arrays.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(System.Int32[],System.Int32[],System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSamplePairedTTest instance using the given paired arrays of sample data,
            and the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
            <remarks>
            The mean of the differences between paired observations, the standard deviation of the
            differences, and the sample size are computed from the given arrays.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a TwoSamplePairedTTest instance using the given paired columns of sample data.
            </summary>
            <param name="data1">A column of observed values.</param>
            <param name="data2">A column of observed values.</param>
            <remarks>
            The mean of the differences between paired observations, the standard deviation of the
            differences, and the sample size are computed from the given columns.
            Paired observations where either value is missing are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs.
            </exception>
            <example cref="T:System.FormatException">
            Thrown if the given data is not numeric.
            </example>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSamplePairedTTest instance using the given paired columns of sample data,
            and the given hypothesis parameters.
            </summary>
            <param name="data1">A column of observed values.</param>
            <param name="data2">A column of observed values.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
            <remarks>
            The mean of the differences between paired observations, the standard deviation of the
            differences, and the sample size are computed from the given columns.
            Paired observations where either value is missing are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs.
            </exception>
            <example cref="T:System.FormatException">
            Thrown if the given data is not numeric.
            </example>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Distribution">
            <summary>
            Gets the distribution of the test statistic associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Type">
            <summary>
            Gets and sets the form of the alternative hypothesis associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Xbar">
            <summary>
            Gets the mean of the differences between paired observations.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.S">
            <summary>
            Gets the standard deviation of the differences between paired observations.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.N">
            <summary>
            Gets the sample size.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Statistic">
            <summary>
            Gets the value of the test statistic associated with this hypothesis
            test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.SEM">
            <summary>
            Gets the standard error of the mean.
            </summary>
            <remarks><code>
            SEM = sigma / sqrt( n )
            </code></remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.LeftCriticalValue">
            <summary>
            Gets the left critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.RightCriticalValue">
            <summary>
            Gets the right critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.LowerConfidenceLimit">
            <summary>
            Gets the 1 - alpha lower confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.NegativeInfinity</c> for one-sided tests to the left.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.UpperConfidenceLimit">
            <summary>
            Gets the 1 - alpha upper confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.PositiveInfinity</c> for one-sided tests to the right.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.LeftProbability">
            <summary>
            Gets the area under the probability distribution to the left of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.RightProbability">
            <summary>
            Gets the area under the probability distribution to the right of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
            <remarks>
            Returns LeftProbability for one-sided tests to the left, 
            RightProbability for one-sided tests to the right, and twice
            the smaller of LeftProbability and RightProbability for two-sided
            tests.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected, using the current 
            hypothesis type and alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with TwoSamplePairedTTests.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSamplePairedTTest.DefaultType">
            <summary>
            Gets and sets the default form of the alternative hypothesis associated with
            TwoSamplePairedTTests.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Update(System.Double,System.Double,System.Int32)">
            <summary>
            Updates the test statistic with new sample parameters.
            </summary>
            <param name="xbar">The mean of the differences between paired observations.</param>
            <param name="s">The standard deviation of the differences between paired observations.</param>
            <param name="n">The sample size.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Update(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A vector of observed values.</param>
            <param name="data2">A vector of observed values.</param>
            <remarks>
            The mean of the differences between paired observations, the standard
            deviation of the differences, and the sample size are computed from the
            given vectors. Paired observations where either value is missing are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Update(System.Double[],System.Double[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <remarks>
            The mean of the differences between paired observations, the standard
            deviation of the differences, and the sample size are computed from the
            given arrays. Paired observations where either value is missing are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Update(System.Int32[],System.Int32[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <remarks>
            The mean of the differences between paired observations, the standard
            deviation of the differences, and the sample size are computed from the
            given arrays. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero pairs.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Update(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A column of observed values.</param>
            <param name="data2">A column of observed values.</param>
            <remarks>
            The mean of the differences between paired observations, the standard
            deviation of the differences, and the sample size are computed from the
            given columns. Paired observations where either value is missing are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs.
            </exception>
            <example cref="T:System.FormatException">
            Thrown if the given data is not numeric.
            </example>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.Clone">
            <summary>
            Creates a deep copy of this TwoSamplePairedTTest.
            </summary>
            <returns>A deep copy of this TwoSamplePairedTTest.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSamplePairedTTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.WilcoxonSignedRankTest">
            <summary>
            Class WilcoxonSignedRankTest tests if two paired sets of observed values differ
            from each other in a significant way.
            </summary>
            <remarks>
            The Wilcoxon signed-rank is a non-parametric statistical hypothesis test for comparing the
            means between two paired samples, or repeated measurements on a single sample. It can be used as
            an alternative to TwoSamplePairedTTest when the population cannot be assumed to be normally
            distributed.
            <br/>
            The null hypothesis is that the distribution x - y is symmetric about 0.
            <br/>
            For n &gt; 10, the sampling distribution of the test statistic converges to a normal distribution. For smaller
            sample sizes, an exact p-value can be calculated by enumerating all possible combinations of the test
            statistic given n.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a WilcoxonSignedRankTest instance using the given paired vectors of sample data.
            </summary>
            <param name="data1">A vector of observed values.</param>
            <param name="data2">A vector of observed values.</param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            <br/>
            The alpha level is set to the current value specified by the
            static DefaultAlpha property. The form of the hypothesis test is set to the
            current DefaultType. Whether an asymptotic p-value or an exact p-value is calculated
            is determined by the current DefaultExactPValue.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>DefaultExactPvalue</c> equals true for n &gt; 30;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Double,CenterSpace.NMath.Stats.HypothesisType,System.Boolean)">
            <summary>
            Constructs a WilcoxonSignedRankTest instance using the given paired vectors of sample data,
            and the given hypothesis parameters.
            </summary>
            <param name="data1">A vector of observed values.</param>
            <param name="data2">A vector of observed values.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
            <param name="exactPValue">
            A boolean value indicating whether to calculate an exact p-value by enumerating all possible combinations of the test
            statistic given n. If <c>false</c>, a normal approximation is used.
            </param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>exactPvalue</c> equals true for n &gt; 30;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructs a WilcoxonSignedRankTest instance using the given paired arrays of sample data.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            <br/>
            The alpha level is set to the current value specified by the
            static DefaultAlpha property. The form of the hypothesis test is set to the
            current DefaultType. Whether an asymptotic p-value or an exact p-value is calculated
            is determined by the current DefaultExactPValue.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>DefaultExactPvalue</c> equals true for n &gt; 30;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.#ctor(System.Double[],System.Double[],System.Double,CenterSpace.NMath.Stats.HypothesisType,System.Boolean)">
            <summary>
            Constructs a WilcoxonSignedRankTest instance using the given paired arrays of sample data,
            and the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
            <param name="exactPValue">
            A boolean value indicating whether to calculate an exact p-value by enumerating all possible combinations of the test
            statistic given n. If <c>false</c>, a normal approximation is used.
            </param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>exactPvalue</c> equals true for n &gt; 30;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Constructs a WilcoxonSignedRankTest instance using the given paired arrays of sample data.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            <br/>
            The alpha level is set to the current value specified by the
            static DefaultAlpha property. The form of the hypothesis test is set to the
            current DefaultType. Whether an asymptotic p-value or an exact p-value is calculated
            is determined by the current DefaultExactPValue.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>DefaultExactPvalue</c> equals true for n &gt; 30;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.#ctor(System.Int32[],System.Int32[],System.Double,CenterSpace.NMath.Stats.HypothesisType,System.Boolean)">
            <summary>
            Constructs a WilcoxonSignedRankTest instance using the given paired arrays of sample data,
            and the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
            <param name="exactPValue">
            A boolean value indicating whether to calculate an exact p-value by enumerating all possible combinations of the test
            statistic given n. If <c>false</c>, a normal approximation is used.
            </param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>exactPvalue</c> equals true for n &gt; 30;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a WilcoxonSignedRankTest instance using the given paired columns of sample data.
            </summary>
            <param name="data1">A column of observed values.</param>
            <param name="data2">A column of observed values.</param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            <br/>
            The alpha level is set to the current value specified by the
            static DefaultAlpha property. The form of the hypothesis test is set to the
            current DefaultType. Whether an asymptotic p-value or an exact p-value is calculated
            is determined by the current DefaultExactPValue.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>DefaultExactPvalue</c> equals true for n &gt; 30;
            </exception>
            <example cref="T:System.FormatException">
            Thrown if the given data is not numeric.
            </example>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,System.Double,CenterSpace.NMath.Stats.HypothesisType,System.Boolean)">
            <summary>
            Constructs a WilcoxonSignedRankTest instance using the given paired columns of sample data,
            and the given hypothesis parameters.
            </summary>
            <param name="data1">A column of observed values.</param>
            <param name="data2">A column of observed values.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
            <param name="exactPValue">
            A boolean value indicating whether to calculate an exact p-value by enumerating all possible combinations of the test
            statistic given n. If <c>false</c>, a normal approximation is used.
            </param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>exactPvalue</c> equals true for n &gt; 30;
            </exception>
            <example cref="T:System.FormatException">
            Thrown if the given data is not numeric.
            </example>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.Type">
            <summary>
            Gets and sets the form of the alternative hypothesis associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.ExactPValue">
            <summary>
            Gets and sets a boolean value indicating whether an exact p-value should be computed, or a normal approximation 
            should be used.
            </summary>
            <remarks>If <c>true</c>, an exact p-value is computed by enumerating all possible combinations of the test
            statistic given n; otherwise, a normal approximation is used.</remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.N">
            <summary>
            Gets the sample size.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.SignedRanks">
            <summary>
            Gets the vector of signed ranks.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.Statistic">
            <summary>
            Gets the value of the test statistic associated with this hypothesis
            test.
            </summary>
            <remarks>
            The Wilcoxon signed rank statistic is the sum of the postive signed ranks.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.LeftProbability">
            <summary>
            Gets the area under the probability distribution to the left of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.RightProbability">
            <summary>
            Gets the area under the probability distribution to the right of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
            <remarks>
            Returns LeftProbability for one-sided tests to the left, 
            RightProbability for one-sided tests to the right, and twice
            the smaller of LeftProbability and RightProbability for two-sided
            tests.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected, using the current 
            hypothesis type and alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with WilcoxonSignedRankTests.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.DefaultType">
            <summary>
            Gets and sets the default form of the alternative hypothesis associated with
            WilcoxonSignedRankTests.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.DefaultExactPValue">
            <summary>
            Gets and sets the default setting for whether an exact p-value should be computed,
            or a normal approximation should be used.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.Update(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Boolean)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A vector of observed values.</param>
            <param name="data2">A vector of observed values.</param>
            <param name="exactPValue">
            A boolean value indicating whether to calculate an exact p-value by enumerating all possible combinations of the test
            statistic given n. If <c>false</c>, a normal approximation is used.
            </param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>exactPvalue</c> equals true for n &gt; 30;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.Update(System.Double[],System.Double[],System.Boolean)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <param name="exactPValue">
            A boolean value indicating whether to calculate an exact p-value by enumerating all possible combinations of the test
            statistic given n. If <c>false</c>, a normal approximation is used.
            </param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>exactPvalue</c> equals true for n &gt; 30;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.Update(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values.</param>
            <param name="data2">An array of observed values.</param>
            <param name="exactPValue">
            A boolean value indicating whether to calculate an exact p-value by enumerating all possible combinations of the test
            statistic given n. If <c>false</c>, a normal approximation is used.
            </param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>exactPvalue</c> equals true for n &gt; 30;
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.Update(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,System.Boolean)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A column of observed values.</param>
            <param name="data2">A column of observed values.</param>
            <param name="exactPValue">
            A boolean value indicating whether to calculate an exact p-value by enumerating all possible combinations of the test
            statistic given n. If <c>false</c>, a normal approximation is used.
            </param>
            <remarks>
            Paired observations where either value is missing, or where the difference between values
            is zero, are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the given data contains zero valid pairs (valid pairs are non-NaN and unequal), or if
            <c>exactPvalue</c> equals true for n &gt; 30;
            </exception>
            <example cref="T:System.FormatException">
            Thrown if the given data is not numeric.
            </example>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.Clone">
            <summary>
            Creates a deep copy of this WilcoxonSignedRankTest.
            </summary>
            <returns>A deep copy of this WilcoxonSignedRankTest.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WilcoxonSignedRankTest.ComputeExactPValue(System.Double,System.Int32)">
            <summary>
            Computes an exact p-value by enumerating all possible rank sums.
            </summary>
            <param name="statistic">The test statistic.</param>
            <param name="n">The sample size.</param>
            <returns></returns>
            <remarks>
            All 2^n possible distributions of signs over ranks are generated as bit-patterns. The algorithm is adapted from
            http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C.
            <br/>
            Equivalent to the R <c>psignrank()</c> method.
            </remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest">
            <summary>
            Class TwoSampleUnpairedTTest tests the null hypothesis that the two population
            means corresponding to two random samples are equal.
            </summary>
            <remarks>
            The two samples are assumed to be independent of each other. (For dependent,
            or paired, samples, see class TwoSamplePairedTTest.) The samples are also
            assumed to come from populations with the same variance, allowing for a pooled
            estimate of the variance. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor">
            <summary>
            Default constructor. Constructs a TwoSampleUnpairedTTest instance with default
            sample parameters, alpha level, and hypothesis type.
            </summary>
            <remarks>
            Constructs a TwoSampleUnpairedTTest instance with a sample means of 0.0, sample
            standard deviations of 1.0, and sample sizes of 2.
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance with the given sample parameters.
            </summary>
            <param name="xbar1">The mean of the first sample.</param>
            <param name="s1">The standard deviation of the first sample.</param>
            <param name="n1">The size of the first sample.</param>
            <param name="xbar2">The mean of the second sample.</param>
            <param name="s2">The standard deviation of the second sample.</param>
            <param name="n2">The size of the second sample.</param>
            <remarks>
            The alpha level is set to the current value specified by the static
            DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance with the given sample and
            and hypothesis parameters.
            </summary>
            <param name="xbar1">The mean of the first sample.</param>
            <param name="s1">The standard deviation of the first sample.</param>
            <param name="n1">The size of the first sample.</param>
            <param name="xbar2">The mean of the second sample.</param>
            <param name="s2">The standard deviation of the second sample.</param>
            <param name="n2">The size of the second sample.</param>
            <param name="alpha">
            The accepted probability of falsely rejecting the null hypothesis.
            </param>
            <param name="type">
            Enum value indicating the form of the alternative hypothesis.
            </param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance using the given vectors of sample data.
            </summary>
            <param name="data1">A vector of observed values for the first sample.</param>
            <param name="data2">A vector of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given vectors. Missing values are ignored. 
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance using the given vectors of sample data, and
            the given hypothesis parameters.
            </summary>
            <param name="data1">A vector of observed values for the first sample.</param>
            <param name="data2">A vector of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given vectors. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance using the given arrays of sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(System.Double[],System.Double[],System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance using the given arrays of sample data, 
            and the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance using the given arrays of sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays.  
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(System.Int32[],System.Int32[],System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance using the given arrays of sample data, 
            and the given hypothesis parameters.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given arrays. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance using the given columns of sample data.
            </summary>
            <param name="data1">A column of observed values for the first sample.</param>
            <param name="data2">A column of observed values for the second sample.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given columns. Missing values are ignored.
            The alpha level is set to the current value specified by the
            static DefaultAlpha property; the form of the hypothesis test is set to the
            current DefaultType.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> is not numeric or has length of zero after 
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.#ctor(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn,System.Double,CenterSpace.NMath.Stats.HypothesisType)">
            <summary>
            Constructs a TwoSampleUnpairedTTest instance using the given columns of sample data, and
            the given hypothesis parameters.
            </summary>
            <param name="data1">A column of observed values for the first sample.</param>
            <param name="data2">A column of observed values for the second sample.</param>
            <param name="alpha">The accepted probability of falsely rejecting
            the null hypothesis.</param>
            <param name="type">Enum value indicating the form of the alternative
            hypothesis.</param>
            <remarks>
            The sample means, sample standard deviations, and sample sizes are computed from
            the given columns. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> is not numeric or has length of zero after
            removing missing values.
            </exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Distribution">
            <summary>
            Gets the distribution of the test statistic associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Alpha">
            <summary>
            Gets and sets the alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Type">
            <summary>
            Gets and sets the form of the alternative hypothesis associated with this
            hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Xbar1">
            <summary>
            Gets the mean of the first sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.S1">
            <summary>
            Gets the standard deviation of the first sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.N1">
            <summary>
            Gets the size of the first sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Xbar2">
            <summary>
            Gets the mean of the second sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.S2">
            <summary>
            Gets the standard deviation of the second sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.N2">
            <summary>
            Gets the size of the second sample.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.SPooled">
            <summary>
            Gets the pooled estimate of the standard deviation.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Statistic">
            <summary>
            Gets the value of the test statistic associated with this hypothesis
            test.
            </summary>
            <remarks><code>
            t = ( Xbar1 - Xbar2 ) / SEM
            </code></remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.SEM">
            <summary>
            Gets the standard error of the mean.
            </summary>
            <remarks><code>
            SEM = SPooled / sqrt( 1/N1 + 1/N2 )
            </code></remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.LeftCriticalValue">
            <summary>
            Gets the left critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.RightCriticalValue">
            <summary>
            Gets the right critical value based on the current probability 
            distribution and alpha level associated with this hypothesis test.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.LowerConfidenceLimit">
            <summary>
            Gets the 1 - alpha lower confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.NegativeInfinity</c> for one-sided tests to the left.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.UpperConfidenceLimit">
            <summary>
            Gets the 1 - alpha upper confidence limit for the true mean.
            </summary>
            <remarks>
            Returns <c>Double.PositiveInfinity</c> for one-sided tests to the right.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.LeftProbability">
            <summary>
            Gets the area under the probability distribution to the left of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.RightProbability">
            <summary>
            Gets the area under the probability distribution to the right of the
            test statistic.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.P">
            <summary>
            Gets the p-value associated with the test statistic.
            </summary>
            <remarks>
            Returns LeftProbability for one-sided tests to the left, 
            RightProbability for one-sided tests to the right, and twice
            the smaller of LeftProbability and RightProbability for two-sided
            tests.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Reject">
            <summary>
            Tests whether the null hypothesis can be rejected, using the current 
            hypothesis type and alpha level.
            </summary>
            <remarks>
            Returns <c>true</c> if <c>P &lt; Alpha</c>; otherwise, <c>false</c>. 
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.DefaultAlpha">
            <summary>
            Gets and sets the default alpha level associated with TwoSampleUnpairedTTests.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.DefaultType">
            <summary>
            Gets and sets the default form of the alternative hypothesis associated with
            TwoSampleUnpairedTTests.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Update(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Updates the test statistic with new sample parameters.
            </summary>
            <param name="xbar1">The mean of the first sample.</param>
            <param name="s1">The standard deviation of the first sample.</param>
            <param name="n1">The size of the first sample.</param>
            <param name="xbar2">The mean of the second sample.</param>
            <param name="s2">The standard deviation of the second sample.</param>
            <param name="n2">The size of the second sample.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Update(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Core.DoubleVector)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A vector of observed values for the first sample.</param>
            <param name="data2">A vector of observed values for the second sample.</param>
            <remarks>
            The new sample means, sample standard deviations, and sample sizes
            are computed from the given data vectors. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Update(System.Double[],System.Double[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The new sample means, sample standard deviations, and sample sizes
            are computed from the given data arrays. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero after removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Update(System.Int32[],System.Int32[])">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">An array of observed values for the first sample.</param>
            <param name="data2">An array of observed values for the second sample.</param>
            <remarks>
            The new sample means, sample standard deviations, and sample sizes
            are computed from the given data arrays. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if either sample has length of zero.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Update(CenterSpace.NMath.Stats.IDFColumn,CenterSpace.NMath.Stats.IDFColumn)">
            <summary>
            Updates the test statistic with new sample data.
            </summary>
            <param name="data1">A column of observed values for the first sample.</param>
            <param name="data2">A column of observed values for the second sample.</param>
            <remarks>
            The new sample means, sample standard deviations, and sample sizes
            are computed from the given data columns. Missing values are ignored.
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if <c>data1</c> or <c>data2</c> is not numeric or has length of zero after
            removing missing values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.Clone">
            <summary>
            Creates a deep copy of this TwoSampleUnpairedTTest.
            </summary>
            <returns>A deep copy of this TwoSampleUnpairedTTest.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoSampleUnpairedTTest.ToString">
            <summary>
            Returns a formatted string representation of the test results.
            </summary>
            <returns>A formatted string representation of the test results.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnova">
            <summary>
            Class TwoWayAnova performs a balanced two-way analysis of variance.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnova.regressionMatrix_">
            <summary>
            The regression matrix used to compute the ANOVA.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnova.lr_">
            <summary>
            The linear regression used to compute the ANOVA
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnova.lrAnova_">
            <summary>
            The ANOVA for the linear regression.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnova.parameterSumsOfSquares_">
            <summary>
            The sums of squares for all the parameters in the regression. These are
            in the same order as the regression parameters.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnova.anovaTable_">
            <summary>
            A traditional ANOVA table representation of the results.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnova.factorParameters_">
            <summary>
            Stats for the regression parameters corresponding to the two factors.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnova.interactionParameters_">
            <summary>
            Stats for the regression parameters corresponding to the interaction
            between the two factor.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnova.interceptParameter_">
            <summary>
            Stats for the regression intercept parameter.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a TwoWayAnova instance from data in the given data frame.
            </summary>
            <param name="data">A data frame.</param>
            <param name="factorAColIndex">The index of the column for Factor A.</param>
            <param name="factorBColIndex">The index of the column for Factor B.</param>
            <param name="dataColIndex">The index of the data column. The indicated column
            must be numeric and cannot contain missing values.</param>
            <remarks>
            Factors are constructed from the factor columns using the DataFrame method
            <c>GetFactor()</c>, which creates a sorted array of the unique values. 
            </remarks>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">
            Thrown if the data column contains missing values (NaNs) or the data cannot
            be converted into numeric values.
            </exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.#ctor">
            <summary>
            No argument contructor. Used primarily for serialization.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnova.AnovaTable">
            <summary>
            Gets a traditional two-way ANOVA table.
            </summary>
            <remarks>
            The returned TwoWayAnovaTable instance provides member functions and read-only
            properties for accessing individual elements in the ANOVA table.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnova.GrandMean">
            <summary>
            Gets the grand mean.
            </summary>
            <remarks>
            The grand mean is the mean of all the data.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnova.RegressionFactorParameters">
            <summary>
            Gets the array of estimates for the linear regression parameters corresponding to
            the dummy variables for the different factor levels.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnova.RegressionInteractionParameters">
            <summary>
            Gets the array of estimates for the linear regression parameters corresponding
            to the dummy variables for the interactions.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnova.RegressionInterceptParameter">
            <summary>
            Gets the intercept parameter from the linear regression that was used to 
            compute the ANOVA.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.GetRegressionFactorParameter(System.String,System.Object)">
            <summary>
            Returns the regression parameter associated with the specified factor level.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <param name="factorLevel">The level of the factor.</param>
            <returns>Regression parameter information for the given factor level,
            if the specified factor level has a regression parameter associated with it; 
            otherwise, <c>null</c>.</returns>
            <remarks>
            To construct the linear regression used to compute the two way ANOVA, the
            <i>effects encoding</i> method is used for the dummy regression variables.
            This means that if a factor has <c>n</c> different levels there are <c>n-1</c>
            dummy variables corresponding to that factor. Hence, one level does not have
            a dummy variable associated with it in the linear regression, and a
            null reference may be returned even though a valid factor level is specified.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.GetRegressionInteractionParameter(System.String,System.Object,System.String,System.Object)">
            <summary>
            Returns the regression parameter associated with the specified interaction.
            </summary>
            <param name="factorAName">The name of the first factor.</param>
            <param name="factorALevel">The level for the first factor.</param>
            <param name="factorBName">The name of the second factor.</param>
            <param name="factorBLevel">The level for the second factor.</param>
            <returns>Regression parameter information for the specified interaction,
            if the specified interaction has a regression parameter associated with it;
            otherwise, <c>null</c>.</returns>
            <remarks>
            To construct the linear regression used to compute the two way ANOVA, the
            <i>effects encoding</i> method is used for the dummy regression variables.
            This means that if there are <c>n</c> different levels for the first factor
            and <c>m</c> different levels for the second factor, there are <c>(n-1) * (m-1)</c>
            dummy variables corresponding to the interactions. Hence, some interactions do
            have a dummy variable associated with them in the linear regression, and a 
            null reference may be returned even though valid interactions are specified.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.Clone">
            <summary>
            Creates a deep copy of this TwoWayAnova.
            </summary>
            <returns>A deep copy of this TwoWayAnova.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.ToString">
            <summary>
            Returns a formatted string representation of a traditional two-way analysis
            of variance table.
            </summary>
            <returns>The ANOVA table for this ANOVA object as a string.</returns>
            <remarks>
            Convenience method equivalent to calling <c>this.AnovaTable.ToString()</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.GetRegressionFactorParameters">
            <summary>
            Fills in the array of AnovaRegressionFactorParam objects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.MakeFactorParameters(System.Int32)">
            <summary>
            Create the array of AnovaRegressionFactorParam objects, one for each 
            regression dummy variable. The sums of squares for each of these
            parameters is assumed to have been computed are are stored in the 
            DoubleVector instance variable <c>parameterSumsOfSquares</c> with
            the parameters for factor A first, followed by the parameters for
            factor B and starting at the given index.
            </summary>
            <param name="sumOfSquaresIndex">Index of the starting point for the
            factor parameter sums of squares in the DoubleVector instance variable
            parameterSumsOfSquares.</param>
            <returns>The array of AnovaRegressionFactorParam's</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.GetRegressionInteractionParameters">
            <summary>
            Fill in the array of AnovaRegressionInteractionParam objects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.MakeInteractionParameters(System.Int32)">
            <summary>
            Creates the array of AnovaRegressionInteractionParam objects using the 
            DoubleVector instance variable parameterSumsOfSquares_. The sums of 
            squares for the interaction parameters are assumed to begin at the 
            given index.
            </summary>
            <param name="sumOfSquaresIndex">Index into the DoubleVector parameterSumsOfSquares_
            where the interaction sums of squares start.</param>
            <returns>Array of AnovaRegressionInteractionParam objects.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.CreateAnovaTable">
            <summary>
            Create the ANOVA table for this object.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.FillInRegressionMatrix(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fill in the regression matrix that is to be used for computing the ANOVA.
            </summary>
            <param name="data">Data frame containing the data.</param>
            <param name="factorAColIndex">The index of column containing the factor A.</param>
            <param name="factorBColIndex">The index of column containing the factor B.</param>
            <param name="dataColIndex">The index of column containing the data. This column 
            must be numeric or convertible to a numeric type.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.ComputeAnova(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Compute the ANOVA for the given data.
            </summary>
            <param name="data">Data frame containing the data.</param>
            <param name="factorAColIndex">The index of column containing the factor A.</param>
            <param name="factorBColIndex">The index of column containing the factor B.</param>
            <param name="dataColIndex">The index of column containing the data. This column 
            must be numeric or convertible to a numeric type.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.ComputeFactorSumsOfSquares">
            <summary>
            Fill in the DoubleVector parameterSumsOfSquares_ with the sums of
            squares for the parameters used in the regression that is used to
            compute the ANOVA.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnova.GetRegressionInterceptParameter">
            <summary>
            Assigns a AnovaRegressionParameter to the instance variable
            interceptParameter_.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayAnovaTable">
            <summary>
            Class TwoWayAnovaTable summarizes the information of a traditional two-way
            Analysis of Variance (ANOVA) table.
            </summary>
            <remarks>
            Class TwoWayAnovaTable derives from class DataFrame in order
            to represent a traditional two-way ANOVA table. A two-way ANOVA table
            contains 5 rows and 6 columns. The rows contain information for each of the
            following sources: Factor A, Factor B, the Interaction between Factor A and
            Factor B, Error (Residual), and Total. The columns contain the following
            quantities for each source: Degrees of Freedom, Sum of Squares,
            Mean Square, F statistice and P-values (only for the Factors A and B and 
            their interaction).
            <br/>
            Instances of TwoWayAnovaTable are obtained from a TwoWayAnova object using the
            <c>AnovaTable</c> property, and cannot be constructed independently. 
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaTable.InteractionRowKey">
            <summary>
            The key used to access the <c>Interaction</c> row in the ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaTable.ErrorRowKey">
            <summary>
            The key used to access the <c>Error</c> row in the ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaTable.TotalRowKey">
            <summary>
            The key used to access the <c>Total</c> row in the ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaTable.DegressOfFreedomColName">
            <summary>
            The nme of the Degrees of Freedom column in the ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaTable.SumOfSquaresColName">
            <summary>
            The name of the Sum of Squares column of the ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaTable.MeanSquareColName">
            <summary>
            The name of the Mean Square column of the ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaTable.FstatisticColName">
            <summary>
            The name of the F statistic column of the ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaTable.PvalueColName">
            <summary>
            The name of the p-value column of the ANOVA table.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayAnovaTable.RowKeyHeaderName">
            <summary>
            The name of the row key header in the ANOVA table.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.#ctor">
            <summary>
            Constructs an empty two way ANOVA table.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.#ctor(CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Stats.Factor,CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.LinearRegressionAnova)">
            <summary>
            Constructs a two way ANOVA table from regression data.
            </summary>
            <param name="factorA">Factor A object.</param>
            <param name="factorB">Factor B object.</param>
            <param name="parameterSumsOfSquares">The sums of squares for the
            regression parameters.</param>
            <param name="lrAnova">The ANOVA for the regression used to compute
            the ANOVA.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.InteractionSumOfSquares">
            <summary>
            Gets the sum of squares for the interaction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.ErrorSumOfSquares">
            <summary>
            Gets the sum of squares for the error.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.TotalSumOfSquares">
            <summary>
            Gets the total sum of squares.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.InteractionDegreesOfFreedom">
            <summary>
            Gets the degrees of freedom for the interaction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.ErrorDegreesOfFreedom">
            <summary>
            Gets the degrees of freedom for the error.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.TotalDegreesOfFreedom">
            <summary>
            Gets the total degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.InteractionMeanSquare">
            <summary>
            Gets the mean square for the interaction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.ErrorMeanSquare">
            <summary>
            Gets the mean square for the error.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.InteractionFstatistic">
            <summary>
            Gets the F statistic for the interaction.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayAnovaTable.InteractionFstatisticPvalue">
            <summary>
            Gets the p-value for the F statistic for the interaction.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.SumOfSquares(System.String)">
            <summary>
            Returns the sum of squares for a specified factor.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <returns>The sum of squares for the specified factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.DegreesOfFreedom(System.String)">
            <summary>
            Returns the degrees of freedom for the specified factor.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <returns>The degrees of freedom for the specified factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.MeanSquare(System.String)">
            <summary>
            Returns the mean square for the specified factor.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <returns>The mean square for the specified factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.Fstatistic(System.String)">
            <summary>
            Returns the F statistic for the specified factor.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <returns>The F statistic for the specified factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.FstatisticPvalue(System.String)">
            <summary>
            Returns the p-value for the F statistic for the specified factor.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <returns>The F statistic p-value for the specified factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.Clone">
            <summary>
            Creates a deep copy of this TwoWayAnovaTable.
            </summary>
            <returns>A deep copy of this TwoWayAnovaTable.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.AddAnovaRowForFactor(System.Double,System.Int32,CenterSpace.NMath.Stats.LinearRegressionAnova,System.String)">
            <summary>
            Adds a row to the ANOVA table for a factor.
            </summary>
            <param name="factorSumOfSquares">Sum of squares for the factor.</param>
            <param name="degreesOfFreedom">Degrees of freedom for the factor.</param>
            <param name="lrAnova">The ANOVA regression.</param>
            <param name="factorName">The factor name.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayAnovaTable.AddAnovaRowForFactor(CenterSpace.NMath.Core.DoubleVector,CenterSpace.NMath.Stats.LinearRegressionAnova,System.String)">
            <summary>
            Adds a row to the table for a given ANOVA factor.
            </summary>
            <param name="factorSumOfSquares">The sums of squares for the factor.</param>
            <param name="lrAnova">The ANOVA for the regression used in computation.</param>
            <param name="factorName">The name of the factor.</param>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayRanova">
            <summary>
            Class TwoWayRanova performs a balanced two-way analysis of variance with
            repeated measures on one factor.
            </summary>
            <remarks>
            Multiple linear regression is used to compute the RANOVA values.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanova.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a TwoWayRanova instance, with repeated measures on one factor,
            from the given data frame.
            </summary>
            <param name="data">A data frame.</param>
            <param name="repeatedFactorColIndex">The index of the column for the 
            repeated factor.</param>
            <param name="nonRepeatedFactorColIndex">The index of the column for the
            nonrepeated factor.</param>
            <param name="dataColIndex">The index of the data column. The indicated
            column must be numeric and cannot contain missing values.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanova.#ctor">
            <summary>
            No argument contructor. Used primarily for serialization.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayRanova.RanovaTable">
            <summary>
            Gets a traditional two-way RANOVA table.
            </summary>
            <remarks>
            The returned TwoWayRanovaTable instance provides member functions and read-only
            properties for accessing individual elements in the RANOVA table.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayRanova.RegressionSubjectParameters">
            <summary>
            Gets the array of estimates for the linear regression parameters corresponding to
            the dummy variables for the different subjects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanova.Clone">
            <summary>
            Creates a deep copy of this TwoWayRanova.
            </summary>
            <returns>A deep copy of this TwoWayRanova.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanova.FillInRegressionMatrix(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills in the regression matrix and observation vector used in computing the ANOVA.
            </summary>
            <param name="data">ANOVA data.</param>
            <param name="repeatedFactorColIndex">The index in <c>data</c> of the column containing
            the repeated factor data.</param>
            <param name="nonRepeatedFactorColIndex">The index in <c>data</c> of the column containing
            the nonrepeated factor data.</param>
            <param name="dataColIndex">The index in <c>data</c> of the column containing
            the data. Must be numeric and contain no missing values.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanova.GetRegressionFactorParameters">
            <summary>
            Fills in the array of AnovaRegressionFactorParam objects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanova.FillInSubjectMatrix(CenterSpace.NMath.Core.DoubleMatrix)">
            <summary>
            Fills in a matrix with the values of subject dummy variables used as
            a part of the regression matrix for the regression that is used to 
            compute the RANOVA. This subject matrix will have ones on the main
            diagonal up to, but not including the last row. The last row will 
            be all -1. All other elements are zero. This corresponds to the
            following encoding of the subject dummy variables:
            
            If there are n subjects and the ith value of the dummy variable is
            denoted by Si, then
            Si = 1,  if person i and i is strictly less than n
            Si = -1, if person n
            Si = 0,  otherwise.
            </summary>
            <param name="subjectMatrix"></param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanova.CreateAnovaTable">
            <summary>
            Create the ANOVA table for this object.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanova.GetRegressionInteractionParameters">
            <summary>
            Fill in the array of AnovaRegressionInteractionParam objects.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayRanovaTable">
            <summary>
            Class TwoWayRanovaTable summarizes the information of a traditional two-way
            Analysis of Variance (RANOVA) table.
            </summary>
            <remarks>
            Class TwoWayRanovaTable derives from class DataFrame in order
            to represent a traditional two-way RANOVA table. A two-way RANOVA table
            contains 6 rows and 6 columns. The rows contain information for each of the
            following sources: Factor A, Factor B, the Interaction between Factor A and
            Factor B, Subjects in the nonrepeated factor, Error (Residual), and Total. 
            The columns contain the following quantities for each source: Degrees of 
            Freedom, Sum of Squares, Mean Square, F statistice and P-values (only for 
            the Factors A and B and their interaction).
            <br/>
            Instances of TwoWayRanovaTable are obtained from a TwoWayRanova object using the
            <c>RanovaTable</c> property, and cannot be constructed independently. 
            </remarks>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TwoWayRanovaTable.SubjectsRowKey">
            <summary>
            The key used to access the <c>Subjects</c> row in the RANOVA table.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayRanovaTable.SubjectsSumOfSquares">
            <summary>
            Gets the sum of squares for the subjects.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayRanovaTable.SubjectsDegreesOfFreedom">
            <summary>
            Gets the subjects degrees of freedom.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayRanovaTable.SubjectsMeanSquare">
            <summary>
            Gets the mean square for the subjects.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayRanovaTwo">
            <summary>
            Class TwoWayRanovaTwo performs a balanced two-way analysis of variance with
            repeated measures on both factors.
            </summary>
            <remarks>
            Multiple linear regression is used to compute the RANOVA values.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwo.#ctor(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a TwoWayRanova instance, with repeated measures on both factors,
            from the given data frame.
            </summary>
            <param name="data">A data frame.</param>
            <param name="factorAcolIndex">The index of the column for Factor A.</param>
            <param name="factorBcolIndex">The index of the column for Factor B.</param>
            <param name="dataColIndex">The index of the data column. The indicated column
            must be numeric and cannot contain missing values.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwo.#ctor">
            <summary>
            No argument contructor. Used primarily for serialization.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayRanovaTwo.RanovaTable">
            <summary>
            Gets a traditional two-way RANOVA table.
            </summary>
            <remarks>
            The returned TwoWayRanovaTableTwo instance provides member functions and read-only
            properties for accessing individual elements in the RANOVA table.
            </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.TwoWayRanovaTwo.RegressionSubjectParameters">
            <summary>
            Gets the array of estimates for the linear regression parameters corresponding to
            the dummy variables for the interaction of the ANOVA factors with the subjects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwo.Clone">
            <summary>
            Creates a deep copy of this TwoWayRanovaTwo.
            </summary>
            <returns>A deep copy of this TwoWayRanovaTwo.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwo.FillInRegressionMatrix(CenterSpace.NMath.Stats.DataFrame,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fill in the regression matrix and observation vector that is to be 
            used for computing the RANOVA.
            </summary>
            <param name="data">Data frame containing the data.</param>
            <param name="factorAColIndex">The index of column containing the factor A.</param>
            <param name="factorBColIndex">The index of column containing the factor B.</param>
            <param name="dataColIndex">The index of column containing the data. This column 
            must be numeric or convertible to a numeric type.</param>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwo.GetRegressionFactorParameters">
            <summary>
            Fills in the array of AnovaRegressionFactorParam objects.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwo.CreateAnovaTable">
            <summary>
            Create the RANOVA table for this object.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwo.GetRegressionInteractionParameters">
            <summary>
            Fill in the array of AnovaRegressionInteractionParam objects.
            </summary>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TwoWayRanovaTwoTable">
            <summary>
            Class TwoWayRanovaTwoTable summarizes the information of a traditional two-way
            Analysis of Variance, with repeated measures on both factors, table,
            </summary>
            <remarks>
            Class TwoWayRanovaTwoTable derives from class DataFrame in order
            to represent a traditional two-way RANOVA table. A two-way RANOVA table
            contains 7 rows and 6 columns. The rows contain information for each of the
            following sources: Factor A, Factor B, the Interaction between Factor A and
            Factor B, the Interactions between Factor A and subjects, the interaction
            between Factor B and subjets, Error (Residual), and Total. The columns 
            contain the followingquantities for each source: Degrees of Freedom, Sum 
            of Squares, Mean Square, F statistice and P-values (only for the Factors 
            A and B and their interaction).
            <br/>
            Instances of TwoWayRanovaTwoTable are obtained from a TwoWayRanovaTwo object using the
            <c>RanovaTable</c> property, and cannot be constructed independently. 
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwoTable.SubjectInteractionSumOfSquares(System.String)">
            <summary>
            Returns the sum of squares for the interaction between subjects and the
            specified factor.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <returns>The sum of squares for the interaction between subjects and the
            specified factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwoTable.SubjectInteractionDegreesOfFreedom(System.String)">
            <summary>
            Returns the degrees of freedom for the interaction between subjects and the
            specified factor.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <returns>The degrees of freedom for the interaction between subjects and the
            specified factor.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.TwoWayRanovaTwoTable.SubjectInteractionMeanSquare(System.String)">
            <summary>
            Returns the mean square for the interaction between subjects and the
            specified factor.
            </summary>
            <param name="factorName">The name of a factor.</param>
            <returns>The mean square for the interaction between subjects and the
            specified factor.</returns>
            <remarks>The mean square is the sum of squares divided by the degrees
            of freedom.</remarks>
        </member>
        <member name="T:CenterSpace.NMath.Stats.UniformDistribution">
            <summary>
            Class UniformDistribution represents the Uniform probability distribution.
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.UniformDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructs an UniformDistribution instance with the given upper and lower
            limits.
            </summary>
            <param name="lowerLimit">The lower limit for the distribution.</param>
            <param name="upperLimit">The upper limit for the distribution.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the upper and 
            lower limits are the same.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.UniformDistribution.#ctor">
            <summary>
            Default constructor for class UnifromDistribution. Constructs a
            UniformDistribution instance with lower limit equal zero and 
            upper limit equal one. 
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.UniformDistribution.LowerLimit">
            <summary>
            Gets the lower limit for the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.UniformDistribution.UpperLimit">
            <summary>
            Gets the upper limit for the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.UniformDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.UniformDistribution.Variance">
            <summary>
             Gets the variance of the distribution.
             <remarks>The variance of the distribution is the standard deviation squared.
             </remarks>
             </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.UniformDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.UniformDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
        </member>
        <member name="M:CenterSpace.NMath.Stats.UniformDistribution.SetLimits(System.Double,System.Double)">
            <summary>
            Sets the lower and upper limits for this distribution.
            </summary>
            <param name="lowerLimit">The lower limit for the distribution.</param>
            <param name="upperLimit">The upper limit for the distribution.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the upper and lower
            limits are the same.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.UniformDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this uniform density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.UniformDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated a the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If the input probability, p, is less than 0 or greater than 1 the 
            NaN value is returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.UniformDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.UniformDistribution.Clone">
            <summary>
            Creates a deep copy of this UniformDistribution.
            </summary>
            <returns>A deep copy of this UniformDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.UniformDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.WeibullDistribution">
             <summary>
             Class WeibullDistribution represents the Weibull probability distribution.
             </summary>
             <remarks>The probability density function of the Weibull distribution is
             given by:
             <c>f(x;k,a) = (k/a)*(x/a)^(k-1)*exp(-(x/a)k)</c>
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a WeibullDistribution instance with the given scale and shape.
            </summary>
            <param name="scale">The scale parameter for the distribution. Must be positive.</param>
            <param name="shape">The shape parameter for the distribution. Must be positive.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the scale or 
            shape parameters are less than or equal to zero.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a WeibullDistribution instance from serialization information.
            </summary>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeibullDistribution.Scale">
            <summary>
            Gets and sets the scale parameter for the distribution. The scale parameter
            must be positive.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if setting the scale value
            to a number less than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeibullDistribution.Shape">
            <summary>
            Gets and sets the shape parameter for the distribution. The shape parameter
            must be positive.
            </summary>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if setting the shape value
            to a number less than or equal to zero.</exception>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeibullDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeibullDistribution.Variance">
            <summary>
             Gets the variance of the distribution.
             </summary>
             <remarks>The variance of the distribution is the standard deviation squared.
             </remarks>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeibullDistribution.Kurtosis">
            <summary>
            Gets the kurtosis, a measure of the degree of peakednesss of the
            distribution.
            </summary>
        </member>
        <member name="P:CenterSpace.NMath.Stats.WeibullDistribution.Skewness">
            <summary>
            Gets the skewness, a measure of the degree of asymmetry of 
            this distribution. 
            </summary>
            <remarks>
            The skewness is the third central moment divided by the cube of 
            the standard deviation.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.CDF(System.Double)">
            <summary>
            Returns the cumulative density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The cumulative density function evaluated at <c>x</c>.</returns>
            <remarks>The value of the cumulative density function at a point <c>x</c> is
            probability that the value of a random variable having this Weibull density is
            less than or equal to <c>x</c>.
            </remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.InverseCDF(System.Double)">
            <summary>
            Returns the inverse cumulative density function evaluated a the given value.
            </summary>
            <param name="p">A probability between 0 and 1.</param>
            <returns>The value <c>x</c> such that the cumulative density function evaluated
            at <c>x</c> yields <c>p</c>.</returns>
            <remarks>If the input probability, p, is less than 0 or greater than 1 the 
            NaN value is returned.</remarks>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.PDF(System.Double)">
            <summary>
            Returns the probability density function evaluated at a given value.
            </summary>
            <param name="x">A position on the x-axis.</param>
            <returns>The probability density function evaluated at <c>x</c>.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.Clone">
            <summary>
            Creates a deep copy of this WeibullDistribution.
            </summary>
            <returns>A deep copy of this WeibullDistribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.ToString">
            <summary>
            Returns a formatted string representation of this distribution.
            </summary>
            <returns>A formatted string representation of this distribution.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.SetParameters(System.Double,System.Double)">
            <summary>
            Sets the scale and shape parameter for this distribution.
            </summary>
            <param name="scale">The scale parameter. Must be positive.</param>
            <param name="shape">The shape parameter. Must be positive.</param>
            <exception cref="T:CenterSpace.NMath.Core.InvalidArgumentException">Thrown if the input scale
            or shape parameters are less than or equal to 0.</exception>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.Fit(System.Double[],System.Double,System.Double,CenterSpace.NMath.Analysis.TrustRegionMinimizer)">
            <summary>
            Fits a Weibull distrubution to data. The fit is done using maximum 
            likelihood. 
            </summary>
            <param name="data">Observed data.</param>
            <param name="initialScale">Intial guess for the distributions scale parameter.</param>
            <param name="initialShape">Initial guess for the distributions shape parameter.</param>
            <param name="minimizer">Least squares minimizer used to minimuze the derivatives.
            If null a <c>TrustRegioMinimizer</c> with default settings will be used.</param>
            <returns>A Weibull distribution object with fitted parameters if the fit is successfull. Null otherwise.</returns>
        </member>
        <member name="M:CenterSpace.NMath.Stats.WeibullDistribution.Fit(CenterSpace.NMath.Core.DoubleVector,System.Double,System.Double,CenterSpace.NMath.Analysis.TrustRegionMinimizer)">
            <summary>
            Fits a Weibull distrubution to data. The fit is done using maximum 
            likelihood. 
            </summary>
            <param name="data">Observed data.</param>
            <param name="initialScale">Intial guess for the distributions scale parameter.</param>
            <param name="initialShape">Initial guess for the distributions shape parameter.</param>
            <param name="minimizer">Least squares minimizer used to minimuze the derivatives.
            If null a <c>TrustRegioMinimizer</c> with default settings will be used.</param>
            <returns>A Weibull distribution object with fitted parameters if the fit is successfull. Null otherwise.</returns>
        </member>
        <member name="T:CenterSpace.NMath.Stats.TieStrategy">
            <summary>
            Enumeration for specifying different strategies for dealing with ties. For example,
            in ranks.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TieStrategy.Minimum">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TieStrategy.Maximum">
            <summary>
            Descending order. 
            </summary>
        </member>
        <member name="F:CenterSpace.NMath.Stats.TieStrategy.Average">
            <summary>
            Average. 
            </summary>
        </member>
    </members>
</doc>
